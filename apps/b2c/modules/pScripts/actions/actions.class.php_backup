<?php

/**
 * scripts actions.
 *
 * @package    zapnacrm
 * @subpackage scripts
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php,v 1.5 2010-09-19 22:20:12 orehman Exp $
 */
class pScriptsActions extends sfActions
{
 /**
  * Executes index action
  *
  * @param sfRequest $request A request object
  */
  public function executeClearTestData(sfWebRequest $request)
  {


      //clear fonet balance of test fonet accounts
      foreach (FonetCustomerPeer::doSelect(new Criteria()) as $fonet_customer) {
            foreach ($fonet_customer->getCustomers() as $customer)
            {
              if (Fonet::unregister($customer, false))
                      echo sprintf("%s is unregistered<br />", $customer->getMobileNumber());
              if ($current_balance = Fonet::getBalance($customer, false))
                      echo sprintf("Current balance of custoemr is %s<br />", $current_balance);

              if (Fonet::recharge($customer, -$current_balance, false))
                      echo sprintf("current balance is made 0<br />");
            }
      }
      $con = Propel::getConnection();

      $con->exec('DELETE FROM transaction');
      $con->exec('DELETE FROM customer_order');
      $con->exec('DELETE FROM customer_product');
      $con->exec('DELETE FROM customer');
      $con->exec('TRUNCATE zerocall_cdr');
      $con->exec('TRUNCATE cloud9_data');

      $con->exec("UPDATE fonet_customer SET activated_on = NULL");


      echo "all data is flushed... customers, trnsactions, orders deleted. fonet customer id disconnected... their balances made to 0 on fonet";

    return sfView::NONE;
  }

  public function executeSetAllFonetCustomersBalance0() {
      foreach (FonetCustomerPeer::doSelect(new Criteria()) as $fonet_customer) {
                $customer = new Customer();
                $customer->setFonetCustomerId($fonet_customer->getFonetCustomerId());
                
              if ($current_balance = Fonet::getBalance($customer, false))
                      echo sprintf("Current balance of custoemr is %s<br />", $current_balance);

              if (Fonet::recharge($customer, -$current_balance, false))
                      echo sprintf("Now new balance is %s<br />", Fonet::getBalance($customer, false));
      }

      return sfView::NONE;
  }

  public function executeUnregisterFonetCustomer(sfWebRequest $request) {
      $customer = new Customer();
      $customer->setMobileNumber($request->getParameter('mobile_number'));
      $customer->setFonetCustomerId($request->getParameter('fonet_id'));

      echo sprintf("Unregistering customer with mobile number %s, and fonet ID %s <br />", $request->getParameter('mobile_number'), $request->getParameter('fonet_id'));
      
      if (Fonet::unregister($customer, false))
              echo sprintf("%s is unregistered<br />", $customer->getMobileNumber());
      if ($current_balance = Fonet::getBalance($customer, false))
              echo sprintf("Current balance of custoemr is %s<br />", $current_balance);

      if (Fonet::recharge($customer, -$current_balance, false))
              echo sprintf("current balance is made 0<br />");

      return sfView::NONE;
  }

  public function executeAutoRefill(sfWebRequest $request)
  {

  	//get customers to refill
  	$c = new Criteria();

  	$c->add(CustomerPeer::CUSTOMER_STATUS_ID, sfConfig::get('app_status_completed'));
  	$c->add(CustomerPeer::AUTO_REFILL_AMOUNT, 0, Criteria::NOT_EQUAL);
  	$c->add(CustomerPeer::SUBSCRIPTION_ID, null, Criteria::ISNOTNULL);

  	//$c1 = $c->getNewCriterion(CustomerPeer::LAST_AUTO_REFILL, 'TIMESTAMPDIFF(MINUTE, LAST_AUTO_REFILL, NOW()) > 1' , Criteria::CUSTOM);
        $c1 = $c->getNewCriterion(CustomerPeer::ID, null, Criteria::ISNOTNULL); //just accomodate missing disabled $c1
  	$c2 = $c->getNewCriterion(CustomerPeer::LAST_AUTO_REFILL, null, Criteria::ISNULL);

  	$c1->addOr($c2);

  	$c->add($c1);

  	$epay_con = new EPay();

  	$customer = new Customer();

        var_dump(CustomerPeer::doCount($c));


        try {
            foreach (CustomerPeer::doSelect($c) as $customer)   	{

                $customer_balance = Fonet::getBalance($customer);
                
                var_dump($customer_balance);
                //if customer balance is less than 10
                if ($customer_balance != null && $customer_balance <= $customer->getAutoRefillMinBalance())   		{
                    
                    
                    
                    //create an order and transaction
                    $customer_order = new CustomerOrder();
                    $customer_order->setCustomer($customer);

                    //select order product
                    $c = new Criteria();
                    $c->add(CustomerProductPeer::CUSTOMER_ID, $customer->getId());
                    $customer_product = CustomerProductPeer::doSelectOne($c);

                    var_dump(CustomerProductPeer::doCount($c));
                    

                    
                    $customer_order->setProduct($customer_product->getProduct());
                    $customer_order->setQuantity(0);
                    $customer_order->setExtraRefill($customer->getAutoRefillAmount());


                    //create a transaction
                    $transaction = new Transaction();
                    $transaction->setCustomer($customer);
                    $transaction->setAmount($customer->getAutoRefillAmount());
                    $transaction->setDescription('Auto refill');



                    //associate transaction with customer order
                    $customer_order->addTransaction($transaction);

                    //save order to get order_id that is required to create a transaction via epay api
                    $customer_order->save();

                    

                    if ($epay_con->authorize(sfConfig::get('app_epay_merchant_number'), $customer->getSubscriptionId(), $customer_order->getId(), $customer->getAutoRefillAmount(), 208, 1)) 			{
                        $customer->setLastAutoRefill(date('Y-m-d H:i:s'));
                        $customer_order->setOrderStatusId(sfConfig::get('app_status_completed'));
                        $transaction->setTransactionStatusId(sfConfig::get('app_status_completed'));
                    }
                    else {
                        die('unauthorized epay');
                    }



                    $customer->save();
                    $customer_order->save();

                    if ($customer_order->getOrderStatusId() == sfConfig::get('app_status_completed') &&
                            Fonet::recharge($customer, $customer->getAutoRefillAmount()))   			{
                        
						//update cloud 9
						c9Wrapper::equateBalance($customer);
						
						
						//send invoices

                        $message_body = $this->getPartial('customer/order_receipt', array(
                                    'customer' => $customer,
                                    'order' => $customer_order,
                                    'transaction' => $transaction,
                                    'vat' => 0,
                                    'wrap' => false
                                ));

                        $subject = $this->getContext()->getI18N()->__('Payment Confirmation');
                        $sender_email = sfConfig::get('app_email_sender_email', 'support@landncall.com');
                        $sender_name = sfConfig::get('app_email_sender_name', 'zerocall support');

                        $recepient_email = trim($this->customer->getEmail());
                        $recepient_name = sprintf('%s %s', $this->customer->getFirstName(), $this->customer->getLastName());


                        //send to user
                        $email = new EmailQueue();
                        $email->setSubject($subject);
                        $email->setMessage($message_body);
                        $email->setReceipientEmail($recepient_email);
                        $email>setReceipientName($recepient_name);
                        $email->save();
                        
                        //send to support
                        $email2 = new EmailQueue();
                        $email2->setSubject($subject);
                        $email2->setMessage($message_body);
                        $email2->setReceipientEmail($sender_email);
                        $email2->setReceipientName($sender_name);
                        $email2->save();

  			}
                }
            }
        } catch (Exception $exc) {
            echo $exc->getTraceAsString();
        }
        
        return sfView::NONE;
  }
  
public function executeConfirmPayment(sfWebRequest $request)
  {
			$invite_data_file = sfConfig::get('sf_data_dir').'/invite.txt';
            $invite2 = "inside confirmPayment \r\n ";
			file_put_contents($invite_data_file, $invite2, FILE_APPEND);

  	$this->logMessage(print_r($_GET, true));

  	$is_transaction_ok = false;

 	//get the order_id from the session
  	//change the status of that order to complete,
  	//change the customer status to compete too

	$invite2 .= "Transaction ok? {$is_transaction_ok} \r\n ";
	file_put_contents($invite_data_file, $invite2, FILE_APPEND);

  	$order_id = $request->getParameter('orderid');
  	$order_amount = ((double)$request->getParameter('amount'))/100;
  	$subscription_id = $request->getParameter('subscriptionid');

  	$this->logMessage('sub id: '.$subscriptioin_id);

  	$this->forward404Unless($order_id || $order_amount);

	//get order object
  	$order = CustomerOrderPeer::retrieveByPK($order_id);

  	//check to see if that customer has already purchased this product
  	$c = new Criteria();
  	$c->add(CustomerProductPeer::CUSTOMER_ID, $order->getCustomerId());
  	$c->addAnd(CustomerProductPeer::PRODUCT_ID, $order->getProductId());
  	//$c->addJoin(CustomerProductPeer::CUSTOMER_ID, CustomerPeer::ID);
  	//$c->addAnd(CustomerPeer::CUSTOMER_STATUS_ID, sfConfig::get('app_status_new'), Criteria::IS_NOT_EQUAL);

  	if (CustomerProductPeer::doCount($c)!=0)
  	{
  		echo 'Customer is already registered.';

  		//exit the script successfully
  		return sfView::NONE;
  	}

  	//set subscription id
  	$order->getCustomer()->setSubscriptionId($subscription_id);

  	//set auto_refill amount
  	if ($is_auto_refill_activated = $request->getParameter('USER_ATTR_1')=='on')
  	{
  		//auto_refill_amount
  		$auto_refill_amount_choices = array_keys(ProductPeer::getRefillHashChoices());

  		$auto_refill_amount = in_array($request->getParameter('USER_ATTR_2'), $auto_refill_amount_choices)?$request->getParameter('USER_ATTR_2'):$auto_refill_amount_choices[0];
  		$order->getCustomer()->setAutoRefillAmount($auto_refill_amount);


  		//auto_refill_lower_limit
  		$auto_refill_lower_limit_choices = array_keys(ProductPeer::getAutoRefillLowerLimitHashChoices());

  		$auto_refill_min_balance = in_array($request->getParameter('USER_ATTR_3'), $auto_refill_lower_limit_choices)?$request->getParameter('USER_ATTR_3'):$auto_refill_lower_limit_choices[0];
  		$order->getCustomer()->setAutoRefillMinBalance($auto_refill_min_balance);
  	}

  	//if order is already completed > 404
  	$this->forward404Unless($order->getOrderStatusId()!=sfConfig::get('app_status_completed'));

  	$this->forward404Unless($order);

  	$c = new Criteria;
  	$c->add(TransactionPeer::ORDER_ID, $order_id);

  	$transaction = TransactionPeer::doSelectOne($c);

  	if($transaction->getAmount() > $order_amount || $transaction->getAmount() < $order_amount){
  		//error
  		$order->setOrderStatusId(sfConfig::get('app_status_error')); //error in amount
  		$transaction->setTransactionStatusId(sfConfig::get('app_status_error')); //error in amount
  		$order->getCustomer()->setCustomerStatusId(sfConfig::get('app_status_error')); //error in amount

  	}
  	else {
  		//TODO: remove it
  		$transaction->setAmount($order_amount);

	  	$order->setOrderStatusId(sfConfig::get('app_status_completed')); //completed
	  	$order->getCustomer()->setCustomerStatusId(sfConfig::get('app_status_completed')); //completed
	  	$transaction->setTransactionStatusId(sfConfig::get('app_status_completed')); //completed

	  	$is_transaction_ok = true;
  	}


  	$product_price = $order->getProduct()->getPrice() - $order->getExtraRefill();

  	$product_price_vat = .20 * $product_price;

  	$order->setQuantity(1);

  	//set active agent_package in case customer
  	if ($order->getCustomer()->getAgentCompany())
  	{
  		$order->setAgentCommissionPackageId($order->getCustomer()->getAgentCompany()->getAgentCommissionPackageId());
  	}


  	$order->save();
  	$transaction->save();

	$invite2 .= "order & transaction saved \r\n";
	echo "order & transaction saved \r\n";
	file_put_contents($invite_data_file, $invite2, FILE_APPEND);
  	if ($is_transaction_ok)
  	{
		$invite2 .= "Transaction ok? {$is_transaction_ok} \r\n ";
		echo "Transaction ok? {$is_transaction_ok} \r\n ";
		file_put_contents($invite_data_file, $invite2, FILE_APPEND);
	  	//set customer's proudcts in use
	  	$customer_product = new CustomerProduct();

	  	$customer_product->setCustomer($order->getCustomer());
	  	$customer_product->setProduct($order->getProduct());

	  	$customer_product->save();

	  	//register to fonet
	  	$this->customer = $order->getCustomer();

	  	Fonet::registerFonet($this->customer);

	  	//recharge the extra_refill/initial balance of the prouduct
		Fonet::recharge($this->customer, $order->getExtraRefill());


		$invite2 .= "Assigning c9 number \r\n";
		echo  "Assigning c9 number \r\n";
		file_put_contents($invite_data_file, $invite2, FILE_APPEND);

         // Assign C9 number
         if ($order->getProduct()->getId()=='3'){
                
          $c = new Criteria();
  		  $c->add(C9NumbersPeer::IS_ASSIGNED, false);
          $c9number = C9NumbersPeer::doSelectOne($c);

          $this->customer->setC9CustomerNumber($c9number->getC9Number() );

          $c9number->setIsAssigned(true);
          $c9number->save();
          //$customer = $form->save();
		  $this->customer->save();

		  //c9Wrapper::equateBalance($this->customer);
}
			$invite2 .= "Assigning Bonus \r\n";  
			 echo "Assigning Bonus \r\n";  
			file_put_contents($invite_data_file, $invite2, FILE_APPEND);		


                //if the customer is invited, Give the invited customer a bonus of 10dkk
                $invite_c = new Criteria();
                $invite_c->add(InvitePeer::INVITE_NUMBER, $this->customer->getMobileNumber());
                $invite_c->add(InvitePeer::INVITE_STATUS, 2);
                $invite =  InvitePeer::doSelectOne($invite_c);




                $invite->setInviteStatus(3);

                // make a new transaction to show in payment history
                $transaction_i = new Transaction();
                $transaction_i->setAmount(10.00);
                $transaction_i->setDescription("Invitation Bonus for Mobile Number: ".$invite->getInviteNumber());
                $transaction_i->setCustomerId($invite->getCustomerId());
                $transaction_i->setTransactionStatusId(3);

                //send fonet query to update the balance of invitee by 10dkk
                Fonet::recharge(CustomerPeer::retrieveByPK($invite->getCustomerId()), 10);

                //save transaction & Invite
                $transaction_i->save();
                $invite->save();
				$invite2 .= "$transaction & invite saved  \r\n";
				file_put_contents($invite_data_file, $invite2, FILE_APPEND);

	
                //send email

	  	$message_body = $this->getPartial('payments/order_receipt', array(
	  						'customer'=>$this->customer,
	  						'order'=>$order,
	  						'transaction'=>$transaction,
	  						'vat'=>$product_price_vat,
	  						'wrap'=>true
	  					));

	    $subject = $this->getContext()->getI18N()->__('Payment Confirmation');
		$sender_email = sfConfig::get('app_email_sender_email', 'support@zerocall.com');
		$sender_name = sfConfig::get('app_email_sender_name', 'zerocall support');

		$recepient_email = trim($this->customer->getEmail());
		$recepient_name = sprintf('%s %s', $this->customer->getFirstName(), $this->customer->getLastName());


		//send to user
                        $email = new EmailQueue();
                        $email->setSubject($subject);
                        $email->setMessage($message_body);
                        $email->setReceipientEmail($recepient_email);
                        $email>setReceipientName($recepient_name);
                        $email->save();

		//send to support
                        $email2 = new EmailQueue();
                        $email2->setSubject($subject);
                        $email2->setMessage($message_body);
                        $email2->setReceipientEmail($sender_email);
                        $email2>setReceipientName($sender_name);
                        $email2->save();

	    $this->order = $order;

  	}//end if
  	else
  	{
  		$this->logMessage('Error in transaction.');

  	} //end else

  	return sfView::NONE;
  }

  public function executeTest(sfWebRequest $request)
  {

  	if (true && $this->run())
  	{
  		echo 'sadi';
  	}

  	echo sha1('test1');

  	exit;

  	$proxyhost = isset($_POST['proxyhost']) ? $_POST['proxyhost'] : '';
	$proxyport = isset($_POST['proxyport']) ? $_POST['proxyport'] : '';
	$proxyusername = isset($_POST['proxyusername']) ? $_POST['proxyusername'] : '';
	$proxypassword = isset($_POST['proxypassword']) ? $_POST['proxypassword'] : '';

	$epay_con = new EPay();

	$result = $epay_con->authorize(8884184, 66529, 3923, 400, 208, 1);

	if ($result)
		var_dump($result);
	else
		echo "<pre>".$epay_con->getLastError()."</pre>";

  	exit;

  	$field_value = '1280820350';
  	$field_value_2 = '1280820403';

  	$date1 = date("Y:m:d H:i:s", $field_value);
  	$date2 = date("Y:m:d H:i:s", $field_value_2);

  	$date_dur = date("H:i:s", $field_value_2-$field_value);

  	echo '<br />';

  	echo sprintf("%s<br />%s<br />%s", $date1, $date2, $date_dur );

  	return sfView::NONE;
  }

  public function executeProcessCdr(sfWebRequest $request)
  {

   //list any files in data/new folder

 //$cdr_root_dir = 'c:/zerocall_cdr';
 $cdr_root_dir = 'c:/Inetpub/ftproot/zerocall_cdr';

 //TODO: need to fix the new_dir path on server
 $new_dir = $cdr_root_dir.'/backup_staging';
 $error_dir = $cdr_root_dir.'/error';
 $backup_dir = $cdr_root_dir.'/backup';


 $files = scandir($new_dir);
 
$ignore = array('.', '..', 'backup_staging_error','backup_staging', 'backup', 'error');
$files = array_diff($files, $ignore);

if (count($files)==0)
{
        echo 'No file to process in "'.$new_dir.'"';
        exit(1);
}

echo sprintf("There are %d files <br/>", count($files));

print_r($files);


 //get connection
 $con = Propel::getConnection();

        $cdr_rows = array();

 foreach ($files as $file)
 {
  $splits = explode('.', $file);
  $file_extension = end($splits);

  //start transaction;

  if( $file_extension=='csv' )
  {
   try
   {
      $reader = new sfCsvReader($new_dir.'/'.$file);

      $reader->open();


      //begin transaction
      $con->beginTransaction();

    while ($data = $reader->read())
    {
     /*
     0 CdrKey
     1 CustomID
     2 AnswerTimeB
     3 EndTimeB
     4 BillSec
     5 BillingTime
     6 Extension
     7 SourceCty
     8 Ani
     9 DestCty
     10 Rounding
     11 UsedValue
     12 InitialAccount
     13 DST_CustomID
     14 DestinationName
     15 COST_RateMatchPhno
     16 COST_DestinationName
     17 COST_RateValue
     18 COST_RateValueFirst
     19 COST_CcsConnectCharge
     20 COST_UsedValue
     21 BZ2_Rate1Minute
     22 BZ1_RateAddMinute
     */

     $cdr_row = new ZerocallCdr();

     $cdr_row->setCdrkey($data[0]);
     $cdr_row->setCustomid($data[1]);
     $cdr_row->setAnswertimeb($data[2]);
     $cdr_row->setEndtimeb($data[3]);
     $cdr_row->setBillsec($data[4]);
     $cdr_row->setBillingtime($data[5]);
     $cdr_row->setExtension($data[6]);
     $cdr_row->setSourcecty($data[7]);
     $cdr_row->setAni($data[8]);
     $cdr_row->setDestcty($data[9]);
     $cdr_row->setRounding($data[10]);
     $cdr_row->setUsedvalue($data[11]);
     $cdr_row->setInitialaccount($data[12]);
     $cdr_row->setDstCustomid($data[13]);
     $cdr_row->setDestinationname($data[14]);
     $cdr_row->setCostRatematchphno($data[15]);
     $cdr_row->setCostDestinationname($data[16]);
     $cdr_row->setCostRatevalue($data[17]);
     $cdr_row->setCostRatevaluefirst($data[18]);
     $cdr_row->setCostCcsconnectcharge($data[19]);
     $cdr_row->setCostUsedvalue($data[20]);
     $cdr_row->setBz2Rate1minute($data[21]);
     $cdr_row->setBz1Rateaddminute($data[22]);

     //save the row
     try {
     $cdr_row->save($con);
     $cdr_rows[] = $cdr_row;
     }
     catch (Exception $ex) {
         throw $ex->getMessage();
     }



    } // end while

    $reader->close();


    //commit
    $con->commit();



    rename("$new_dir/$file", "$backup_dir/$file");

   }
   catch (Exception $ex)
   {
    //rollback
    $con->rollback();
    
    //move the file to error

    rename("$new_dir/$file", "$error_dir/$file");


   }


  } //end if

 } //end for each

foreach ($cdr_rows as $cdr_row) {

	//try deducting the c9 balance
	$c = new Criteria();
	$c->add(CustomerPeer::FONET_CUSTOMER_ID, $cdr_row->getCustomid());

	$customer = CustomerPeer::doSelectOne($c);

        $ch = new CallHistory();
		c9Wrapper::equateBalance($customer);

        //only change c9 balance if there are fonet and c9 id for a customer
        if ($customer && $customer->getFonetCustomerId() && $customer->getC9CustomerNumber()) {
            $c9_customer_number = $customer->getC9CustomerNumber();

            //convert dkk to ggp
            $conversion_rate = CurrencyConversionPeer::retrieveByPK(1);

            $exchange_rate = $conversion_rate->getDkkBpp();

            $fonet_balance_dkk = Fonet::getBalance($customer);

            $fonet_balance_bpp = $fonet_balance_dkk / $exchange_rate;

            //subtract c9 balance from fonet balance
            //subtract fonet call charge from c9 userbalance
            $c9_balance = floatval(c9Wrapper::getBalance('12345', $customer->getC9CustomerNumber()));
            $c9_new_balance = $fonet_balance_bpp - $c9_balance;


            //c9Wrapper::updateBalance('12345', $customer->getC9CustomerNumber(), $c9_new_balance);
			
        }

}
//end c9 update

 echo 'Each CDR is iterated from ' . $new_dir;


   return sfView::NONE;
}



  public function executeRemoveInactiveUsers(sfWebRequest $request)
  {
  	$c = new Criteria();

  	$c->add(CustomerOrderPeer::CUSTOMER_ID,
  		'customer_id IN (SELECT id FROM customer WHERE TIMESTAMPDIFF(MINUTE, NOW(), created_at) >= -30 AND customer_status_id = 1)'
  	, Criteria::CUSTOM);

  	$this->remove_propel_object_list(CustomerOrderPeer::doSelect($c));

  	//now transaction
  	$c = new Criteria();

  	$c->add(TransactionPeer::CUSTOMER_ID,
  		'customer_id IN (SELECT id FROM customer WHERE TIMESTAMPDIFF(MINUTE, NOW(), created_at) >= -30 AND customer_status_id = 1)'
  	, Criteria::CUSTOM);

  	$this->remove_propel_object_list(TransactionPeer::doSelect($c));

  	//now customer
   	$c = new Criteria();

  	$c->add(CustomerPeer::ID,
  		'id IN (SELECT id FROM customer WHERE TIMESTAMPDIFF(MINUTE, NOW(), created_at) >= -30 AND customer_status_id = 1)'
  	, Criteria::CUSTOM);

  	$this->remove_propel_object_list(CustomerPeer::doSelect($c));

  	$this->renderText('last deleted on '. date(DATE_RFC822));

  	return sfView::NONE;

  }

  public function executeSMS(sfWebRequest $request)
  {


  	$sms = SMS::receive($request);

  	if ($sms)
  	{
  		//take action
  		$valid_keywords = array('ZEROCALLS', 'ZEROCALLR', 'ZEROCALLN');

  		if (in_array($sms->getKeyword(), $valid_keywords))
  		{
  			//get voucher info
  			$c = new Criteria();

  			$c->add(VoucherPeer::PIN_CODE, $sms->getMessage());
  			$c->add(VoucherPeer::USED_ON, null, CRITERIA::ISNULL);

  			$is_voucher_ok = false;
  			$voucher = VoucherPeer::doSelectOne($c);

  			switch (strtolower($sms->getKeyword()))
		  	{
		  		case 'zerocalls': //register + refill
		  			//purchaes a product in 0 rs, and 200 refill

		  			//create customer

		  			//create order for a product

		  			//don't create trnsaction for product order

		  			//create refill order for product
		  			//create transaction for refill order

		  			if ($voucher)
		  			{
		  				$is_voucher_ok = $voucher->getType()=='s';

		  				$is_voucher_ok = $is_voucher_ok &&
		  					 ($voucher->getAmount()==200);
		  			}

		  			if ($is_voucher_ok)
		  			{
		  				//check if customer already exists
		  				if ($this->is_mobile_number_exists($sms->getMobileNumber()))
		  				{
		  					$message = $this->getContext()->getI18N()->__('
		  						You mobile number is already registered with ZerOCall.
		  					');

		  					echo $message;
		  					SMS::send($message, $sms->getMobileNumber());
		  					break;
		  				}
			  			//create a customer
			  			$customer = new Customer();

			  			$customer->setMobileNumber($sms->getMobileNumber());
			  			$customer->setCountryId(83); //denmark;
			  			$customer->setAddress('Street address');
			  			$customer->setCity('City');
			  			$customer->setDeviceId(1);
			  			$customer->setEmail($sms->getMobileNumber().'@zerocall.com');
			  			$customer->setFirstName('First name');
			  			$customer->setLastName('Last name');

			  			$password  = substr(md5($customer->getMobileNumber() .  'jhom$brabar_x'),0,8);
			  			$customer->setPassword($password);

			  			//crete an order of startpackage
			  			$customer_order = new CustomerOrder();
			  			$customer_order->setCustomer($customer);
			  			$customer_order->setProductId(1);
			  			$customer_order->setExtraRefill($voucher->getAmount());
			  			$customer_order->setQuantity(0);
			  			$customer_order->setIsFirstOrder(true);

			  			//set customer_product

			  			$customer_product = new CustomerProduct();

			  			$customer_product->setCustomer($customer);
			  			$customer_product->setProduct($customer_order->getProduct());

			  			//crete a transaction of product price
			  			$transaction = new Transaction();
			  			$transaction->setAmount($voucher->getAmount());
			  			$transaction->setDescription($this->getContext()->getI18N()->__('Product  purchase & refill, via voucher'));
			  			$transaction->setOrderId($customer_order->getId());
			  			$transaction->setCustomer($customer);


			  			$customer->setCustomerStatusId(sfConfig::get('app_status_completed', 3));
			  			$customer_order->setOrderStatusId(sfConfig::get('app_status_completed', 3));
			  			$transaction->setTransactionStatusId(sfConfig::get('app_status_completed', 3));


			  			$customer->save();
			  			$customer_order->save();
			  			$customer_product->save();
			  			$transaction->save();


			  			//save voucher so it can't be reused
			  			$voucher->setUsedOn(date('Y-m-d'));

			  			$voucher->save();

			  			//register with fonet
			  			Fonet::registerFonet($customer);
			  			Fonet::recharge($customer, $transaction->getAmount());


			  			$message = $this->getContext()->getI18N()->__('
			  			You have been registered to ZerOcall.' /* \n
			  			You can use following login information to access your account.\n
			  			Email: '. $customer->getEmail(). '\n' .
			  			'Password: ' . $password */
			  			);

			  			echo $message;
			  			SMS::send($message, $customer->getMobileNumber());


		  			}
		  			else
		  			{
		  				$invalid_pin_sms = SMS::send($this->getContext()->getI18N()->__('Invalid pin code.'), $sms->getMobileNumber());
		  				echo $invalid_pin_sms;
		  				$this->logMessage('invaild pin sms sent to ' . $sms->getMobileNumber());
		  			}

		  			break;
		  		case 'zerocallr': //refill
		  			//check if mobile number exists?

		  			//create an order for sms refill

		  			//create a transaction
		  			if ($voucher)
		  			{
		  				$is_voucher_ok = $voucher->getType()=='r';

		  				$valid_refills = array(100, 200, 500);

		  				$is_voucher_ok = $is_voucher_ok && in_array($voucher->getAmount(), $valid_refills);
		  			}

		  			if ($is_voucher_ok)
		  			{
		  				//check if customer already exists
		  				if (!$this->is_mobile_number_exists($sms->getMobileNumber()))
		  				{
		  					$message = $this->getContext()->getI18N()->__('
		  						Your mobile number is not registered with ZerOCall.
		  					');

		  					echo $message;
		  					SMS::send($message, $sms->getMobileNumber());
		  					break;
		  				}
			  			//get the customer

		  				$c = new Criteria();
		  				$c->add(CustomerPeer::MOBILE_NUMBER, $sms->getMobileNumber());


			  			$customer = CustomerPeer::doSelectOne($c);

			  			//create new customer order
			  			$customer_order = new CustomerOrder();
			  			$customer_order->setCustomer($customer);

			  			//get customer product

			  			$c = new Criteria();
			  			$c->add(CustomerProductPeer::CUSTOMER_ID, $customer->getId());

			  			$customer_product = CustomerProductPeer::doSelectOne($c);

			  			//set customer product
			  			$customer_order->setProduct($customer_product->getProduct());

			  			$customer_order->setExtraRefill($voucher->getAmount());
			  			$customer_order->setQuantity(0);
			  			$customer_order->setIsFirstOrder(false);


			  			//crete a transaction of product price
			  			$transaction = new Transaction();
			  			$transaction->setAmount($voucher->getAmount());
			  			$transaction->setDescription($this->getContext()->getI18N()->__('Zerocall  Refill, via voucher'));
			  			$transaction->setOrderId($customer_order->getId());
			  			$transaction->setCustomer($customer);


			  			$customer_order->setOrderStatusId(sfConfig::get('app_status_completed', 3));
			  			$transaction->setTransactionStatusId(sfConfig::get('app_status_completed', 3));

			  			$customer_order->save();
			  			$transaction->save();

			  			Fonet::recharge($customer, $transaction->getAmount());


			  			//save voucher so it can't be reused
			  			$voucher->setUsedOn(date('Y-m-d H:i:s'));

			  			$voucher->save();

			  			$message = $this->getContext()->getI18N()->__('
			  			You account has been topped up.' /* \n
			  			You can use following login information to access your account.\n
			  			Email: '. $customer->getEmail(). '\n' .
			  			'Password: ' . $password */
			  			);

			  			echo $message;
			  			SMS::send($message, $sms->getMobileNumber());


		  			}
		  			else
		  			{
		  				$invalid_pin_sms = SMS::send($this->getContext()->getI18N()->__('Invalid pin code.'), $sms->getMobileNumber());
		  				echo $invalid_pin_sms;
		  				$this->logMessage('invaild pin sms sent to ' . $sms->getMobileNumber());
		  			}

		  			break;
		  		case 'zerocalln':
		  			//purchases a 100 product, no refill

		  			//check if pin code
		  			// pin code matches
		  			// not used before
		  			//	type is n, amount eq to gt than product price



		  			if ($voucher)
		  			{
		  				$is_voucher_ok = $voucher->getType()=='n';

		  				$is_voucher_ok = $is_voucher_ok &&
		  					 ($voucher->getAmount()>=ProductPeer::retrieveByPK(1)->getPrice());
		  			}

		  			if ($is_voucher_ok)
		  			{
		  				//check if customer already exists
		  				if ($this->is_mobile_number_exists($sms->getMobileNumber()))
		  				{
		  					$message = $this->getContext()->getI18N()->__('
		  						You mobile number is already registered with ZerOCall.
		  					');

		  					echo $message;
		  					SMS::send($message, $sms->getMobileNumber());
		  					break;
		  				}
			  			//create a customer
			  			$customer = new Customer();

			  			$customer->setMobileNumber($sms->getMobileNumber());
			  			$customer->setCountryId(83); //denmark;
			  			$customer->setAddress('Street address');
			  			$customer->setCity('City');
			  			$customer->setDeviceId(1);
			  			$customer->setEmail($sms->getMobileNumber().'@zerocall.com');
			  			$customer->setFirstName('First name');
			  			$customer->setLastName('Last name');

			  			$password  = substr(md5($customer->getMobileNumber() .  'jhom$brabar_x'),0,8);
			  			$customer->setPassword($password);

			  			//crete an order of startpackage
			  			$customer_order = new CustomerOrder();
			  			$customer_order->setCustomer($customer);
			  			$customer_order->setProductId(1);
			  			$customer_order->setExtraRefill(0);
			  			$customer_order->setQuantity(1);
			  			$customer_order->setIsFirstOrder(true);

			  			//set customer_product

			  			$customer_product = new CustomerProduct();

			  			$customer_product->setCustomer($customer);
			  			$customer_product->setProduct($customer_order->getProduct());

			  			//crete a transaction of product price
			  			$transaction = new Transaction();
			  			$transaction->setAmount($customer_order->getProduct()->getPrice()*$customer_order->getQuantity());
			  			$transaction->setDescription($this->getContext()->getI18N()->__('Product  purchase, via voucher'));
			  			$transaction->setOrderId($customer_order->getId());
			  			$transaction->setCustomer($customer);


			  			$customer->setCustomerStatusId(sfConfig::get('app_status_completed', 3));
			  			$customer_order->setOrderStatusId(sfConfig::get('app_status_completed', 3));
			  			$transaction->setTransactionStatusId(sfConfig::get('app_status_completed', 3));


			  			$customer->save();
			  			$customer_order->save();
			  			$customer_product->save();
			  			$transaction->save();


			  			//save voucher so it can't be reused
			  			$voucher->setUsedOn(date('Y-m-d'));

			  			$voucher->save();

			  			//register with fonet
			  			Fonet::registerFonet($customer);

			  			$message = $this->getContext()->getI18N()->__('
			  			You have been registered to ZerOcall.' /* \n
			  			You can use following login information to access your account.\n
			  			Email: '. $customer->getEmail(). '\n' .
			  			'Password: ' . $password */
			  			);

			  			echo $message;
			  			SMS::send($message, $sms->getMobileNumber());


		  			}
		  			else
		  			{
		  				$invalid_pin_sms = SMS::send($this->getContext()->getI18N()->__('Invalid pin code.'), $sms->getMobileNumber());
		  				echo $invalid_pin_sms;
		  				$this->logMessage('invaild pin sms sent to ' . $sms->getMobileNumber());
		  			}

		  			break;
		  	}
  		}

  	}

  	$this->renderText('completed');

  	return sfView::NONE;
  }

  private function is_mobile_number_exists($mobile_number)
  {
  	$c = new Criteria();

  	$c->add(CustomerPeer::MOBILE_NUMBER, $mobile_number);

  	 if (CustomerPeer::doSelectOne($c))
  	 	return true;
  }

  private function remove_propel_object_list($list)
  {
  	foreach($list as $list_item)
  	{
  		$list_item->delete();
  	}
  }

  public function executeSendEmails(sfWebRequest $request)
  {

  require_once(sfConfig::get('sf_lib_dir').'/swift/lib/swift_init.php');


  	$connection = Swift_SmtpTransport::newInstance()
			->setHost(sfConfig::get('app_email_smtp_host'))
			->setPort(sfConfig::get('app_email_smtp_port'))
			->setUsername(sfConfig::get('app_email_smtp_username'))
			->setPassword(sfConfig::get('app_email_smtp_password'));

	$sender_email = sfConfig::get('app_email_sender_email', 'support@zerocall.com');
	$sender_name = sfConfig::get('app_email_sender_name', 'zerocall support');

	$mailer = new Swift_Mailer($connection);

  	$c = new Criteria();

  	$c->add(EmailQueuePeer::EMAIL_STATUS_ID, sfConfig::get('app_status_completed'), Criteria::NOT_EQUAL);

  	foreach(EmailQueuePeer::doSelect($c) as $email)
  	{

		$message = Swift_Message::newInstance($email->getSubject())
		         ->setFrom(array($sender_email => $sender_name))
		         ->setTo(array($email->getReceipientEmail() => $email->getReceipientName()))
		         ->setBody($email->getMessage(), 'text/html')
		         ;



		if (@$mailer->send($message))
		{
			$email->setEmailStatusId(sfConfig::get('app_status_completed'));
			//TODO:: add sent_at too
			$email->save();

			echo sprintf("Send to %s<br />", $email->getReceipientEmail());
		}



  	}
  	return sfView::NONE;
  }


public function executeTest2(sfWebRequest $request){
      echo("test test");
       return sfView::NONE;
  }


  public function executeC9invoke(sfWebRequest $request)
  {

        $this->logMessage(print_r($_POST, true));

    // creating model object
	$c9Data = new cloud9_data();

	//setting data in model
        $c9Data->setRequestType($request->getParameter('request_type'));
        $c9Data->setC9Timestamp($request->getParameter('timestamp'));
        $c9Data->setTransactionID($request->getParameter('transactionid'));
        $c9Data->setCallDate($request->getParameter('call_date'));
        $c9Data->setCdr($request->getParameter('cdr_id'));
        $c9Data->setCid($request->getParameter('carrierid'));
        $c9Data->setMcc($request->getParameter('mcc'));
        $c9Data->setMnc($request->getParameter('mnc'));
        $c9Data->setImsi($request->getParameter('imsi'));
        $c9Data->setMsisdn($request->getParameter('msisdn'));
        $c9Data->setDestination($request->getParameter('destination'));
        $c9Data->setLeg($request->getParameter('leg'));
        $c9Data->setLegDuration($request->getParameter('leg_duration'));
        $c9Data->setResellerCharge($request->getParameter('reseller_charge'));
        $c9Data->setClientCharge($request->getParameter('client_charge'));
        $c9Data->setUserCharge($request->getParameter('user_charge'));
        $c9Data->setIot($request->getParameter('IOT'));
        $c9Data->setUserBalance($request->getParameter('user_balance'));

       


         //saving model object in Database	
        $c9Data->save();

        //sending XML response?
        //echo("calling follow up \n: ");
        //$this->c9_follow_up(&$c9Data);

        $conversion_rate = CurrencyConversionPeer::retrieveByPK(1);

        $exchange_rate = $conversion_rate->getBppDkk();

        $amt_bpp = $c9Data->getUserBalance();

        $amt_dkk = $amt_bpp * $exchange_rate;

//       $log_var .= ("\r\n Original Amount: ");
//        $log_var .= ($amt_bpp);
//
//        $log_var .=("\r\n converted amount: ");
//        $log_var .=($amt_dkk);
//
//            $log_var .=("\r\ncustomer msisdn: ");
//            $log_var .=($c9Data->getMsisdn());

            $c = new Criteria();
            $c->add(CustomerPeer::C9_CUSTOMER_NUMBER, $c9Data->getMsisdn());
            //$c->add(CustomerPeer::C9_CUSTOMER_NUMBER, $c9Data->getMsisdn());
            $customer = CustomerPeer::doSelectOne($c);

            
            //echo(sizeof(CustomerPeer::doSelect($c)));

//            $log_var .=("\r\n Fonet Customer ID: ");
//            if(!isset($customer)){
//                throw new Exception('customer object not found '.$this->getRequest()->getParameter('msisdn'));
//            }
//            $log_var .=($customer->getFonetCustomerID());
//
//            $log_var .=("\r\ncustomer retrieved\r\n ");

            $fonet = new Fonet();
            $balance = $fonet->getBalance($customer, true);
//            $log_var .=("\r\nFonet balance: ");
//            $log_var .=($balance);
//            $log_var .=("\r\n");




        if ($fonet->recharge($customer,number_format($amt_dkk-$balance, 2) , true)){
            

        $this->getResponse()->setContentType("text/xml");
        $this->getResponse()->setContent("<?xml version=\"1.0\"?>
        <CDR_response>
        <cdr_id>".$request->getParameter('cdr_id')."</cdr_id>
        <cdr_status>1</cdr_status>
        </CDR_response> ");
            }
      
        return sfView::NONE;
  }


  public function c9_follow_up(Cloud9Data $c9Data){

         echo("inside follow up \n: ");



        echo("calculcated amount: ");
        echo($amt_dkk);

//
//        $balance = $amt * $exchange_rate->getBppDkk();
//
//        echo($balance);
//
//        //echo($user_balance_dkk);
//
//        $cust = CustomerPeer::retrieveByPK(22);
//
//        $cust->setC9CustomerNumber($balance);
//
//        $cust->save();
//
//        return $cust;


//            echo('hello/');
//            $customer = CustomerPeer::retrieveByPK(1);
//            echo('world/');
//
//            $fonet = new Fonet();
//            $balance = $fonet->getBalance($customer, true);
//            echo('hilo/');
//            echo($balance);
//            echo('verden/');
//
//            $fonet->recharge($customer, -20, true);
//            echo('hilo 2/');
//            $balance = $fonet->getBalance($customer, true);
//            echo('hilo 3/');
//            echo($balance);

//            echo('world');
            //echo($balance->getBalance(&$customer));


  }

public function unregisterFonet(sfWebRequest $request){


$fonetId = $request->getParameter('fonetId');

			$c = new Criteria();
            $c->add(CustomerPeer::FONET_CUSTOMER_ID, $fonetId);
            $customer = CustomerPeer::doSelectOne($c);

			$result = Fonet::unregister($customer, true);

			echo $result;

			return sfView::NONE;

}
 public function executeBalanceAlert(sfWebRequest $request)
  {
      $username= 'zerocall' ;
      $password= 'ok20717786';
      //$c=new Criteria();
      //$fonet=new Fonet();
    //  $customers=CustomerPeer::doSelect($c);
      $balance = $request->getParameter('balance');
      $mobileNo = $request->getParameter('mobile');
      //foreach($customers as $customer)
      //{
      $balance_data_file = sfConfig::get('sf_data_dir').'/balanceTest.txt';
      $baltext = "";
      $baltext .= "Mobile No: {$mobileNo} , Balance: {$balance} \r\n";

      file_put_contents($balance_data_file, $baltext, FILE_APPEND);

          if($mobileNo)
          {
            if($balance < 25 && $balance > 10)
            {
               
               $baltext .= "balance < 25 && balance > 10";
                $data = array(
		      'username' => $username,
                      'password' => $password,
                      'mobile'=>$mobileNo,
                      'message'=>"You balance is below 25 dkk, Please refill your account. Zerocall - Support "
			  );
		$queryString = http_build_query($data,'', '&');
		$this->response_text =  file_get_contents('http://sms.gratisgateway.dk/send.php?'.$queryString);
                echo $this->response_text;
            }
            else  if($balance< 10.00 && $balance>0.00)
            {
              
               $data = array(
		      'username' => $username,
                      'password' => $password,
                      'mobile'=>$mobileNo,
                      'message'=>"You balance is below 10 dkk, Please refill your account. Zerocall - Support"
			  );
		$queryString = http_build_query($data,'', '&');
		$this->response_text =  file_get_contents('http://sms.gratisgateway.dk/send.php?'.$queryString);
                $baltext .= "balance < 10 && balance > 0";
              
            }
            else if($balance<= 0.00)
            {
                
                
                    $data = array(
                      'username' => $username,
                      'password' => $password,
                      'mobile'=>$mobileNo,
                      'message'=>"You balance is 0 dkk, Please refill your account. Zerocall - Support "
			  );
                    $queryString = http_build_query($data,'', '&');
                    $this->response_text =  file_get_contents('http://sms.gratisgateway.dk/send.php?'.$queryString);
                    $baltext .= "balance 0";
                
            }
          }


      $baltext .= $this->response_text;
      file_put_contents($balance_data_file, $baltext, FILE_APPEND);

      
      $data = array(
            'mobile' => $mobileNo,
            'balance' => $balance
            );

      $queryString = http_build_query($data,'', '&');
      $this->redirect('pScripts/balanceAlert?'.$queryString);

      

      return sfView::NONE;

  }

  public function executeBalanceEmail(sfWebRequest $request)
  {
      

      $balance = $request->getParameter('balance');
      $mobileNo = $request->getParameter('mobile');

      $email_data_file = sfConfig::get('sf_data_dir').'/EmailAlert.txt';
      $email_msg = "";
      $email_msg .= "Mobile No: {$mobileNo} , Balance: {$balance} \r\n";
	  file_put_contents($email_data_file, $email_msg, FILE_APPEND);

      //$fonet=new Fonet();
      //
      
      $c=new Criteria();
      $c->add(CustomerPeer::MOBILE_NUMBER,$mobileNo);
      $customers=CustomerPeer::doSelect($c);
      $recepient_name='';
      $recepient_email='';
      foreach($customers as $customer)
      {
        $recepient_name=$customer->getFirstName().' '.$customer->getLastName();
        $recepient_email=$customer->getEmail();
      }

      
      //$recepient_name=
      //foreach($customers as $customer)
      //{
     
     file_put_contents($email_data_file, $email_msg, FILE_APPEND);
     
          if($mobileNo)
          {
            if($balance < 25.00 && $balance > 10.00)
            {
                $email_msg .= "\r\n balance < 25 && balance > 10";
                //echo 'mail sent to you';
               $subject= 'Test Email: Balance Email ' ;
               $message_body= "Test Email:  Your balance is below 25dkk , please refill otherwise your account will be closed. \r\n - Zerocall Support \r\n Company Contact Info";

               //send to user
                        $email = new EmailQueue();
                        $email->setSubject($subject);
                        $email->setMessage($message_body);
                        $email->setReceipientEmail($recepient_email);
                        $email>setReceipientName($recepient_name);
                        $email->save();

	
              // echo $email;
               $email->save();
            }
            else  if($balance< 10.00 && $balance>0.00)
            {

               $email_msg .= "\r\n balance < 10 && balance > 0";
               $subject= 'Test Email: Balance Email ' ;
               $message_body= "Test Email:  Your balance is below 10dkk , please refill otherwise your account will be closed. \r\n - Zerocall Support \r\n Company Contact Info";
               //send to user
                        $email = new EmailQueue();
                        $email->setSubject($subject);
                        $email->setMessage($message_body);
                        $email->setReceipientEmail($recepient_email);
                        $email>setReceipientName($recepient_name);
                        $email->save();

		

            }
            else if($balance<= 0.00)
            {
                $email_msg .= "\r\n balance < 10 && balance > 0";
                $subject= 'Test Email: Balance Email ' ;
                $message_body= "Test Email:  Your balance is 0 dkk, please refill otherwise your account will be closed. \r\n - Zerocall Support \r\n Company Contact Info";
                //send to user
                        $email = new EmailQueue();
                        $email->setSubject($subject);
                        $email->setMessage($message_body);
                        $email->setReceipientEmail($recepient_email);
                        $email>setReceipientName($recepient_name);
                        $email->save();


            }
          }


      $email_msg .= $message_body;
      $email_msg .= "\r\n Email Sent";
      file_put_contents($email_data_file, $email_msg, FILE_APPEND);
      return sfView::NONE;

  }

   public function executeWebSms(sfWebRequest $request)
	{
            require_once(sfConfig::get('sf_lib_dir').'\SendSMS.php');
            require_once(sfConfig::get('sf_lib_dir').'\IncomingFormat.php');
            require_once(sfConfig::get('sf_lib_dir').'\ClientPolled.php');


            //$sms_username = "zapna01";
            //$sms_password = "Zapna2010";

            


            $replies = send_sms_full("923454375829","CBF", "Test SMS: Taisys Test SMS form test.Zerocall.com"); //or die ("Error: " .$errstr. " \n");

            //$replies = send_sms("44123456789,44987654321,44214365870","SMS_Service", "This is a message from me.") or die ("Error: " . $errstr . "\n");

            echo "<br /> Response from Taisys <br />";
            echo $replies;
            echo $errstr;
            echo "<br />";

            file_get_contents("http://sms1.cardboardfish.com:9001/HTTPSMS?S=H&UN=zapna1&P=Zapna2010&DA=923454375829&ST=5&SA=Zerocall&M=Test+SMS%3A+Taisys+Test+SMS+form+test.Zerocall.com");

            return sfView::NONE;
        }

        public function executeTaisys(sfWebrequest $request){

            $taisys = new Taisys();

            $taisys->setServ($request->getParameter('serv'));
            $taisys->setImsi($request->getParameter('imsi'));
            $taisys->setDn($request->getParameter('dest'));
            $taisys->setSmscontent($request->getParameter('content'));
            $taisys->setChecksum($request->getParameter('mac'));
            $taisys->setChecksumVerification(true);

            $taisys->save();

			$data = array(
              'S' => 'H',
              'UN'=>'zapna1',
              'P'=>'Zapna2010',
              'DA'=>$taisys->getDn(),
              'SA' => 'Zerocall',
              'M'=>$taisys->getSmscontent(),
              'ST'=>'5'
	);


		$queryString = http_build_query($data,'', '&');

		$res = file_get_contents('http://sms1.cardboardfish.com:9001/HTTPSMS?'.$queryString);
                $this->res_cbf = 'Response from CBF is: ';
                $this->res_cbf .= $res;

            echo $this->res_cbf;
            return sfView::NONE;


        }

}