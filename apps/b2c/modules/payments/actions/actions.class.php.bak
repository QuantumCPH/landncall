<?php

/**
 * payments actions.
 *
 * @package    zapnacrm
 * @subpackage payments
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php,v 1.4 2010-08-05 20:37:53 orehman Exp $
 */
class paymentsActions extends sfActions
{
 /**
  * Executes index action
  *
  * @param sfRequest $request A request object
  */
  public function executeIndex(sfWebRequest $request)
  {
    $this->forward('default', 'module');
  }
  
  public function executeAccept(sfWebRequest $request)
  {
  	//get the order_id from the session
  	//change the status of that order to complete,
  	//change the customer status to compete too
  	
  	$order_id = $request->getParameter('orderid');
  	$order_amount = ((double)$request->getParameter('amount'))/100;
  	
  	$this->forward404Unless($order_id || $order_amount);
  	

  	$order = CustomerOrderPeer::retrieveByPK($order_id);
  	
  	//if order is already completed > 404
  	$this->forward404Unless($order->getOrderStatusId()!=sfConfig::get('app_status_completed'));
  	
  	$this->forward404Unless($order);
  	
  	$c = new Criteria;
  	$c->add(TransactionPeer::ORDER_ID, $order_id);
  	
  	$transaction = TransactionPeer::doSelectOne($c);
  	
  	//echo var_dump($transaction);
  	
  	$order->setOrderStatusId(sfConfig::get('app_status_completed', 3)); //completed
  	$order->getCustomer()->setCustomerStatusId(sfConfig::get('app_status_completed', 3)); //completed
  	$transaction->setTransactionStatusId(sfConfig::get('app_status_completed', 3)); //completed
  	
  	if($transaction->getAmount() > $order_amount){
  		//error
  		$order->setOrderStatusId(sfConfig::get('app_status_error', 5)); //error in amount
  		$transaction->setTransactionStatusId(sfConfig::get('app_status_error', 5)); //error in amount
  		$order->getCustomer()->setCustomerStatusId(sfConfig::get('app_status_error', 5)); //error in amount
  		
  	} else if ($transaction->getAmount() < $order_amount){
  		//$extra_refill_amount = $order_amount - $order->getProduct()->getPrice(); //extra refill includes vat in this way
  		//$order->setExtraRefill(0); //extra refill disabled
  		$transaction->setAmount($order_amount);
  	} 
  	
  
  	$is_transaction_completed = $transaction->getTransactionStatusId()==sfConfig::get('app_status_completed', 3);
  	
  	// if transactio ok
  	if ($is_transaction_completed)
  	{
  	
	  	//$transaction_vat = .20*$order_amount;
	  	$product_price = $order->getProduct()->getPrice() - $order->getExtraRefill();
	  	
	  	$product_price_vat = .20 * $product_price;
	  	
	  	//$product_price = $product_price_wo_vat - $product_price_vat;
	  	
	  	//$product_price = ($order->getProduct()->getPrice()) - ($order->getProduct()->getPrice()*.20);
	  	
	  	
	  	/*
	  	$quantity = 0;
	  	
	  	
	  	try
	  	{
	  		$quantity = ceil(($order_amount-$transaction_vat)/$product_price); //extra refill not there
	  	}
	  	catch (Exception $e)
	  	{
	  		//
	  	}
		*/
	  	
	  	//set order quantity
	  	$order->setQuantity(1);
	  	
	  	//set active agent_package in case customer
	  	if ($order->getCustomer()->getAgentCompany())
	  	{
	  		$order->setAgentCommissionPackageId($order->getCustomer()->getAgentCompany()->getAgentCommissionPackageId());
	  	}
  	} //end if
  	
  	$order->save();
  	$transaction->save();

  	if ($is_transaction_completed)
  	{
	  	//set customer's proudcts in use
	  	$customer_product = new CustomerProduct();
	  	
	  	$customer_product->setCustomer($order->getCustomer());
	  	$customer_product->setProduct($order->getProduct());
	  	
	  	$customer_product->save();
	  	
	  	//register to fonet
	  	$this->customer = $order->getCustomer();
	  	
	  	CustomerPeer::registerFonet($this->customer);
	  	
	  	//recharge the extra_refill amount
		CustomerPeer::recharge($this->customer, $order->getExtraRefill());
		
	  	//send email
	  
	  	$message_body = $this->getPartial('order_receipt', array(
	  						'customer'=>$this->customer,
	  						'order'=>$order,
	  						'transaction'=>$transaction,
	  						'vat'=>$product_price_vat,
	  						'wrap'=>true
	  					));
	  	
	    $subject = $this->getContext()->getI18N()->__('Payment Confirmation');
		$sender_email = sfConfig::get('app_email_sender_email', 'support@landncall.com');
		$sender_name = sfConfig::get('app_email_sender_name', 'zerocall support');
	
		$recepient_email = trim($this->customer->getEmail());
		$recepient_name = sprintf('%s %s', $this->customer->getFirstName(), $this->customer->getLastName());
		
		/*
	  	require_once(sfConfig::get('sf_lib_dir').'/swift/lib/swift_init.php');
				
		$connection = Swift_SmtpTransport::newInstance()
					->setHost(sfConfig::get('app_email_smtp_host'))
					->setPort(sfConfig::get('app_email_smtp_port'))
					->setUsername(sfConfig::get('app_email_smtp_username'))
					->setPassword(sfConfig::get('app_email_smtp_password'));				
		
		$mailer = new Swift_Mailer($connection);
		*/
		
		//send to user
		$email = new EmailQueue();

		$email->setSubject($subject);
		$email->setReceipientName($recepient_name);
		$email->setReceipientEmail($recepient_email);
		$email->setMessage($message_body);
		
		$email->save();
		
		//send to support
		$email2 = new EmailQueue();

		$email2->setSubject($subject);
		$email2->setReceipientName($sender_name);
		$email2->setReceipientEmail($sender_email);
		$email2->setMessage($message_body);
		
		$email2->save();		
		
		/*
		
		$message_1 = Swift_Message::newInstance($subject)
		         ->setFrom(array($sender_email => $sender_name))
		         ->setTo(array($recepient_email => $recepient_name))
		         ->setBody($message_body, 'text/html')
		         ;
		         
		$message_2 = Swift_Message::newInstance($subject)
		         ->setFrom(array($sender_email => $sender_name))
		         ->setTo(array($sender_email => $sender_name))
		         ->setBody($message_body, 'text/html')
		         ;
		         
		if (!($mailer->send($message_1) && $mailer->send($message_2)))
		    $this->getUser()->setFlash('message', $this->getContext()->getI18N()->__(
		  		"Email confirmation is not sent" ));	
		*/
	
		//end send email

	
	
	  	/*
	    $this->getUser()->setAttribute('customer_id', $order->getCustomerId(), 'usersession');
	    $this->getUser()->getAttributeHolder()->removeNameSpace('usersignup');
	    $this->getUser()->setAuthenticated(true);
	    */
	
	    $this->order = $order;
	  		
	  	//$this->redirect('@signup_complete'.'?customer_id='.$order->getCustomerId());
  	}
  	else
  	{
  		$this->renderText('Error in transaction.');
  		return sfView::NONE;
  	} //end if
  }
  
  public function executeReject(sfWebRequest $request)
  {
  	//get the order_id
    $order_id = $request->getParameter('orderid');
    //$error_text = substr($request->getParameter('errortext'), 0, strpos($request->getParameter('errortext'), '!'));
    $error_text = $this->getContext()->getI18N()->__('Payment is unfortunately not accepted because your information is incorrect, please try again by entering correct credit card information');
  	
	$this->forward404Unless($order_id);

  	$order = CustomerOrderPeer::retrieveByPK($order_id);
  	$c = new Criteria();
  	$c->add(TransactionPeer::ORDER_ID, $order_id);
  	$transaction = TransactionPeer::doSelectOne($c);
  	
  	$this->forward404Unless($order);
  	
  	$order->setOrderStatusId(4); //cancelled
  	
  	$this->getUser()->setFlash('error_message', 
  					$error_text
  					);
  					
  	$this->order = $order;
  	$this->forward404Unless($this->order);
  	
  	$this->order_id = $order->getId();
    $this->amount   = $transaction->getAmount();
    $this->form     = new PaymentForm();
    
    $this->setTemplate('signup');
    
  }
  
  protected function processForm(sfWebRequest $request, sfForm $form)
  {
    $form->bind($request->getParameter($form->getName()), $request->getFiles($form->getName()));
    if ($form->isValid())
    {
    	$product_id = $this->getUser()->getAttribute('product_id', '', 'usersignup');
    	$customer_id = $this->getUser()->getAttribute('customer_id', '', 'usersignup');
    	
    	if($product_id == '' || $customer_id == ''){
    		$this->forward404('Product or customer id not found in session');
    	}
    	
    	$order = new Order();
    	$transaction = new Transaction();
    	$product = ProductPeer::retrieveByPK($product_id);
    	
    	$order->setProductId($product_id);
    	$order->setCustomerId($customer_id);
    	$order->setExtraRefill($form->getValue('extra_refill'));
    	$order->setIsFirstOrder(1);
    	
    	$order->save();
    	
    	$transaction->setAmount($product->getPrice() + $order->getExtraRefill());
    	$transaction->setDescription('Product order');
    	$transaction->setOrderId($order->getId());
    	$transaction->setCustomerId($customer_id);
    	//$transaction->setTransactionStatusId() // default value 1
    	
    	$transaction->save();
    	
    	$this->processTransaction($form->getValues(), $transaction, $request);
      	
      	$this->redirect('@signup_complete');
    }
  }
  

  public function executeSignup(sfWebRequest $request)
  {
    	$this->form = new PaymentForm();
    	

    	$product_id = $request->getParameter('product_id');
    	$customer_id = $request->getParameter('customer_id');
    	
    	if($product_id == '' || $customer_id == ''){
    		$this->forward404('Product id not found in session');
    	}
    	
    	$order = new CustomerOrder();
    	$transaction = new Transaction();
    	
    	$order->setProductId($product_id);
    	$order->setCustomerId($customer_id);
    	$order->setExtraRefill($order->getProduct()->getInitialBalance());
    	
    	//$extra_refil_choices = ProductPeer::getRefillChoices();
    	
    	//TODO: restrict quantity to be 1
    	$order->setQuantity(1);
    	
    	//$order->setExtraRefill($extra_refil_choices[0]);//minumum refill amount
    	$order->setIsFirstOrder(1);
    	
    	$order->save();
    	
    	$transaction->setAmount($order->getProduct()->getPrice() - $order->getProduct()->getInitialBalance() + $order->getExtraRefill());
    	$transaction->setDescription($this->getContext()->getI18N()->__('Registration and first product order'));
    	$transaction->setOrderId($order->getId());
    	$transaction->setCustomerId($customer_id);
    	//$transaction->setTransactionStatusId() // default value 1
    	
    	$transaction->save();
    	
    	$this->order = $order;
    	$this->forward404Unless($this->order);
    	
    	$this->order_id = $order->getId();
    	$this->amount   = $transaction->getAmount();
	
  }

  
  protected function processTransaction($creditcardinfo = null, 
  		Transaction $transactionObj = null,
  		sfWebRequest $request
  		)
  { 	
  	
  	$relay_script_url = 'https://relay.ditonlinebetalingssystem.dk/relay/v2/relay.cgi/';
  	
  	$transactionInfo = array(

  			'cardno'=> $creditcardinfo['cardno'],
			'expmonth'=>$creditcardinfo['expmonth'],
			'expyear'=> $creditcardinfo['expyear'],
			'cvc'=>$creditcardinfo['cvc'],
  	
			'merchantnumber'=>sfConfig::get('app_epay_merchant_number'),
			'currency'=>sfConfig::get('app_epay_currency'),
			'instantCapture'=>sfConfig::get('app_epay_instant_capture'),
			'authemail'=>sfConfig::get('app_epay_authemail'),
		
			'orderid'=>$transactionObj->getOrderId(),
			'amount'=>$transactionObj->getAmount(),
		
			'accepturl'=>$relay_script_url . $this->getController()->genUrl('@epay_accept_url'),
			'declineurl'=>$relay_script_url . $this->getController()->genUrl('@epay_reject_url'),
  	
  	);
  }
  
  public function executeShowReceipt(sfWebRequest $request)
  {
  	//is authenticated
	$this->customer = CustomerPeer::retrieveByPK(
		$this->getUser()->getAttribute('customer_id', null, 'usersession')
		);
		
	$this->redirectUnless($this->customer, '@customer_login');
  	//check to see if transaction id is there
  	
  	$transaction_id = $request->getParameter('tid');
  	
  	$this->forward404Unless($transaction_id);
  	
  	//is this receipt really belongs to authenticated user
  	
  	$transaction = TransactionPeer::retrieveByPK($transaction_id);
  	
  	$this->forward404Unless($transaction->getCustomerId()==$this->customer->getId(), 'Not allowed');
  	
  	//set customer order
  	$customer_order = CustomerOrderPeer::retrieveByPK($transaction->getOrderId());
  	
  	if ($customer_order)
  	{
  		$vat = $customer_order->getIsFirstOrder()?
  				($customer_order->getProduct()->getPrice()*$customer_order->getQuantity() -
  				$customer_order->getProduct()->getInitialBalance()) * .20:
  				0;
  	}
  	else
  		die('Error retreiving');


  	$this->renderPartial('payments/order_receipt', array(
  					'customer'=>$this->customer,
  					'order'=>CustomerOrderPeer::retrieveByPK($transaction->getOrderId()),
  					'transaction'=>$transaction,
  					'vat'=>$vat,
  				));
  				
  	return sfView::NONE;
  	
  	
  }
}
