<?php


/**
 * This class adds structure of 'customer' table to 'propel' DatabaseMap object.
 *
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 01/03/12 10:31:39
 *
 *
 * These statically-built map classes are used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class CustomerMapBuilder implements MapBuilder {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.CustomerMapBuilder';

	/**
	 * The database map.
	 */
	private $dbMap;

	/**
	 * Tells us if this DatabaseMapBuilder is built so that we
	 * don't have to re-build it every time.
	 *
	 * @return     boolean true if this DatabaseMapBuilder is built, false otherwise.
	 */
	public function isBuilt()
	{
		return ($this->dbMap !== null);
	}

	/**
	 * Gets the databasemap this map builder built.
	 *
	 * @return     the databasemap
	 */
	public function getDatabaseMap()
	{
		return $this->dbMap;
	}

	/**
	 * The doBuild() method builds the DatabaseMap
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function doBuild()
	{
		$this->dbMap = Propel::getDatabaseMap(CustomerPeer::DATABASE_NAME);

		$tMap = $this->dbMap->addTable(CustomerPeer::TABLE_NAME);
		$tMap->setPhpName('Customer');
		$tMap->setClassname('Customer');

		$tMap->setUseIdGenerator(true);

		$tMap->addPrimaryKey('ID', 'Id', 'BIGINT', true, 20);

		$tMap->addColumn('FIRST_NAME', 'FirstName', 'VARCHAR', true, 255);

		$tMap->addColumn('LAST_NAME', 'LastName', 'VARCHAR', true, 255);

		$tMap->addForeignKey('COUNTRY_ID', 'CountryId', 'INTEGER', 'country', 'ID', true, 11);

		$tMap->addColumn('CITY', 'City', 'VARCHAR', true, 255);

		$tMap->addColumn('PO_BOX_NUMBER', 'PoBoxNumber', 'VARCHAR', false, 255);

		$tMap->addColumn('MOBILE_NUMBER', 'MobileNumber', 'VARCHAR', true, 255);

		$tMap->addForeignKey('DEVICE_ID', 'DeviceId', 'BIGINT', 'device', 'ID', false, 20);

		$tMap->addColumn('EMAIL', 'Email', 'VARCHAR', true, 255);

		$tMap->addColumn('PASSWORD', 'Password', 'VARCHAR', true, 255);

		$tMap->addColumn('IS_NEWSLETTER_SUBSCRIBER', 'IsNewsletterSubscriber', 'BOOLEAN', false, null);

		$tMap->addColumn('CREATED_AT', 'CreatedAt', 'TIMESTAMP', false, null);

		$tMap->addColumn('UPDATED_AT', 'UpdatedAt', 'TIMESTAMP', false, null);

		$tMap->addColumn('CUSTOMER_STATUS_ID', 'CustomerStatusId', 'INTEGER', true, 11);

		$tMap->addColumn('ADDRESS', 'Address', 'VARCHAR', true, 255);

		$tMap->addColumn('FONET_CUSTOMER_ID', 'FonetCustomerId', 'DOUBLE', false, null);

		$tMap->addForeignKey('REFERRER_ID', 'ReferrerId', 'INTEGER', 'agent_company', 'ID', false, 11);

		$tMap->addForeignKey('TELECOM_OPERATOR_ID', 'TelecomOperatorId', 'INTEGER', 'telecom_operator', 'ID', true, 11);

		$tMap->addColumn('DATE_OF_BIRTH', 'DateOfBirth', 'DATE', false, null);

		$tMap->addColumn('OTHER', 'Other', 'VARCHAR', false, 255);

		$tMap->addColumn('SUBSCRIPTION_TYPE', 'SubscriptionType', 'VARCHAR', false, 255);

		$tMap->addColumn('AUTO_REFILL_AMOUNT', 'AutoRefillAmount', 'DOUBLE', false, null);

		$tMap->addColumn('SUBSCRIPTION_ID', 'SubscriptionId', 'BIGINT', false, 20);

		$tMap->addColumn('LAST_AUTO_REFILL', 'LastAutoRefill', 'TIMESTAMP', false, null);

		$tMap->addColumn('AUTO_REFILL_MIN_BALANCE', 'AutoRefillMinBalance', 'DOUBLE', false, null);

		$tMap->addColumn('C9_CUSTOMER_NUMBER', 'C9CustomerNumber', 'VARCHAR', false, 20);

		$tMap->addColumn('REGISTRATION_TYPE_ID', 'RegistrationTypeId', 'INTEGER', false, 11);

		$tMap->addColumn('IMSI', 'Imsi', 'VARCHAR', false, 255);

		$tMap->addColumn('UNIQUEID', 'Uniqueid', 'INTEGER', false, 11);

		$tMap->addColumn('PLAIN_TEXT', 'PlainText', 'VARCHAR', false, 20);

		$tMap->addColumn('TICKETVAL', 'Ticketval', 'VARCHAR', false, 255);

		$tMap->addColumn('TO_DATE', 'ToDate', 'DATE', false, null);

		$tMap->addColumn('FROM_DATE', 'FromDate', 'DATE', false, null);

	} // doBuild()

} // CustomerMapBuilder
