<?php


/**
 * This class adds structure of 'test' table to 'propel' DatabaseMap object.
 *
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 01/11/12 05:25:26
 *
 *
 * These statically-built map classes are used by Propel to do runtime db structure discovery.
 * For example, the createSelectSql() method checks the type of a given column used in an
 * ORDER BY clause to know whether it needs to apply SQL to make the ORDER BY case-insensitive
 * (i.e. if it's a text column type).
 *
 * @package    lib.model.map
 */
class TestMapBuilder implements MapBuilder {

	/**
	 * The (dot-path) name of this class
	 */
	const CLASS_NAME = 'lib.model.map.TestMapBuilder';

	/**
	 * The database map.
	 */
	private $dbMap;

	/**
	 * Tells us if this DatabaseMapBuilder is built so that we
	 * don't have to re-build it every time.
	 *
	 * @return     boolean true if this DatabaseMapBuilder is built, false otherwise.
	 */
	public function isBuilt()
	{
		return ($this->dbMap !== null);
	}

	/**
	 * Gets the databasemap this map builder built.
	 *
	 * @return     the databasemap
	 */
	public function getDatabaseMap()
	{
		return $this->dbMap;
	}

	/**
	 * The doBuild() method builds the DatabaseMap
	 *
	 * @return     void
	 * @throws     PropelException
	 */
	public function doBuild()
	{
		$this->dbMap = Propel::getDatabaseMap(TestPeer::DATABASE_NAME);

		$tMap = $this->dbMap->addTable(TestPeer::TABLE_NAME);
		$tMap->setPhpName('Test');
		$tMap->setClassname('Test');

		$tMap->setUseIdGenerator(true);

		$tMap->addPrimaryKey('ID', 'Id', 'INTEGER', true, 11);

		$tMap->addColumn('NAME', 'Name', 'VARCHAR', true, 255);

		$tMap->addColumn('CVR_NUMBER', 'CvrNumber', 'INTEGER', true, 11);

		$tMap->addColumn('EAN_NUMBER', 'EanNumber', 'INTEGER', false, 11);

		$tMap->addColumn('ADDRESS', 'Address', 'VARCHAR', true, 255);

		$tMap->addColumn('POST_CODE', 'PostCode', 'INTEGER', true, 11);

		$tMap->addColumn('COUNTRY_ID', 'CountryId', 'INTEGER', false, 11);

		$tMap->addColumn('CITY_ID', 'CityId', 'INTEGER', false, 11);

		$tMap->addColumn('CONTACT_NAME', 'ContactName', 'VARCHAR', true, 150);

		$tMap->addColumn('EMAIL', 'Email', 'VARCHAR', true, 255);

		$tMap->addColumn('HEAD_PHONE_NUMBER', 'HeadPhoneNumber', 'INTEGER', true, 11);

		$tMap->addColumn('FAX_NUMBER', 'FaxNumber', 'INTEGER', true, 11);

		$tMap->addColumn('WEBSITE', 'Website', 'VARCHAR', false, 255);

		$tMap->addColumn('STATUS_ID', 'StatusId', 'INTEGER', false, 11);

		$tMap->addColumn('COMPANY_SIZE_ID', 'CompanySizeId', 'INTEGER', false, 11);

		$tMap->addColumn('COMPANY_TYPE_ID', 'CompanyTypeId', 'INTEGER', false, 11);

		$tMap->addColumn('CUSTOMER_TYPE_ID', 'CustomerTypeId', 'INTEGER', false, 11);

		$tMap->addColumn('CPR_NUMBER', 'CprNumber', 'INTEGER', false, 11);

		$tMap->addColumn('APARTMENT_FORM_ID', 'ApartmentFormId', 'INTEGER', false, 11);

		$tMap->addColumn('INVOICE_METHOD_ID', 'InvoiceMethodId', 'INTEGER', false, 11);

		$tMap->addColumn('ACCOUNT_MANAGER_ID', 'AccountManagerId', 'INTEGER', false, 11);

		$tMap->addColumn('AGENT_COMPANY_ID', 'AgentCompanyId', 'INTEGER', false, 11);

		$tMap->addColumn('CREATED_AT', 'CreatedAt', 'TIMESTAMP', false, null);

		$tMap->addColumn('CONFIRMED_AT', 'ConfirmedAt', 'DATE', false, null);

		$tMap->addColumn('SIM_CARD_DISPATCH_DATE', 'SimCardDispatchDate', 'DATE', false, null);

		$tMap->addColumn('PACKAGE_ID', 'PackageId', 'INTEGER', true, 11);

		$tMap->addColumn('SEND_LETTER', 'SendLetter', 'BOOLEAN', true, null);

		$tMap->addColumn('SEND_EMAIL', 'SendEmail', 'BOOLEAN', true, null);

		$tMap->addColumn('SEND_SPECIFICATION', 'SendSpecification', 'BOOLEAN', true, null);

	} // doBuild()

} // TestMapBuilder
