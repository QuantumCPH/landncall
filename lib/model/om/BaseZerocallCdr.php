<?php

/**
 * Base class that represents a row from the 'zerocall_cdr' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * Tue Dec 20 13:41:58 2011
 *
 * @package    lib.model.om
 */
abstract class BaseZerocallCdr extends BaseObject  implements Persistent {


  const PEER = 'ZerocallCdrPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        ZerocallCdrPeer
	 */
	protected static $peer;

	/**
	 * The value for the cdrkey field.
	 * @var        string
	 */
	protected $cdrkey;

	/**
	 * The value for the customid field.
	 * @var        string
	 */
	protected $customid;

	/**
	 * The value for the answertimeb field.
	 * @var        string
	 */
	protected $answertimeb;

	/**
	 * The value for the endtimeb field.
	 * @var        string
	 */
	protected $endtimeb;

	/**
	 * The value for the billsec field.
	 * @var        string
	 */
	protected $billsec;

	/**
	 * The value for the billingtime field.
	 * @var        string
	 */
	protected $billingtime;

	/**
	 * The value for the extension field.
	 * @var        string
	 */
	protected $extension;

	/**
	 * The value for the sourcecty field.
	 * @var        string
	 */
	protected $sourcecty;

	/**
	 * The value for the ani field.
	 * @var        string
	 */
	protected $ani;

	/**
	 * The value for the destcty field.
	 * @var        string
	 */
	protected $destcty;

	/**
	 * The value for the rounding field.
	 * @var        string
	 */
	protected $rounding;

	/**
	 * The value for the usedvalue field.
	 * @var        string
	 */
	protected $usedvalue;

	/**
	 * The value for the initialaccount field.
	 * @var        string
	 */
	protected $initialaccount;

	/**
	 * The value for the dst_customid field.
	 * @var        string
	 */
	protected $dst_customid;

	/**
	 * The value for the destinationname field.
	 * @var        string
	 */
	protected $destinationname;

	/**
	 * The value for the cost_ratematchphno field.
	 * @var        string
	 */
	protected $cost_ratematchphno;

	/**
	 * The value for the cost_destinationname field.
	 * @var        string
	 */
	protected $cost_destinationname;

	/**
	 * The value for the cost_ratevalue field.
	 * @var        string
	 */
	protected $cost_ratevalue;

	/**
	 * The value for the cost_ratevaluefirst field.
	 * @var        string
	 */
	protected $cost_ratevaluefirst;

	/**
	 * The value for the cost_ccsconnectcharge field.
	 * @var        string
	 */
	protected $cost_ccsconnectcharge;

	/**
	 * The value for the cost_usedvalue field.
	 * @var        string
	 */
	protected $cost_usedvalue;

	/**
	 * The value for the bz2_rate1minute field.
	 * @var        string
	 */
	protected $bz2_rate1minute;

	/**
	 * The value for the bz1_rateaddminute field.
	 * @var        string
	 */
	protected $bz1_rateaddminute;

	/**
	 * The value for the execute_status field.
	 * Note: this column has a database default value of: true
	 * @var        boolean
	 */
	protected $execute_status;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseZerocallCdr object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->execute_status = true;
	}

	/**
	 * Get the [cdrkey] column value.
	 * 
	 * @return     string
	 */
	public function getCdrkey()
	{
		return $this->cdrkey;
	}

	/**
	 * Get the [customid] column value.
	 * 
	 * @return     string
	 */
	public function getCustomid()
	{
		return $this->customid;
	}

	/**
	 * Get the [answertimeb] column value.
	 * 
	 * @return     string
	 */
	public function getAnswertimeb()
	{
		return $this->answertimeb;
	}

	/**
	 * Get the [endtimeb] column value.
	 * 
	 * @return     string
	 */
	public function getEndtimeb()
	{
		return $this->endtimeb;
	}

	/**
	 * Get the [billsec] column value.
	 * 
	 * @return     string
	 */
	public function getBillsec()
	{
		return $this->billsec;
	}

	/**
	 * Get the [billingtime] column value.
	 * 
	 * @return     string
	 */
	public function getBillingtime()
	{
		return $this->billingtime;
	}

	/**
	 * Get the [extension] column value.
	 * 
	 * @return     string
	 */
	public function getExtension()
	{
		return $this->extension;
	}

	/**
	 * Get the [sourcecty] column value.
	 * 
	 * @return     string
	 */
	public function getSourcecty()
	{
		return $this->sourcecty;
	}

	/**
	 * Get the [ani] column value.
	 * 
	 * @return     string
	 */
	public function getAni()
	{
		return $this->ani;
	}

	/**
	 * Get the [destcty] column value.
	 * 
	 * @return     string
	 */
	public function getDestcty()
	{
		return $this->destcty;
	}

	/**
	 * Get the [rounding] column value.
	 * 
	 * @return     string
	 */
	public function getRounding()
	{
		return $this->rounding;
	}

	/**
	 * Get the [usedvalue] column value.
	 * 
	 * @return     string
	 */
	public function getUsedvalue()
	{
		return $this->usedvalue;
	}

	/**
	 * Get the [initialaccount] column value.
	 * 
	 * @return     string
	 */
	public function getInitialaccount()
	{
		return $this->initialaccount;
	}

	/**
	 * Get the [dst_customid] column value.
	 * 
	 * @return     string
	 */
	public function getDstCustomid()
	{
		return $this->dst_customid;
	}

	/**
	 * Get the [destinationname] column value.
	 * 
	 * @return     string
	 */
	public function getDestinationname()
	{
		return $this->destinationname;
	}

	/**
	 * Get the [cost_ratematchphno] column value.
	 * 
	 * @return     string
	 */
	public function getCostRatematchphno()
	{
		return $this->cost_ratematchphno;
	}

	/**
	 * Get the [cost_destinationname] column value.
	 * 
	 * @return     string
	 */
	public function getCostDestinationname()
	{
		return $this->cost_destinationname;
	}

	/**
	 * Get the [cost_ratevalue] column value.
	 * 
	 * @return     string
	 */
	public function getCostRatevalue()
	{
		return $this->cost_ratevalue;
	}

	/**
	 * Get the [cost_ratevaluefirst] column value.
	 * 
	 * @return     string
	 */
	public function getCostRatevaluefirst()
	{
		return $this->cost_ratevaluefirst;
	}

	/**
	 * Get the [cost_ccsconnectcharge] column value.
	 * 
	 * @return     string
	 */
	public function getCostCcsconnectcharge()
	{
		return $this->cost_ccsconnectcharge;
	}

	/**
	 * Get the [cost_usedvalue] column value.
	 * 
	 * @return     string
	 */
	public function getCostUsedvalue()
	{
		return $this->cost_usedvalue;
	}

	/**
	 * Get the [bz2_rate1minute] column value.
	 * 
	 * @return     string
	 */
	public function getBz2Rate1minute()
	{
		return $this->bz2_rate1minute;
	}

	/**
	 * Get the [bz1_rateaddminute] column value.
	 * 
	 * @return     string
	 */
	public function getBz1Rateaddminute()
	{
		return $this->bz1_rateaddminute;
	}

	/**
	 * Get the [execute_status] column value.
	 * 
	 * @return     boolean
	 */
	public function getExecuteStatus()
	{
		return $this->execute_status;
	}

	/**
	 * Set the value of [cdrkey] column.
	 * 
	 * @param      string $v new value
	 * @return     ZerocallCdr The current object (for fluent API support)
	 */
	public function setCdrkey($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cdrkey !== $v) {
			$this->cdrkey = $v;
			$this->modifiedColumns[] = ZerocallCdrPeer::CDRKEY;
		}

		return $this;
	} // setCdrkey()

	/**
	 * Set the value of [customid] column.
	 * 
	 * @param      string $v new value
	 * @return     ZerocallCdr The current object (for fluent API support)
	 */
	public function setCustomid($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->customid !== $v) {
			$this->customid = $v;
			$this->modifiedColumns[] = ZerocallCdrPeer::CUSTOMID;
		}

		return $this;
	} // setCustomid()

	/**
	 * Set the value of [answertimeb] column.
	 * 
	 * @param      string $v new value
	 * @return     ZerocallCdr The current object (for fluent API support)
	 */
	public function setAnswertimeb($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->answertimeb !== $v) {
			$this->answertimeb = $v;
			$this->modifiedColumns[] = ZerocallCdrPeer::ANSWERTIMEB;
		}

		return $this;
	} // setAnswertimeb()

	/**
	 * Set the value of [endtimeb] column.
	 * 
	 * @param      string $v new value
	 * @return     ZerocallCdr The current object (for fluent API support)
	 */
	public function setEndtimeb($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->endtimeb !== $v) {
			$this->endtimeb = $v;
			$this->modifiedColumns[] = ZerocallCdrPeer::ENDTIMEB;
		}

		return $this;
	} // setEndtimeb()

	/**
	 * Set the value of [billsec] column.
	 * 
	 * @param      string $v new value
	 * @return     ZerocallCdr The current object (for fluent API support)
	 */
	public function setBillsec($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->billsec !== $v) {
			$this->billsec = $v;
			$this->modifiedColumns[] = ZerocallCdrPeer::BILLSEC;
		}

		return $this;
	} // setBillsec()

	/**
	 * Set the value of [billingtime] column.
	 * 
	 * @param      string $v new value
	 * @return     ZerocallCdr The current object (for fluent API support)
	 */
	public function setBillingtime($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->billingtime !== $v) {
			$this->billingtime = $v;
			$this->modifiedColumns[] = ZerocallCdrPeer::BILLINGTIME;
		}

		return $this;
	} // setBillingtime()

	/**
	 * Set the value of [extension] column.
	 * 
	 * @param      string $v new value
	 * @return     ZerocallCdr The current object (for fluent API support)
	 */
	public function setExtension($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->extension !== $v) {
			$this->extension = $v;
			$this->modifiedColumns[] = ZerocallCdrPeer::EXTENSION;
		}

		return $this;
	} // setExtension()

	/**
	 * Set the value of [sourcecty] column.
	 * 
	 * @param      string $v new value
	 * @return     ZerocallCdr The current object (for fluent API support)
	 */
	public function setSourcecty($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sourcecty !== $v) {
			$this->sourcecty = $v;
			$this->modifiedColumns[] = ZerocallCdrPeer::SOURCECTY;
		}

		return $this;
	} // setSourcecty()

	/**
	 * Set the value of [ani] column.
	 * 
	 * @param      string $v new value
	 * @return     ZerocallCdr The current object (for fluent API support)
	 */
	public function setAni($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ani !== $v) {
			$this->ani = $v;
			$this->modifiedColumns[] = ZerocallCdrPeer::ANI;
		}

		return $this;
	} // setAni()

	/**
	 * Set the value of [destcty] column.
	 * 
	 * @param      string $v new value
	 * @return     ZerocallCdr The current object (for fluent API support)
	 */
	public function setDestcty($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->destcty !== $v) {
			$this->destcty = $v;
			$this->modifiedColumns[] = ZerocallCdrPeer::DESTCTY;
		}

		return $this;
	} // setDestcty()

	/**
	 * Set the value of [rounding] column.
	 * 
	 * @param      string $v new value
	 * @return     ZerocallCdr The current object (for fluent API support)
	 */
	public function setRounding($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->rounding !== $v) {
			$this->rounding = $v;
			$this->modifiedColumns[] = ZerocallCdrPeer::ROUNDING;
		}

		return $this;
	} // setRounding()

	/**
	 * Set the value of [usedvalue] column.
	 * 
	 * @param      string $v new value
	 * @return     ZerocallCdr The current object (for fluent API support)
	 */
	public function setUsedvalue($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->usedvalue !== $v) {
			$this->usedvalue = $v;
			$this->modifiedColumns[] = ZerocallCdrPeer::USEDVALUE;
		}

		return $this;
	} // setUsedvalue()

	/**
	 * Set the value of [initialaccount] column.
	 * 
	 * @param      string $v new value
	 * @return     ZerocallCdr The current object (for fluent API support)
	 */
	public function setInitialaccount($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->initialaccount !== $v) {
			$this->initialaccount = $v;
			$this->modifiedColumns[] = ZerocallCdrPeer::INITIALACCOUNT;
		}

		return $this;
	} // setInitialaccount()

	/**
	 * Set the value of [dst_customid] column.
	 * 
	 * @param      string $v new value
	 * @return     ZerocallCdr The current object (for fluent API support)
	 */
	public function setDstCustomid($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->dst_customid !== $v) {
			$this->dst_customid = $v;
			$this->modifiedColumns[] = ZerocallCdrPeer::DST_CUSTOMID;
		}

		return $this;
	} // setDstCustomid()

	/**
	 * Set the value of [destinationname] column.
	 * 
	 * @param      string $v new value
	 * @return     ZerocallCdr The current object (for fluent API support)
	 */
	public function setDestinationname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->destinationname !== $v) {
			$this->destinationname = $v;
			$this->modifiedColumns[] = ZerocallCdrPeer::DESTINATIONNAME;
		}

		return $this;
	} // setDestinationname()

	/**
	 * Set the value of [cost_ratematchphno] column.
	 * 
	 * @param      string $v new value
	 * @return     ZerocallCdr The current object (for fluent API support)
	 */
	public function setCostRatematchphno($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cost_ratematchphno !== $v) {
			$this->cost_ratematchphno = $v;
			$this->modifiedColumns[] = ZerocallCdrPeer::COST_RATEMATCHPHNO;
		}

		return $this;
	} // setCostRatematchphno()

	/**
	 * Set the value of [cost_destinationname] column.
	 * 
	 * @param      string $v new value
	 * @return     ZerocallCdr The current object (for fluent API support)
	 */
	public function setCostDestinationname($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cost_destinationname !== $v) {
			$this->cost_destinationname = $v;
			$this->modifiedColumns[] = ZerocallCdrPeer::COST_DESTINATIONNAME;
		}

		return $this;
	} // setCostDestinationname()

	/**
	 * Set the value of [cost_ratevalue] column.
	 * 
	 * @param      string $v new value
	 * @return     ZerocallCdr The current object (for fluent API support)
	 */
	public function setCostRatevalue($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cost_ratevalue !== $v) {
			$this->cost_ratevalue = $v;
			$this->modifiedColumns[] = ZerocallCdrPeer::COST_RATEVALUE;
		}

		return $this;
	} // setCostRatevalue()

	/**
	 * Set the value of [cost_ratevaluefirst] column.
	 * 
	 * @param      string $v new value
	 * @return     ZerocallCdr The current object (for fluent API support)
	 */
	public function setCostRatevaluefirst($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cost_ratevaluefirst !== $v) {
			$this->cost_ratevaluefirst = $v;
			$this->modifiedColumns[] = ZerocallCdrPeer::COST_RATEVALUEFIRST;
		}

		return $this;
	} // setCostRatevaluefirst()

	/**
	 * Set the value of [cost_ccsconnectcharge] column.
	 * 
	 * @param      string $v new value
	 * @return     ZerocallCdr The current object (for fluent API support)
	 */
	public function setCostCcsconnectcharge($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cost_ccsconnectcharge !== $v) {
			$this->cost_ccsconnectcharge = $v;
			$this->modifiedColumns[] = ZerocallCdrPeer::COST_CCSCONNECTCHARGE;
		}

		return $this;
	} // setCostCcsconnectcharge()

	/**
	 * Set the value of [cost_usedvalue] column.
	 * 
	 * @param      string $v new value
	 * @return     ZerocallCdr The current object (for fluent API support)
	 */
	public function setCostUsedvalue($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->cost_usedvalue !== $v) {
			$this->cost_usedvalue = $v;
			$this->modifiedColumns[] = ZerocallCdrPeer::COST_USEDVALUE;
		}

		return $this;
	} // setCostUsedvalue()

	/**
	 * Set the value of [bz2_rate1minute] column.
	 * 
	 * @param      string $v new value
	 * @return     ZerocallCdr The current object (for fluent API support)
	 */
	public function setBz2Rate1minute($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->bz2_rate1minute !== $v) {
			$this->bz2_rate1minute = $v;
			$this->modifiedColumns[] = ZerocallCdrPeer::BZ2_RATE1MINUTE;
		}

		return $this;
	} // setBz2Rate1minute()

	/**
	 * Set the value of [bz1_rateaddminute] column.
	 * 
	 * @param      string $v new value
	 * @return     ZerocallCdr The current object (for fluent API support)
	 */
	public function setBz1Rateaddminute($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->bz1_rateaddminute !== $v) {
			$this->bz1_rateaddminute = $v;
			$this->modifiedColumns[] = ZerocallCdrPeer::BZ1_RATEADDMINUTE;
		}

		return $this;
	} // setBz1Rateaddminute()

	/**
	 * Set the value of [execute_status] column.
	 * 
	 * @param      boolean $v new value
	 * @return     ZerocallCdr The current object (for fluent API support)
	 */
	public function setExecuteStatus($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->execute_status !== $v || $v === true) {
			$this->execute_status = $v;
			$this->modifiedColumns[] = ZerocallCdrPeer::EXECUTE_STATUS;
		}

		return $this;
	} // setExecuteStatus()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(ZerocallCdrPeer::EXECUTE_STATUS))) {
				return false;
			}

			if ($this->execute_status !== true) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->cdrkey = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->customid = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->answertimeb = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->endtimeb = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->billsec = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->billingtime = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->extension = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->sourcecty = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->ani = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->destcty = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->rounding = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->usedvalue = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->initialaccount = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->dst_customid = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->destinationname = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->cost_ratematchphno = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->cost_destinationname = ($row[$startcol + 16] !== null) ? (string) $row[$startcol + 16] : null;
			$this->cost_ratevalue = ($row[$startcol + 17] !== null) ? (string) $row[$startcol + 17] : null;
			$this->cost_ratevaluefirst = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->cost_ccsconnectcharge = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->cost_usedvalue = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->bz2_rate1minute = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->bz1_rateaddminute = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->execute_status = ($row[$startcol + 23] !== null) ? (boolean) $row[$startcol + 23] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 24; // 24 = ZerocallCdrPeer::NUM_COLUMNS - ZerocallCdrPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating ZerocallCdr object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ZerocallCdrPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = ZerocallCdrPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseZerocallCdr:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ZerocallCdrPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			ZerocallCdrPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseZerocallCdr:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseZerocallCdr:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(ZerocallCdrPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseZerocallCdr:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			ZerocallCdrPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;


			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = ZerocallCdrPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setNew(false);
				} else {
					$affectedRows += ZerocallCdrPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = ZerocallCdrPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ZerocallCdrPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getCdrkey();
				break;
			case 1:
				return $this->getCustomid();
				break;
			case 2:
				return $this->getAnswertimeb();
				break;
			case 3:
				return $this->getEndtimeb();
				break;
			case 4:
				return $this->getBillsec();
				break;
			case 5:
				return $this->getBillingtime();
				break;
			case 6:
				return $this->getExtension();
				break;
			case 7:
				return $this->getSourcecty();
				break;
			case 8:
				return $this->getAni();
				break;
			case 9:
				return $this->getDestcty();
				break;
			case 10:
				return $this->getRounding();
				break;
			case 11:
				return $this->getUsedvalue();
				break;
			case 12:
				return $this->getInitialaccount();
				break;
			case 13:
				return $this->getDstCustomid();
				break;
			case 14:
				return $this->getDestinationname();
				break;
			case 15:
				return $this->getCostRatematchphno();
				break;
			case 16:
				return $this->getCostDestinationname();
				break;
			case 17:
				return $this->getCostRatevalue();
				break;
			case 18:
				return $this->getCostRatevaluefirst();
				break;
			case 19:
				return $this->getCostCcsconnectcharge();
				break;
			case 20:
				return $this->getCostUsedvalue();
				break;
			case 21:
				return $this->getBz2Rate1minute();
				break;
			case 22:
				return $this->getBz1Rateaddminute();
				break;
			case 23:
				return $this->getExecuteStatus();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = ZerocallCdrPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getCdrkey(),
			$keys[1] => $this->getCustomid(),
			$keys[2] => $this->getAnswertimeb(),
			$keys[3] => $this->getEndtimeb(),
			$keys[4] => $this->getBillsec(),
			$keys[5] => $this->getBillingtime(),
			$keys[6] => $this->getExtension(),
			$keys[7] => $this->getSourcecty(),
			$keys[8] => $this->getAni(),
			$keys[9] => $this->getDestcty(),
			$keys[10] => $this->getRounding(),
			$keys[11] => $this->getUsedvalue(),
			$keys[12] => $this->getInitialaccount(),
			$keys[13] => $this->getDstCustomid(),
			$keys[14] => $this->getDestinationname(),
			$keys[15] => $this->getCostRatematchphno(),
			$keys[16] => $this->getCostDestinationname(),
			$keys[17] => $this->getCostRatevalue(),
			$keys[18] => $this->getCostRatevaluefirst(),
			$keys[19] => $this->getCostCcsconnectcharge(),
			$keys[20] => $this->getCostUsedvalue(),
			$keys[21] => $this->getBz2Rate1minute(),
			$keys[22] => $this->getBz1Rateaddminute(),
			$keys[23] => $this->getExecuteStatus(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = ZerocallCdrPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setCdrkey($value);
				break;
			case 1:
				$this->setCustomid($value);
				break;
			case 2:
				$this->setAnswertimeb($value);
				break;
			case 3:
				$this->setEndtimeb($value);
				break;
			case 4:
				$this->setBillsec($value);
				break;
			case 5:
				$this->setBillingtime($value);
				break;
			case 6:
				$this->setExtension($value);
				break;
			case 7:
				$this->setSourcecty($value);
				break;
			case 8:
				$this->setAni($value);
				break;
			case 9:
				$this->setDestcty($value);
				break;
			case 10:
				$this->setRounding($value);
				break;
			case 11:
				$this->setUsedvalue($value);
				break;
			case 12:
				$this->setInitialaccount($value);
				break;
			case 13:
				$this->setDstCustomid($value);
				break;
			case 14:
				$this->setDestinationname($value);
				break;
			case 15:
				$this->setCostRatematchphno($value);
				break;
			case 16:
				$this->setCostDestinationname($value);
				break;
			case 17:
				$this->setCostRatevalue($value);
				break;
			case 18:
				$this->setCostRatevaluefirst($value);
				break;
			case 19:
				$this->setCostCcsconnectcharge($value);
				break;
			case 20:
				$this->setCostUsedvalue($value);
				break;
			case 21:
				$this->setBz2Rate1minute($value);
				break;
			case 22:
				$this->setBz1Rateaddminute($value);
				break;
			case 23:
				$this->setExecuteStatus($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = ZerocallCdrPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setCdrkey($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setCustomid($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setAnswertimeb($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setEndtimeb($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setBillsec($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setBillingtime($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setExtension($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setSourcecty($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setAni($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setDestcty($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setRounding($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setUsedvalue($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setInitialaccount($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setDstCustomid($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setDestinationname($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setCostRatematchphno($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setCostDestinationname($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setCostRatevalue($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setCostRatevaluefirst($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setCostCcsconnectcharge($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setCostUsedvalue($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setBz2Rate1minute($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setBz1Rateaddminute($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setExecuteStatus($arr[$keys[23]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(ZerocallCdrPeer::DATABASE_NAME);

		if ($this->isColumnModified(ZerocallCdrPeer::CDRKEY)) $criteria->add(ZerocallCdrPeer::CDRKEY, $this->cdrkey);
		if ($this->isColumnModified(ZerocallCdrPeer::CUSTOMID)) $criteria->add(ZerocallCdrPeer::CUSTOMID, $this->customid);
		if ($this->isColumnModified(ZerocallCdrPeer::ANSWERTIMEB)) $criteria->add(ZerocallCdrPeer::ANSWERTIMEB, $this->answertimeb);
		if ($this->isColumnModified(ZerocallCdrPeer::ENDTIMEB)) $criteria->add(ZerocallCdrPeer::ENDTIMEB, $this->endtimeb);
		if ($this->isColumnModified(ZerocallCdrPeer::BILLSEC)) $criteria->add(ZerocallCdrPeer::BILLSEC, $this->billsec);
		if ($this->isColumnModified(ZerocallCdrPeer::BILLINGTIME)) $criteria->add(ZerocallCdrPeer::BILLINGTIME, $this->billingtime);
		if ($this->isColumnModified(ZerocallCdrPeer::EXTENSION)) $criteria->add(ZerocallCdrPeer::EXTENSION, $this->extension);
		if ($this->isColumnModified(ZerocallCdrPeer::SOURCECTY)) $criteria->add(ZerocallCdrPeer::SOURCECTY, $this->sourcecty);
		if ($this->isColumnModified(ZerocallCdrPeer::ANI)) $criteria->add(ZerocallCdrPeer::ANI, $this->ani);
		if ($this->isColumnModified(ZerocallCdrPeer::DESTCTY)) $criteria->add(ZerocallCdrPeer::DESTCTY, $this->destcty);
		if ($this->isColumnModified(ZerocallCdrPeer::ROUNDING)) $criteria->add(ZerocallCdrPeer::ROUNDING, $this->rounding);
		if ($this->isColumnModified(ZerocallCdrPeer::USEDVALUE)) $criteria->add(ZerocallCdrPeer::USEDVALUE, $this->usedvalue);
		if ($this->isColumnModified(ZerocallCdrPeer::INITIALACCOUNT)) $criteria->add(ZerocallCdrPeer::INITIALACCOUNT, $this->initialaccount);
		if ($this->isColumnModified(ZerocallCdrPeer::DST_CUSTOMID)) $criteria->add(ZerocallCdrPeer::DST_CUSTOMID, $this->dst_customid);
		if ($this->isColumnModified(ZerocallCdrPeer::DESTINATIONNAME)) $criteria->add(ZerocallCdrPeer::DESTINATIONNAME, $this->destinationname);
		if ($this->isColumnModified(ZerocallCdrPeer::COST_RATEMATCHPHNO)) $criteria->add(ZerocallCdrPeer::COST_RATEMATCHPHNO, $this->cost_ratematchphno);
		if ($this->isColumnModified(ZerocallCdrPeer::COST_DESTINATIONNAME)) $criteria->add(ZerocallCdrPeer::COST_DESTINATIONNAME, $this->cost_destinationname);
		if ($this->isColumnModified(ZerocallCdrPeer::COST_RATEVALUE)) $criteria->add(ZerocallCdrPeer::COST_RATEVALUE, $this->cost_ratevalue);
		if ($this->isColumnModified(ZerocallCdrPeer::COST_RATEVALUEFIRST)) $criteria->add(ZerocallCdrPeer::COST_RATEVALUEFIRST, $this->cost_ratevaluefirst);
		if ($this->isColumnModified(ZerocallCdrPeer::COST_CCSCONNECTCHARGE)) $criteria->add(ZerocallCdrPeer::COST_CCSCONNECTCHARGE, $this->cost_ccsconnectcharge);
		if ($this->isColumnModified(ZerocallCdrPeer::COST_USEDVALUE)) $criteria->add(ZerocallCdrPeer::COST_USEDVALUE, $this->cost_usedvalue);
		if ($this->isColumnModified(ZerocallCdrPeer::BZ2_RATE1MINUTE)) $criteria->add(ZerocallCdrPeer::BZ2_RATE1MINUTE, $this->bz2_rate1minute);
		if ($this->isColumnModified(ZerocallCdrPeer::BZ1_RATEADDMINUTE)) $criteria->add(ZerocallCdrPeer::BZ1_RATEADDMINUTE, $this->bz1_rateaddminute);
		if ($this->isColumnModified(ZerocallCdrPeer::EXECUTE_STATUS)) $criteria->add(ZerocallCdrPeer::EXECUTE_STATUS, $this->execute_status);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(ZerocallCdrPeer::DATABASE_NAME);

		$criteria->add(ZerocallCdrPeer::CDRKEY, $this->cdrkey);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     string
	 */
	public function getPrimaryKey()
	{
		return $this->getCdrkey();
	}

	/**
	 * Generic method to set the primary key (cdrkey column).
	 *
	 * @param      string $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setCdrkey($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of ZerocallCdr (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCdrkey($this->cdrkey);

		$copyObj->setCustomid($this->customid);

		$copyObj->setAnswertimeb($this->answertimeb);

		$copyObj->setEndtimeb($this->endtimeb);

		$copyObj->setBillsec($this->billsec);

		$copyObj->setBillingtime($this->billingtime);

		$copyObj->setExtension($this->extension);

		$copyObj->setSourcecty($this->sourcecty);

		$copyObj->setAni($this->ani);

		$copyObj->setDestcty($this->destcty);

		$copyObj->setRounding($this->rounding);

		$copyObj->setUsedvalue($this->usedvalue);

		$copyObj->setInitialaccount($this->initialaccount);

		$copyObj->setDstCustomid($this->dst_customid);

		$copyObj->setDestinationname($this->destinationname);

		$copyObj->setCostRatematchphno($this->cost_ratematchphno);

		$copyObj->setCostDestinationname($this->cost_destinationname);

		$copyObj->setCostRatevalue($this->cost_ratevalue);

		$copyObj->setCostRatevaluefirst($this->cost_ratevaluefirst);

		$copyObj->setCostCcsconnectcharge($this->cost_ccsconnectcharge);

		$copyObj->setCostUsedvalue($this->cost_usedvalue);

		$copyObj->setBz2Rate1minute($this->bz2_rate1minute);

		$copyObj->setBz1Rateaddminute($this->bz1_rateaddminute);

		$copyObj->setExecuteStatus($this->execute_status);


		$copyObj->setNew(true);

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     ZerocallCdr Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     ZerocallCdrPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new ZerocallCdrPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseZerocallCdr:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseZerocallCdr::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseZerocallCdr
