<?php

/**
 * Base class that represents a row from the 'status' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 01/11/12 05:25:25
 *
 * @package    lib.model.om
 */
abstract class BaseStatus extends BaseObject  implements Persistent {


  const PEER = 'StatusPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        StatusPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the name field.
	 * @var        string
	 */
	protected $name;

	/**
	 * @var        array AgentCompany[] Collection to store aggregation of AgentCompany objects.
	 */
	protected $collAgentCompanys;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAgentCompanys.
	 */
	private $lastAgentCompanyCriteria = null;

	/**
	 * @var        array AgentUser[] Collection to store aggregation of AgentUser objects.
	 */
	protected $collAgentUsers;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAgentUsers.
	 */
	private $lastAgentUserCriteria = null;

	/**
	 * @var        array Company[] Collection to store aggregation of Company objects.
	 */
	protected $collCompanys;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCompanys.
	 */
	private $lastCompanyCriteria = null;

	/**
	 * @var        array EmailQueue[] Collection to store aggregation of EmailQueue objects.
	 */
	protected $collEmailQueues;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEmailQueues.
	 */
	private $lastEmailQueueCriteria = null;

	/**
	 * @var        array EnableCountry[] Collection to store aggregation of EnableCountry objects.
	 */
	protected $collEnableCountrys;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEnableCountrys.
	 */
	private $lastEnableCountryCriteria = null;

	/**
	 * @var        array Faqs[] Collection to store aggregation of Faqs objects.
	 */
	protected $collFaqss;

	/**
	 * @var        Criteria The criteria used to select the current contents of collFaqss.
	 */
	private $lastFaqsCriteria = null;

	/**
	 * @var        array TelecomOperator[] Collection to store aggregation of TelecomOperator objects.
	 */
	protected $collTelecomOperators;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTelecomOperators.
	 */
	private $lastTelecomOperatorCriteria = null;

	/**
	 * @var        array UsageAlert[] Collection to store aggregation of UsageAlert objects.
	 */
	protected $collUsageAlerts;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUsageAlerts.
	 */
	private $lastUsageAlertCriteria = null;

	/**
	 * @var        array UsageAlertSender[] Collection to store aggregation of UsageAlertSender objects.
	 */
	protected $collUsageAlertSenders;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUsageAlertSenders.
	 */
	private $lastUsageAlertSenderCriteria = null;

	/**
	 * @var        array Userguide[] Collection to store aggregation of Userguide objects.
	 */
	protected $collUserguides;

	/**
	 * @var        Criteria The criteria used to select the current contents of collUserguides.
	 */
	private $lastUserguideCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseStatus object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [name] column value.
	 * 
	 * @return     string
	 */
	public function getName()
	{
		return $this->name;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Status The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = StatusPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [name] column.
	 * 
	 * @param      string $v new value
	 * @return     Status The current object (for fluent API support)
	 */
	public function setName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->name !== $v) {
			$this->name = $v;
			$this->modifiedColumns[] = StatusPeer::NAME;
		}

		return $this;
	} // setName()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->name = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 2; // 2 = StatusPeer::NUM_COLUMNS - StatusPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Status object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(StatusPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = StatusPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->collAgentCompanys = null;
			$this->lastAgentCompanyCriteria = null;

			$this->collAgentUsers = null;
			$this->lastAgentUserCriteria = null;

			$this->collCompanys = null;
			$this->lastCompanyCriteria = null;

			$this->collEmailQueues = null;
			$this->lastEmailQueueCriteria = null;

			$this->collEnableCountrys = null;
			$this->lastEnableCountryCriteria = null;

			$this->collFaqss = null;
			$this->lastFaqsCriteria = null;

			$this->collTelecomOperators = null;
			$this->lastTelecomOperatorCriteria = null;

			$this->collUsageAlerts = null;
			$this->lastUsageAlertCriteria = null;

			$this->collUsageAlertSenders = null;
			$this->lastUsageAlertSenderCriteria = null;

			$this->collUserguides = null;
			$this->lastUserguideCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseStatus:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(StatusPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			StatusPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseStatus:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseStatus:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(StatusPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseStatus:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			StatusPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = StatusPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = StatusPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += StatusPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collAgentCompanys !== null) {
				foreach ($this->collAgentCompanys as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAgentUsers !== null) {
				foreach ($this->collAgentUsers as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCompanys !== null) {
				foreach ($this->collCompanys as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEmailQueues !== null) {
				foreach ($this->collEmailQueues as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEnableCountrys !== null) {
				foreach ($this->collEnableCountrys as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collFaqss !== null) {
				foreach ($this->collFaqss as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTelecomOperators !== null) {
				foreach ($this->collTelecomOperators as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collUsageAlerts !== null) {
				foreach ($this->collUsageAlerts as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collUsageAlertSenders !== null) {
				foreach ($this->collUsageAlertSenders as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collUserguides !== null) {
				foreach ($this->collUserguides as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = StatusPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collAgentCompanys !== null) {
					foreach ($this->collAgentCompanys as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAgentUsers !== null) {
					foreach ($this->collAgentUsers as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCompanys !== null) {
					foreach ($this->collCompanys as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEmailQueues !== null) {
					foreach ($this->collEmailQueues as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEnableCountrys !== null) {
					foreach ($this->collEnableCountrys as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collFaqss !== null) {
					foreach ($this->collFaqss as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTelecomOperators !== null) {
					foreach ($this->collTelecomOperators as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collUsageAlerts !== null) {
					foreach ($this->collUsageAlerts as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collUsageAlertSenders !== null) {
					foreach ($this->collUsageAlertSenders as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collUserguides !== null) {
					foreach ($this->collUserguides as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = StatusPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getName();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = StatusPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getName(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = StatusPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setName($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = StatusPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setName($arr[$keys[1]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(StatusPeer::DATABASE_NAME);

		if ($this->isColumnModified(StatusPeer::ID)) $criteria->add(StatusPeer::ID, $this->id);
		if ($this->isColumnModified(StatusPeer::NAME)) $criteria->add(StatusPeer::NAME, $this->name);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(StatusPeer::DATABASE_NAME);

		$criteria->add(StatusPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Status (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setName($this->name);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getAgentCompanys() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAgentCompany($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAgentUsers() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAgentUser($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCompanys() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCompany($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEmailQueues() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEmailQueue($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEnableCountrys() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEnableCountry($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getFaqss() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addFaqs($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTelecomOperators() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTelecomOperator($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getUsageAlerts() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUsageAlert($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getUsageAlertSenders() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUsageAlertSender($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getUserguides() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addUserguide($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Status Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     StatusPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new StatusPeer();
		}
		return self::$peer;
	}

	/**
	 * Clears out the collAgentCompanys collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAgentCompanys()
	 */
	public function clearAgentCompanys()
	{
		$this->collAgentCompanys = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAgentCompanys collection (array).
	 *
	 * By default this just sets the collAgentCompanys collection to an empty array (like clearcollAgentCompanys());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAgentCompanys()
	{
		$this->collAgentCompanys = array();
	}

	/**
	 * Gets an array of AgentCompany objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Status has previously been saved, it will retrieve
	 * related AgentCompanys from storage. If this Status is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AgentCompany[]
	 * @throws     PropelException
	 */
	public function getAgentCompanys($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAgentCompanys === null) {
			if ($this->isNew()) {
			   $this->collAgentCompanys = array();
			} else {

				$criteria->add(AgentCompanyPeer::STATUS_ID, $this->id);

				AgentCompanyPeer::addSelectColumns($criteria);
				$this->collAgentCompanys = AgentCompanyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AgentCompanyPeer::STATUS_ID, $this->id);

				AgentCompanyPeer::addSelectColumns($criteria);
				if (!isset($this->lastAgentCompanyCriteria) || !$this->lastAgentCompanyCriteria->equals($criteria)) {
					$this->collAgentCompanys = AgentCompanyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAgentCompanyCriteria = $criteria;
		return $this->collAgentCompanys;
	}

	/**
	 * Returns the number of related AgentCompany objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AgentCompany objects.
	 * @throws     PropelException
	 */
	public function countAgentCompanys(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAgentCompanys === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AgentCompanyPeer::STATUS_ID, $this->id);

				$count = AgentCompanyPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AgentCompanyPeer::STATUS_ID, $this->id);

				if (!isset($this->lastAgentCompanyCriteria) || !$this->lastAgentCompanyCriteria->equals($criteria)) {
					$count = AgentCompanyPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collAgentCompanys);
				}
			} else {
				$count = count($this->collAgentCompanys);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a AgentCompany object to this object
	 * through the AgentCompany foreign key attribute.
	 *
	 * @param      AgentCompany $l AgentCompany
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAgentCompany(AgentCompany $l)
	{
		if ($this->collAgentCompanys === null) {
			$this->initAgentCompanys();
		}
		if (!in_array($l, $this->collAgentCompanys, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAgentCompanys, $l);
			$l->setStatus($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Status is new, it will return
	 * an empty collection; or if this Status has previously
	 * been saved, it will retrieve related AgentCompanys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Status.
	 */
	public function getAgentCompanysJoinCountry($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAgentCompanys === null) {
			if ($this->isNew()) {
				$this->collAgentCompanys = array();
			} else {

				$criteria->add(AgentCompanyPeer::STATUS_ID, $this->id);

				$this->collAgentCompanys = AgentCompanyPeer::doSelectJoinCountry($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AgentCompanyPeer::STATUS_ID, $this->id);

			if (!isset($this->lastAgentCompanyCriteria) || !$this->lastAgentCompanyCriteria->equals($criteria)) {
				$this->collAgentCompanys = AgentCompanyPeer::doSelectJoinCountry($criteria, $con, $join_behavior);
			}
		}
		$this->lastAgentCompanyCriteria = $criteria;

		return $this->collAgentCompanys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Status is new, it will return
	 * an empty collection; or if this Status has previously
	 * been saved, it will retrieve related AgentCompanys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Status.
	 */
	public function getAgentCompanysJoinCity($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAgentCompanys === null) {
			if ($this->isNew()) {
				$this->collAgentCompanys = array();
			} else {

				$criteria->add(AgentCompanyPeer::STATUS_ID, $this->id);

				$this->collAgentCompanys = AgentCompanyPeer::doSelectJoinCity($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AgentCompanyPeer::STATUS_ID, $this->id);

			if (!isset($this->lastAgentCompanyCriteria) || !$this->lastAgentCompanyCriteria->equals($criteria)) {
				$this->collAgentCompanys = AgentCompanyPeer::doSelectJoinCity($criteria, $con, $join_behavior);
			}
		}
		$this->lastAgentCompanyCriteria = $criteria;

		return $this->collAgentCompanys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Status is new, it will return
	 * an empty collection; or if this Status has previously
	 * been saved, it will retrieve related AgentCompanys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Status.
	 */
	public function getAgentCompanysJoinCompanyType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAgentCompanys === null) {
			if ($this->isNew()) {
				$this->collAgentCompanys = array();
			} else {

				$criteria->add(AgentCompanyPeer::STATUS_ID, $this->id);

				$this->collAgentCompanys = AgentCompanyPeer::doSelectJoinCompanyType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AgentCompanyPeer::STATUS_ID, $this->id);

			if (!isset($this->lastAgentCompanyCriteria) || !$this->lastAgentCompanyCriteria->equals($criteria)) {
				$this->collAgentCompanys = AgentCompanyPeer::doSelectJoinCompanyType($criteria, $con, $join_behavior);
			}
		}
		$this->lastAgentCompanyCriteria = $criteria;

		return $this->collAgentCompanys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Status is new, it will return
	 * an empty collection; or if this Status has previously
	 * been saved, it will retrieve related AgentCompanys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Status.
	 */
	public function getAgentCompanysJoinCommissionPeriod($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAgentCompanys === null) {
			if ($this->isNew()) {
				$this->collAgentCompanys = array();
			} else {

				$criteria->add(AgentCompanyPeer::STATUS_ID, $this->id);

				$this->collAgentCompanys = AgentCompanyPeer::doSelectJoinCommissionPeriod($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AgentCompanyPeer::STATUS_ID, $this->id);

			if (!isset($this->lastAgentCompanyCriteria) || !$this->lastAgentCompanyCriteria->equals($criteria)) {
				$this->collAgentCompanys = AgentCompanyPeer::doSelectJoinCommissionPeriod($criteria, $con, $join_behavior);
			}
		}
		$this->lastAgentCompanyCriteria = $criteria;

		return $this->collAgentCompanys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Status is new, it will return
	 * an empty collection; or if this Status has previously
	 * been saved, it will retrieve related AgentCompanys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Status.
	 */
	public function getAgentCompanysJoinUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAgentCompanys === null) {
			if ($this->isNew()) {
				$this->collAgentCompanys = array();
			} else {

				$criteria->add(AgentCompanyPeer::STATUS_ID, $this->id);

				$this->collAgentCompanys = AgentCompanyPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AgentCompanyPeer::STATUS_ID, $this->id);

			if (!isset($this->lastAgentCompanyCriteria) || !$this->lastAgentCompanyCriteria->equals($criteria)) {
				$this->collAgentCompanys = AgentCompanyPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastAgentCompanyCriteria = $criteria;

		return $this->collAgentCompanys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Status is new, it will return
	 * an empty collection; or if this Status has previously
	 * been saved, it will retrieve related AgentCompanys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Status.
	 */
	public function getAgentCompanysJoinAgentCommissionPackage($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAgentCompanys === null) {
			if ($this->isNew()) {
				$this->collAgentCompanys = array();
			} else {

				$criteria->add(AgentCompanyPeer::STATUS_ID, $this->id);

				$this->collAgentCompanys = AgentCompanyPeer::doSelectJoinAgentCommissionPackage($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AgentCompanyPeer::STATUS_ID, $this->id);

			if (!isset($this->lastAgentCompanyCriteria) || !$this->lastAgentCompanyCriteria->equals($criteria)) {
				$this->collAgentCompanys = AgentCompanyPeer::doSelectJoinAgentCommissionPackage($criteria, $con, $join_behavior);
			}
		}
		$this->lastAgentCompanyCriteria = $criteria;

		return $this->collAgentCompanys;
	}

	/**
	 * Clears out the collAgentUsers collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAgentUsers()
	 */
	public function clearAgentUsers()
	{
		$this->collAgentUsers = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAgentUsers collection (array).
	 *
	 * By default this just sets the collAgentUsers collection to an empty array (like clearcollAgentUsers());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAgentUsers()
	{
		$this->collAgentUsers = array();
	}

	/**
	 * Gets an array of AgentUser objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Status has previously been saved, it will retrieve
	 * related AgentUsers from storage. If this Status is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AgentUser[]
	 * @throws     PropelException
	 */
	public function getAgentUsers($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAgentUsers === null) {
			if ($this->isNew()) {
			   $this->collAgentUsers = array();
			} else {

				$criteria->add(AgentUserPeer::STATUS_ID, $this->id);

				AgentUserPeer::addSelectColumns($criteria);
				$this->collAgentUsers = AgentUserPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AgentUserPeer::STATUS_ID, $this->id);

				AgentUserPeer::addSelectColumns($criteria);
				if (!isset($this->lastAgentUserCriteria) || !$this->lastAgentUserCriteria->equals($criteria)) {
					$this->collAgentUsers = AgentUserPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAgentUserCriteria = $criteria;
		return $this->collAgentUsers;
	}

	/**
	 * Returns the number of related AgentUser objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AgentUser objects.
	 * @throws     PropelException
	 */
	public function countAgentUsers(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAgentUsers === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AgentUserPeer::STATUS_ID, $this->id);

				$count = AgentUserPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AgentUserPeer::STATUS_ID, $this->id);

				if (!isset($this->lastAgentUserCriteria) || !$this->lastAgentUserCriteria->equals($criteria)) {
					$count = AgentUserPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collAgentUsers);
				}
			} else {
				$count = count($this->collAgentUsers);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a AgentUser object to this object
	 * through the AgentUser foreign key attribute.
	 *
	 * @param      AgentUser $l AgentUser
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAgentUser(AgentUser $l)
	{
		if ($this->collAgentUsers === null) {
			$this->initAgentUsers();
		}
		if (!in_array($l, $this->collAgentUsers, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAgentUsers, $l);
			$l->setStatus($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Status is new, it will return
	 * an empty collection; or if this Status has previously
	 * been saved, it will retrieve related AgentUsers from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Status.
	 */
	public function getAgentUsersJoinAgentCompany($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAgentUsers === null) {
			if ($this->isNew()) {
				$this->collAgentUsers = array();
			} else {

				$criteria->add(AgentUserPeer::STATUS_ID, $this->id);

				$this->collAgentUsers = AgentUserPeer::doSelectJoinAgentCompany($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AgentUserPeer::STATUS_ID, $this->id);

			if (!isset($this->lastAgentUserCriteria) || !$this->lastAgentUserCriteria->equals($criteria)) {
				$this->collAgentUsers = AgentUserPeer::doSelectJoinAgentCompany($criteria, $con, $join_behavior);
			}
		}
		$this->lastAgentUserCriteria = $criteria;

		return $this->collAgentUsers;
	}

	/**
	 * Clears out the collCompanys collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCompanys()
	 */
	public function clearCompanys()
	{
		$this->collCompanys = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCompanys collection (array).
	 *
	 * By default this just sets the collCompanys collection to an empty array (like clearcollCompanys());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCompanys()
	{
		$this->collCompanys = array();
	}

	/**
	 * Gets an array of Company objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Status has previously been saved, it will retrieve
	 * related Companys from storage. If this Status is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Company[]
	 * @throws     PropelException
	 */
	public function getCompanys($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanys === null) {
			if ($this->isNew()) {
			   $this->collCompanys = array();
			} else {

				$criteria->add(CompanyPeer::STATUS_ID, $this->id);

				CompanyPeer::addSelectColumns($criteria);
				$this->collCompanys = CompanyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CompanyPeer::STATUS_ID, $this->id);

				CompanyPeer::addSelectColumns($criteria);
				if (!isset($this->lastCompanyCriteria) || !$this->lastCompanyCriteria->equals($criteria)) {
					$this->collCompanys = CompanyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCompanyCriteria = $criteria;
		return $this->collCompanys;
	}

	/**
	 * Returns the number of related Company objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Company objects.
	 * @throws     PropelException
	 */
	public function countCompanys(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCompanys === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CompanyPeer::STATUS_ID, $this->id);

				$count = CompanyPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CompanyPeer::STATUS_ID, $this->id);

				if (!isset($this->lastCompanyCriteria) || !$this->lastCompanyCriteria->equals($criteria)) {
					$count = CompanyPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCompanys);
				}
			} else {
				$count = count($this->collCompanys);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Company object to this object
	 * through the Company foreign key attribute.
	 *
	 * @param      Company $l Company
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCompany(Company $l)
	{
		if ($this->collCompanys === null) {
			$this->initCompanys();
		}
		if (!in_array($l, $this->collCompanys, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCompanys, $l);
			$l->setStatus($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Status is new, it will return
	 * an empty collection; or if this Status has previously
	 * been saved, it will retrieve related Companys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Status.
	 */
	public function getCompanysJoinCountry($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanys === null) {
			if ($this->isNew()) {
				$this->collCompanys = array();
			} else {

				$criteria->add(CompanyPeer::STATUS_ID, $this->id);

				$this->collCompanys = CompanyPeer::doSelectJoinCountry($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyPeer::STATUS_ID, $this->id);

			if (!isset($this->lastCompanyCriteria) || !$this->lastCompanyCriteria->equals($criteria)) {
				$this->collCompanys = CompanyPeer::doSelectJoinCountry($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyCriteria = $criteria;

		return $this->collCompanys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Status is new, it will return
	 * an empty collection; or if this Status has previously
	 * been saved, it will retrieve related Companys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Status.
	 */
	public function getCompanysJoinCity($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanys === null) {
			if ($this->isNew()) {
				$this->collCompanys = array();
			} else {

				$criteria->add(CompanyPeer::STATUS_ID, $this->id);

				$this->collCompanys = CompanyPeer::doSelectJoinCity($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyPeer::STATUS_ID, $this->id);

			if (!isset($this->lastCompanyCriteria) || !$this->lastCompanyCriteria->equals($criteria)) {
				$this->collCompanys = CompanyPeer::doSelectJoinCity($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyCriteria = $criteria;

		return $this->collCompanys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Status is new, it will return
	 * an empty collection; or if this Status has previously
	 * been saved, it will retrieve related Companys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Status.
	 */
	public function getCompanysJoinCompanySize($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanys === null) {
			if ($this->isNew()) {
				$this->collCompanys = array();
			} else {

				$criteria->add(CompanyPeer::STATUS_ID, $this->id);

				$this->collCompanys = CompanyPeer::doSelectJoinCompanySize($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyPeer::STATUS_ID, $this->id);

			if (!isset($this->lastCompanyCriteria) || !$this->lastCompanyCriteria->equals($criteria)) {
				$this->collCompanys = CompanyPeer::doSelectJoinCompanySize($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyCriteria = $criteria;

		return $this->collCompanys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Status is new, it will return
	 * an empty collection; or if this Status has previously
	 * been saved, it will retrieve related Companys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Status.
	 */
	public function getCompanysJoinCompanyType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanys === null) {
			if ($this->isNew()) {
				$this->collCompanys = array();
			} else {

				$criteria->add(CompanyPeer::STATUS_ID, $this->id);

				$this->collCompanys = CompanyPeer::doSelectJoinCompanyType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyPeer::STATUS_ID, $this->id);

			if (!isset($this->lastCompanyCriteria) || !$this->lastCompanyCriteria->equals($criteria)) {
				$this->collCompanys = CompanyPeer::doSelectJoinCompanyType($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyCriteria = $criteria;

		return $this->collCompanys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Status is new, it will return
	 * an empty collection; or if this Status has previously
	 * been saved, it will retrieve related Companys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Status.
	 */
	public function getCompanysJoinCustomerType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanys === null) {
			if ($this->isNew()) {
				$this->collCompanys = array();
			} else {

				$criteria->add(CompanyPeer::STATUS_ID, $this->id);

				$this->collCompanys = CompanyPeer::doSelectJoinCustomerType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyPeer::STATUS_ID, $this->id);

			if (!isset($this->lastCompanyCriteria) || !$this->lastCompanyCriteria->equals($criteria)) {
				$this->collCompanys = CompanyPeer::doSelectJoinCustomerType($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyCriteria = $criteria;

		return $this->collCompanys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Status is new, it will return
	 * an empty collection; or if this Status has previously
	 * been saved, it will retrieve related Companys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Status.
	 */
	public function getCompanysJoinApartmentForm($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanys === null) {
			if ($this->isNew()) {
				$this->collCompanys = array();
			} else {

				$criteria->add(CompanyPeer::STATUS_ID, $this->id);

				$this->collCompanys = CompanyPeer::doSelectJoinApartmentForm($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyPeer::STATUS_ID, $this->id);

			if (!isset($this->lastCompanyCriteria) || !$this->lastCompanyCriteria->equals($criteria)) {
				$this->collCompanys = CompanyPeer::doSelectJoinApartmentForm($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyCriteria = $criteria;

		return $this->collCompanys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Status is new, it will return
	 * an empty collection; or if this Status has previously
	 * been saved, it will retrieve related Companys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Status.
	 */
	public function getCompanysJoinInvoiceMethod($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanys === null) {
			if ($this->isNew()) {
				$this->collCompanys = array();
			} else {

				$criteria->add(CompanyPeer::STATUS_ID, $this->id);

				$this->collCompanys = CompanyPeer::doSelectJoinInvoiceMethod($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyPeer::STATUS_ID, $this->id);

			if (!isset($this->lastCompanyCriteria) || !$this->lastCompanyCriteria->equals($criteria)) {
				$this->collCompanys = CompanyPeer::doSelectJoinInvoiceMethod($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyCriteria = $criteria;

		return $this->collCompanys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Status is new, it will return
	 * an empty collection; or if this Status has previously
	 * been saved, it will retrieve related Companys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Status.
	 */
	public function getCompanysJoinUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanys === null) {
			if ($this->isNew()) {
				$this->collCompanys = array();
			} else {

				$criteria->add(CompanyPeer::STATUS_ID, $this->id);

				$this->collCompanys = CompanyPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyPeer::STATUS_ID, $this->id);

			if (!isset($this->lastCompanyCriteria) || !$this->lastCompanyCriteria->equals($criteria)) {
				$this->collCompanys = CompanyPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyCriteria = $criteria;

		return $this->collCompanys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Status is new, it will return
	 * an empty collection; or if this Status has previously
	 * been saved, it will retrieve related Companys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Status.
	 */
	public function getCompanysJoinAgentCompany($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanys === null) {
			if ($this->isNew()) {
				$this->collCompanys = array();
			} else {

				$criteria->add(CompanyPeer::STATUS_ID, $this->id);

				$this->collCompanys = CompanyPeer::doSelectJoinAgentCompany($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyPeer::STATUS_ID, $this->id);

			if (!isset($this->lastCompanyCriteria) || !$this->lastCompanyCriteria->equals($criteria)) {
				$this->collCompanys = CompanyPeer::doSelectJoinAgentCompany($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyCriteria = $criteria;

		return $this->collCompanys;
	}

	/**
	 * Clears out the collEmailQueues collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEmailQueues()
	 */
	public function clearEmailQueues()
	{
		$this->collEmailQueues = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEmailQueues collection (array).
	 *
	 * By default this just sets the collEmailQueues collection to an empty array (like clearcollEmailQueues());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEmailQueues()
	{
		$this->collEmailQueues = array();
	}

	/**
	 * Gets an array of EmailQueue objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Status has previously been saved, it will retrieve
	 * related EmailQueues from storage. If this Status is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array EmailQueue[]
	 * @throws     PropelException
	 */
	public function getEmailQueues($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmailQueues === null) {
			if ($this->isNew()) {
			   $this->collEmailQueues = array();
			} else {

				$criteria->add(EmailQueuePeer::EMAIL_STATUS_ID, $this->id);

				EmailQueuePeer::addSelectColumns($criteria);
				$this->collEmailQueues = EmailQueuePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EmailQueuePeer::EMAIL_STATUS_ID, $this->id);

				EmailQueuePeer::addSelectColumns($criteria);
				if (!isset($this->lastEmailQueueCriteria) || !$this->lastEmailQueueCriteria->equals($criteria)) {
					$this->collEmailQueues = EmailQueuePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEmailQueueCriteria = $criteria;
		return $this->collEmailQueues;
	}

	/**
	 * Returns the number of related EmailQueue objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related EmailQueue objects.
	 * @throws     PropelException
	 */
	public function countEmailQueues(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEmailQueues === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EmailQueuePeer::EMAIL_STATUS_ID, $this->id);

				$count = EmailQueuePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EmailQueuePeer::EMAIL_STATUS_ID, $this->id);

				if (!isset($this->lastEmailQueueCriteria) || !$this->lastEmailQueueCriteria->equals($criteria)) {
					$count = EmailQueuePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collEmailQueues);
				}
			} else {
				$count = count($this->collEmailQueues);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a EmailQueue object to this object
	 * through the EmailQueue foreign key attribute.
	 *
	 * @param      EmailQueue $l EmailQueue
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEmailQueue(EmailQueue $l)
	{
		if ($this->collEmailQueues === null) {
			$this->initEmailQueues();
		}
		if (!in_array($l, $this->collEmailQueues, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEmailQueues, $l);
			$l->setStatus($this);
		}
	}

	/**
	 * Clears out the collEnableCountrys collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEnableCountrys()
	 */
	public function clearEnableCountrys()
	{
		$this->collEnableCountrys = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEnableCountrys collection (array).
	 *
	 * By default this just sets the collEnableCountrys collection to an empty array (like clearcollEnableCountrys());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEnableCountrys()
	{
		$this->collEnableCountrys = array();
	}

	/**
	 * Gets an array of EnableCountry objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Status has previously been saved, it will retrieve
	 * related EnableCountrys from storage. If this Status is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array EnableCountry[]
	 * @throws     PropelException
	 */
	public function getEnableCountrys($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEnableCountrys === null) {
			if ($this->isNew()) {
			   $this->collEnableCountrys = array();
			} else {

				$criteria->add(EnableCountryPeer::STATUS, $this->id);

				EnableCountryPeer::addSelectColumns($criteria);
				$this->collEnableCountrys = EnableCountryPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EnableCountryPeer::STATUS, $this->id);

				EnableCountryPeer::addSelectColumns($criteria);
				if (!isset($this->lastEnableCountryCriteria) || !$this->lastEnableCountryCriteria->equals($criteria)) {
					$this->collEnableCountrys = EnableCountryPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEnableCountryCriteria = $criteria;
		return $this->collEnableCountrys;
	}

	/**
	 * Returns the number of related EnableCountry objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related EnableCountry objects.
	 * @throws     PropelException
	 */
	public function countEnableCountrys(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEnableCountrys === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EnableCountryPeer::STATUS, $this->id);

				$count = EnableCountryPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EnableCountryPeer::STATUS, $this->id);

				if (!isset($this->lastEnableCountryCriteria) || !$this->lastEnableCountryCriteria->equals($criteria)) {
					$count = EnableCountryPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collEnableCountrys);
				}
			} else {
				$count = count($this->collEnableCountrys);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a EnableCountry object to this object
	 * through the EnableCountry foreign key attribute.
	 *
	 * @param      EnableCountry $l EnableCountry
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEnableCountry(EnableCountry $l)
	{
		if ($this->collEnableCountrys === null) {
			$this->initEnableCountrys();
		}
		if (!in_array($l, $this->collEnableCountrys, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEnableCountrys, $l);
			$l->setStatusRelatedByStatus($this);
		}
	}

	/**
	 * Clears out the collFaqss collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addFaqss()
	 */
	public function clearFaqss()
	{
		$this->collFaqss = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collFaqss collection (array).
	 *
	 * By default this just sets the collFaqss collection to an empty array (like clearcollFaqss());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initFaqss()
	{
		$this->collFaqss = array();
	}

	/**
	 * Gets an array of Faqs objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Status has previously been saved, it will retrieve
	 * related Faqss from storage. If this Status is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Faqs[]
	 * @throws     PropelException
	 */
	public function getFaqss($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFaqss === null) {
			if ($this->isNew()) {
			   $this->collFaqss = array();
			} else {

				$criteria->add(FaqsPeer::STATUS_ID, $this->id);

				FaqsPeer::addSelectColumns($criteria);
				$this->collFaqss = FaqsPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(FaqsPeer::STATUS_ID, $this->id);

				FaqsPeer::addSelectColumns($criteria);
				if (!isset($this->lastFaqsCriteria) || !$this->lastFaqsCriteria->equals($criteria)) {
					$this->collFaqss = FaqsPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastFaqsCriteria = $criteria;
		return $this->collFaqss;
	}

	/**
	 * Returns the number of related Faqs objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Faqs objects.
	 * @throws     PropelException
	 */
	public function countFaqss(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collFaqss === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(FaqsPeer::STATUS_ID, $this->id);

				$count = FaqsPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(FaqsPeer::STATUS_ID, $this->id);

				if (!isset($this->lastFaqsCriteria) || !$this->lastFaqsCriteria->equals($criteria)) {
					$count = FaqsPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collFaqss);
				}
			} else {
				$count = count($this->collFaqss);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Faqs object to this object
	 * through the Faqs foreign key attribute.
	 *
	 * @param      Faqs $l Faqs
	 * @return     void
	 * @throws     PropelException
	 */
	public function addFaqs(Faqs $l)
	{
		if ($this->collFaqss === null) {
			$this->initFaqss();
		}
		if (!in_array($l, $this->collFaqss, true)) { // only add it if the **same** object is not already associated
			array_push($this->collFaqss, $l);
			$l->setStatus($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Status is new, it will return
	 * an empty collection; or if this Status has previously
	 * been saved, it will retrieve related Faqss from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Status.
	 */
	public function getFaqssJoinEnableCountry($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collFaqss === null) {
			if ($this->isNew()) {
				$this->collFaqss = array();
			} else {

				$criteria->add(FaqsPeer::STATUS_ID, $this->id);

				$this->collFaqss = FaqsPeer::doSelectJoinEnableCountry($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(FaqsPeer::STATUS_ID, $this->id);

			if (!isset($this->lastFaqsCriteria) || !$this->lastFaqsCriteria->equals($criteria)) {
				$this->collFaqss = FaqsPeer::doSelectJoinEnableCountry($criteria, $con, $join_behavior);
			}
		}
		$this->lastFaqsCriteria = $criteria;

		return $this->collFaqss;
	}

	/**
	 * Clears out the collTelecomOperators collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTelecomOperators()
	 */
	public function clearTelecomOperators()
	{
		$this->collTelecomOperators = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTelecomOperators collection (array).
	 *
	 * By default this just sets the collTelecomOperators collection to an empty array (like clearcollTelecomOperators());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTelecomOperators()
	{
		$this->collTelecomOperators = array();
	}

	/**
	 * Gets an array of TelecomOperator objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Status has previously been saved, it will retrieve
	 * related TelecomOperators from storage. If this Status is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array TelecomOperator[]
	 * @throws     PropelException
	 */
	public function getTelecomOperators($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTelecomOperators === null) {
			if ($this->isNew()) {
			   $this->collTelecomOperators = array();
			} else {

				$criteria->add(TelecomOperatorPeer::STATUS_ID, $this->id);

				TelecomOperatorPeer::addSelectColumns($criteria);
				$this->collTelecomOperators = TelecomOperatorPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TelecomOperatorPeer::STATUS_ID, $this->id);

				TelecomOperatorPeer::addSelectColumns($criteria);
				if (!isset($this->lastTelecomOperatorCriteria) || !$this->lastTelecomOperatorCriteria->equals($criteria)) {
					$this->collTelecomOperators = TelecomOperatorPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTelecomOperatorCriteria = $criteria;
		return $this->collTelecomOperators;
	}

	/**
	 * Returns the number of related TelecomOperator objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related TelecomOperator objects.
	 * @throws     PropelException
	 */
	public function countTelecomOperators(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTelecomOperators === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TelecomOperatorPeer::STATUS_ID, $this->id);

				$count = TelecomOperatorPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TelecomOperatorPeer::STATUS_ID, $this->id);

				if (!isset($this->lastTelecomOperatorCriteria) || !$this->lastTelecomOperatorCriteria->equals($criteria)) {
					$count = TelecomOperatorPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collTelecomOperators);
				}
			} else {
				$count = count($this->collTelecomOperators);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a TelecomOperator object to this object
	 * through the TelecomOperator foreign key attribute.
	 *
	 * @param      TelecomOperator $l TelecomOperator
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTelecomOperator(TelecomOperator $l)
	{
		if ($this->collTelecomOperators === null) {
			$this->initTelecomOperators();
		}
		if (!in_array($l, $this->collTelecomOperators, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTelecomOperators, $l);
			$l->setStatus($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Status is new, it will return
	 * an empty collection; or if this Status has previously
	 * been saved, it will retrieve related TelecomOperators from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Status.
	 */
	public function getTelecomOperatorsJoinEnableCountry($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTelecomOperators === null) {
			if ($this->isNew()) {
				$this->collTelecomOperators = array();
			} else {

				$criteria->add(TelecomOperatorPeer::STATUS_ID, $this->id);

				$this->collTelecomOperators = TelecomOperatorPeer::doSelectJoinEnableCountry($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TelecomOperatorPeer::STATUS_ID, $this->id);

			if (!isset($this->lastTelecomOperatorCriteria) || !$this->lastTelecomOperatorCriteria->equals($criteria)) {
				$this->collTelecomOperators = TelecomOperatorPeer::doSelectJoinEnableCountry($criteria, $con, $join_behavior);
			}
		}
		$this->lastTelecomOperatorCriteria = $criteria;

		return $this->collTelecomOperators;
	}

	/**
	 * Clears out the collUsageAlerts collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUsageAlerts()
	 */
	public function clearUsageAlerts()
	{
		$this->collUsageAlerts = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUsageAlerts collection (array).
	 *
	 * By default this just sets the collUsageAlerts collection to an empty array (like clearcollUsageAlerts());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUsageAlerts()
	{
		$this->collUsageAlerts = array();
	}

	/**
	 * Gets an array of UsageAlert objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Status has previously been saved, it will retrieve
	 * related UsageAlerts from storage. If this Status is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array UsageAlert[]
	 * @throws     PropelException
	 */
	public function getUsageAlerts($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsageAlerts === null) {
			if ($this->isNew()) {
			   $this->collUsageAlerts = array();
			} else {

				$criteria->add(UsageAlertPeer::STATUS, $this->id);

				UsageAlertPeer::addSelectColumns($criteria);
				$this->collUsageAlerts = UsageAlertPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UsageAlertPeer::STATUS, $this->id);

				UsageAlertPeer::addSelectColumns($criteria);
				if (!isset($this->lastUsageAlertCriteria) || !$this->lastUsageAlertCriteria->equals($criteria)) {
					$this->collUsageAlerts = UsageAlertPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUsageAlertCriteria = $criteria;
		return $this->collUsageAlerts;
	}

	/**
	 * Returns the number of related UsageAlert objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related UsageAlert objects.
	 * @throws     PropelException
	 */
	public function countUsageAlerts(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUsageAlerts === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UsageAlertPeer::STATUS, $this->id);

				$count = UsageAlertPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UsageAlertPeer::STATUS, $this->id);

				if (!isset($this->lastUsageAlertCriteria) || !$this->lastUsageAlertCriteria->equals($criteria)) {
					$count = UsageAlertPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collUsageAlerts);
				}
			} else {
				$count = count($this->collUsageAlerts);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a UsageAlert object to this object
	 * through the UsageAlert foreign key attribute.
	 *
	 * @param      UsageAlert $l UsageAlert
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUsageAlert(UsageAlert $l)
	{
		if ($this->collUsageAlerts === null) {
			$this->initUsageAlerts();
		}
		if (!in_array($l, $this->collUsageAlerts, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUsageAlerts, $l);
			$l->setStatusRelatedByStatus($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Status is new, it will return
	 * an empty collection; or if this Status has previously
	 * been saved, it will retrieve related UsageAlerts from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Status.
	 */
	public function getUsageAlertsJoinEnableCountry($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsageAlerts === null) {
			if ($this->isNew()) {
				$this->collUsageAlerts = array();
			} else {

				$criteria->add(UsageAlertPeer::STATUS, $this->id);

				$this->collUsageAlerts = UsageAlertPeer::doSelectJoinEnableCountry($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UsageAlertPeer::STATUS, $this->id);

			if (!isset($this->lastUsageAlertCriteria) || !$this->lastUsageAlertCriteria->equals($criteria)) {
				$this->collUsageAlerts = UsageAlertPeer::doSelectJoinEnableCountry($criteria, $con, $join_behavior);
			}
		}
		$this->lastUsageAlertCriteria = $criteria;

		return $this->collUsageAlerts;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Status is new, it will return
	 * an empty collection; or if this Status has previously
	 * been saved, it will retrieve related UsageAlerts from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Status.
	 */
	public function getUsageAlertsJoinUsageAlertSender($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsageAlerts === null) {
			if ($this->isNew()) {
				$this->collUsageAlerts = array();
			} else {

				$criteria->add(UsageAlertPeer::STATUS, $this->id);

				$this->collUsageAlerts = UsageAlertPeer::doSelectJoinUsageAlertSender($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UsageAlertPeer::STATUS, $this->id);

			if (!isset($this->lastUsageAlertCriteria) || !$this->lastUsageAlertCriteria->equals($criteria)) {
				$this->collUsageAlerts = UsageAlertPeer::doSelectJoinUsageAlertSender($criteria, $con, $join_behavior);
			}
		}
		$this->lastUsageAlertCriteria = $criteria;

		return $this->collUsageAlerts;
	}

	/**
	 * Clears out the collUsageAlertSenders collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUsageAlertSenders()
	 */
	public function clearUsageAlertSenders()
	{
		$this->collUsageAlertSenders = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUsageAlertSenders collection (array).
	 *
	 * By default this just sets the collUsageAlertSenders collection to an empty array (like clearcollUsageAlertSenders());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUsageAlertSenders()
	{
		$this->collUsageAlertSenders = array();
	}

	/**
	 * Gets an array of UsageAlertSender objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Status has previously been saved, it will retrieve
	 * related UsageAlertSenders from storage. If this Status is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array UsageAlertSender[]
	 * @throws     PropelException
	 */
	public function getUsageAlertSenders($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUsageAlertSenders === null) {
			if ($this->isNew()) {
			   $this->collUsageAlertSenders = array();
			} else {

				$criteria->add(UsageAlertSenderPeer::STATUS, $this->id);

				UsageAlertSenderPeer::addSelectColumns($criteria);
				$this->collUsageAlertSenders = UsageAlertSenderPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UsageAlertSenderPeer::STATUS, $this->id);

				UsageAlertSenderPeer::addSelectColumns($criteria);
				if (!isset($this->lastUsageAlertSenderCriteria) || !$this->lastUsageAlertSenderCriteria->equals($criteria)) {
					$this->collUsageAlertSenders = UsageAlertSenderPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUsageAlertSenderCriteria = $criteria;
		return $this->collUsageAlertSenders;
	}

	/**
	 * Returns the number of related UsageAlertSender objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related UsageAlertSender objects.
	 * @throws     PropelException
	 */
	public function countUsageAlertSenders(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUsageAlertSenders === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UsageAlertSenderPeer::STATUS, $this->id);

				$count = UsageAlertSenderPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UsageAlertSenderPeer::STATUS, $this->id);

				if (!isset($this->lastUsageAlertSenderCriteria) || !$this->lastUsageAlertSenderCriteria->equals($criteria)) {
					$count = UsageAlertSenderPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collUsageAlertSenders);
				}
			} else {
				$count = count($this->collUsageAlertSenders);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a UsageAlertSender object to this object
	 * through the UsageAlertSender foreign key attribute.
	 *
	 * @param      UsageAlertSender $l UsageAlertSender
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUsageAlertSender(UsageAlertSender $l)
	{
		if ($this->collUsageAlertSenders === null) {
			$this->initUsageAlertSenders();
		}
		if (!in_array($l, $this->collUsageAlertSenders, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUsageAlertSenders, $l);
			$l->setStatusRelatedByStatus($this);
		}
	}

	/**
	 * Clears out the collUserguides collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addUserguides()
	 */
	public function clearUserguides()
	{
		$this->collUserguides = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collUserguides collection (array).
	 *
	 * By default this just sets the collUserguides collection to an empty array (like clearcollUserguides());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initUserguides()
	{
		$this->collUserguides = array();
	}

	/**
	 * Gets an array of Userguide objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Status has previously been saved, it will retrieve
	 * related Userguides from storage. If this Status is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Userguide[]
	 * @throws     PropelException
	 */
	public function getUserguides($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserguides === null) {
			if ($this->isNew()) {
			   $this->collUserguides = array();
			} else {

				$criteria->add(UserguidePeer::STATUS_ID, $this->id);

				UserguidePeer::addSelectColumns($criteria);
				$this->collUserguides = UserguidePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(UserguidePeer::STATUS_ID, $this->id);

				UserguidePeer::addSelectColumns($criteria);
				if (!isset($this->lastUserguideCriteria) || !$this->lastUserguideCriteria->equals($criteria)) {
					$this->collUserguides = UserguidePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastUserguideCriteria = $criteria;
		return $this->collUserguides;
	}

	/**
	 * Returns the number of related Userguide objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Userguide objects.
	 * @throws     PropelException
	 */
	public function countUserguides(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collUserguides === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(UserguidePeer::STATUS_ID, $this->id);

				$count = UserguidePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(UserguidePeer::STATUS_ID, $this->id);

				if (!isset($this->lastUserguideCriteria) || !$this->lastUserguideCriteria->equals($criteria)) {
					$count = UserguidePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collUserguides);
				}
			} else {
				$count = count($this->collUserguides);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Userguide object to this object
	 * through the Userguide foreign key attribute.
	 *
	 * @param      Userguide $l Userguide
	 * @return     void
	 * @throws     PropelException
	 */
	public function addUserguide(Userguide $l)
	{
		if ($this->collUserguides === null) {
			$this->initUserguides();
		}
		if (!in_array($l, $this->collUserguides, true)) { // only add it if the **same** object is not already associated
			array_push($this->collUserguides, $l);
			$l->setStatus($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Status is new, it will return
	 * an empty collection; or if this Status has previously
	 * been saved, it will retrieve related Userguides from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Status.
	 */
	public function getUserguidesJoinEnableCountry($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(StatusPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collUserguides === null) {
			if ($this->isNew()) {
				$this->collUserguides = array();
			} else {

				$criteria->add(UserguidePeer::STATUS_ID, $this->id);

				$this->collUserguides = UserguidePeer::doSelectJoinEnableCountry($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(UserguidePeer::STATUS_ID, $this->id);

			if (!isset($this->lastUserguideCriteria) || !$this->lastUserguideCriteria->equals($criteria)) {
				$this->collUserguides = UserguidePeer::doSelectJoinEnableCountry($criteria, $con, $join_behavior);
			}
		}
		$this->lastUserguideCriteria = $criteria;

		return $this->collUserguides;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collAgentCompanys) {
				foreach ((array) $this->collAgentCompanys as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAgentUsers) {
				foreach ((array) $this->collAgentUsers as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCompanys) {
				foreach ((array) $this->collCompanys as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEmailQueues) {
				foreach ((array) $this->collEmailQueues as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEnableCountrys) {
				foreach ((array) $this->collEnableCountrys as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collFaqss) {
				foreach ((array) $this->collFaqss as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTelecomOperators) {
				foreach ((array) $this->collTelecomOperators as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collUsageAlerts) {
				foreach ((array) $this->collUsageAlerts as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collUsageAlertSenders) {
				foreach ((array) $this->collUsageAlertSenders as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collUserguides) {
				foreach ((array) $this->collUserguides as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collAgentCompanys = null;
		$this->collAgentUsers = null;
		$this->collCompanys = null;
		$this->collEmailQueues = null;
		$this->collEnableCountrys = null;
		$this->collFaqss = null;
		$this->collTelecomOperators = null;
		$this->collUsageAlerts = null;
		$this->collUsageAlertSenders = null;
		$this->collUserguides = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseStatus:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseStatus::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseStatus
