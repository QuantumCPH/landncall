<?php

/**
 * Base class that represents a row from the 'employee' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 01/11/12 05:25:23
 *
 * @package    lib.model.om
 */
abstract class BaseEmployee extends BaseObject  implements Persistent {


  const PEER = 'EmployeePeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        EmployeePeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the company_id field.
	 * @var        int
	 */
	protected $company_id;

	/**
	 * The value for the first_name field.
	 * @var        string
	 */
	protected $first_name;

	/**
	 * The value for the last_name field.
	 * @var        string
	 */
	protected $last_name;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the mobile_model field.
	 * @var        string
	 */
	protected $mobile_model;

	/**
	 * The value for the mobile_number field.
	 * @var        string
	 */
	protected $mobile_number;

	/**
	 * The value for the created_at field.
	 * Note: this column has a database default value of: (expression) CURRENT_TIMESTAMP
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the app_code field.
	 * @var        string
	 */
	protected $app_code;

	/**
	 * The value for the is_app_registered field.
	 * @var        boolean
	 */
	protected $is_app_registered;

	/**
	 * The value for the password field.
	 * @var        string
	 */
	protected $password;

	/**
	 * The value for the registration_type field.
	 * @var        string
	 */
	protected $registration_type;

	/**
	 * The value for the product_price field.
	 * @var        int
	 */
	protected $product_price;

	/**
	 * The value for the product_id field.
	 * @var        int
	 */
	protected $product_id;

	/**
	 * The value for the country_code field.
	 * @var        string
	 */
	protected $country_code;

	/**
	 * The value for the country_mobile_number field.
	 * @var        string
	 */
	protected $country_mobile_number;

	/**
	 * @var        Company
	 */
	protected $aCompany;

	/**
	 * @var        array CdrLog[] Collection to store aggregation of CdrLog objects.
	 */
	protected $collCdrLogs;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCdrLogs.
	 */
	private $lastCdrLogCriteria = null;

	/**
	 * @var        array EmployeeProduct[] Collection to store aggregation of EmployeeProduct objects.
	 */
	protected $collEmployeeProducts;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEmployeeProducts.
	 */
	private $lastEmployeeProductCriteria = null;

	/**
	 * @var        array SupportActivity[] Collection to store aggregation of SupportActivity objects.
	 */
	protected $collSupportActivitys;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSupportActivitys.
	 */
	private $lastSupportActivityCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseEmployee object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [company_id] column value.
	 * 
	 * @return     int
	 */
	public function getCompanyId()
	{
		return $this->company_id;
	}

	/**
	 * Get the [first_name] column value.
	 * 
	 * @return     string
	 */
	public function getFirstName()
	{
		return $this->first_name;
	}

	/**
	 * Get the [last_name] column value.
	 * 
	 * @return     string
	 */
	public function getLastName()
	{
		return $this->last_name;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [mobile_model] column value.
	 * 
	 * @return     string
	 */
	public function getMobileModel()
	{
		return $this->mobile_model;
	}

	/**
	 * Get the [mobile_number] column value.
	 * 
	 * @return     string
	 */
	public function getMobileNumber()
	{
		return $this->mobile_number;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [app_code] column value.
	 * 
	 * @return     string
	 */
	public function getAppCode()
	{
		return $this->app_code;
	}

	/**
	 * Get the [is_app_registered] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsAppRegistered()
	{
		return $this->is_app_registered;
	}

	/**
	 * Get the [password] column value.
	 * 
	 * @return     string
	 */
	public function getPassword()
	{
		return $this->password;
	}

	/**
	 * Get the [registration_type] column value.
	 * 
	 * @return     string
	 */
	public function getRegistrationType()
	{
		return $this->registration_type;
	}

	/**
	 * Get the [product_price] column value.
	 * 
	 * @return     int
	 */
	public function getProductPrice()
	{
		return $this->product_price;
	}

	/**
	 * Get the [product_id] column value.
	 * 
	 * @return     int
	 */
	public function getProductId()
	{
		return $this->product_id;
	}

	/**
	 * Get the [country_code] column value.
	 * 
	 * @return     string
	 */
	public function getCountryCode()
	{
		return $this->country_code;
	}

	/**
	 * Get the [country_mobile_number] column value.
	 * 
	 * @return     string
	 */
	public function getCountryMobileNumber()
	{
		return $this->country_mobile_number;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = EmployeePeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [company_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setCompanyId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->company_id !== $v) {
			$this->company_id = $v;
			$this->modifiedColumns[] = EmployeePeer::COMPANY_ID;
		}

		if ($this->aCompany !== null && $this->aCompany->getId() !== $v) {
			$this->aCompany = null;
		}

		return $this;
	} // setCompanyId()

	/**
	 * Set the value of [first_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setFirstName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->first_name !== $v) {
			$this->first_name = $v;
			$this->modifiedColumns[] = EmployeePeer::FIRST_NAME;
		}

		return $this;
	} // setFirstName()

	/**
	 * Set the value of [last_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setLastName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->last_name !== $v) {
			$this->last_name = $v;
			$this->modifiedColumns[] = EmployeePeer::LAST_NAME;
		}

		return $this;
	} // setLastName()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = EmployeePeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [mobile_model] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setMobileModel($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mobile_model !== $v) {
			$this->mobile_model = $v;
			$this->modifiedColumns[] = EmployeePeer::MOBILE_MODEL;
		}

		return $this;
	} // setMobileModel()

	/**
	 * Set the value of [mobile_number] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setMobileNumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mobile_number !== $v) {
			$this->mobile_number = $v;
			$this->modifiedColumns[] = EmployeePeer::MOBILE_NUMBER;
		}

		return $this;
	} // setMobileNumber()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = EmployeePeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Set the value of [app_code] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setAppCode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->app_code !== $v) {
			$this->app_code = $v;
			$this->modifiedColumns[] = EmployeePeer::APP_CODE;
		}

		return $this;
	} // setAppCode()

	/**
	 * Set the value of [is_app_registered] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setIsAppRegistered($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_app_registered !== $v) {
			$this->is_app_registered = $v;
			$this->modifiedColumns[] = EmployeePeer::IS_APP_REGISTERED;
		}

		return $this;
	} // setIsAppRegistered()

	/**
	 * Set the value of [password] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setPassword($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->password !== $v) {
			$this->password = $v;
			$this->modifiedColumns[] = EmployeePeer::PASSWORD;
		}

		return $this;
	} // setPassword()

	/**
	 * Set the value of [registration_type] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setRegistrationType($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->registration_type !== $v) {
			$this->registration_type = $v;
			$this->modifiedColumns[] = EmployeePeer::REGISTRATION_TYPE;
		}

		return $this;
	} // setRegistrationType()

	/**
	 * Set the value of [product_price] column.
	 * 
	 * @param      int $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setProductPrice($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->product_price !== $v) {
			$this->product_price = $v;
			$this->modifiedColumns[] = EmployeePeer::PRODUCT_PRICE;
		}

		return $this;
	} // setProductPrice()

	/**
	 * Set the value of [product_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setProductId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->product_id !== $v) {
			$this->product_id = $v;
			$this->modifiedColumns[] = EmployeePeer::PRODUCT_ID;
		}

		return $this;
	} // setProductId()

	/**
	 * Set the value of [country_code] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setCountryCode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->country_code !== $v) {
			$this->country_code = $v;
			$this->modifiedColumns[] = EmployeePeer::COUNTRY_CODE;
		}

		return $this;
	} // setCountryCode()

	/**
	 * Set the value of [country_mobile_number] column.
	 * 
	 * @param      string $v new value
	 * @return     Employee The current object (for fluent API support)
	 */
	public function setCountryMobileNumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->country_mobile_number !== $v) {
			$this->country_mobile_number = $v;
			$this->modifiedColumns[] = EmployeePeer::COUNTRY_MOBILE_NUMBER;
		}

		return $this;
	} // setCountryMobileNumber()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->company_id = ($row[$startcol + 1] !== null) ? (int) $row[$startcol + 1] : null;
			$this->first_name = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->last_name = ($row[$startcol + 3] !== null) ? (string) $row[$startcol + 3] : null;
			$this->email = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->mobile_model = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->mobile_number = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->created_at = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->app_code = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->is_app_registered = ($row[$startcol + 9] !== null) ? (boolean) $row[$startcol + 9] : null;
			$this->password = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->registration_type = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->product_price = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->product_id = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->country_code = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->country_mobile_number = ($row[$startcol + 15] !== null) ? (string) $row[$startcol + 15] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 16; // 16 = EmployeePeer::NUM_COLUMNS - EmployeePeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Employee object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aCompany !== null && $this->company_id !== $this->aCompany->getId()) {
			$this->aCompany = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EmployeePeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = EmployeePeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aCompany = null;
			$this->collCdrLogs = null;
			$this->lastCdrLogCriteria = null;

			$this->collEmployeeProducts = null;
			$this->lastEmployeeProductCriteria = null;

			$this->collSupportActivitys = null;
			$this->lastSupportActivityCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseEmployee:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EmployeePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			EmployeePeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseEmployee:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseEmployee:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(EmployeePeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(EmployeePeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseEmployee:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			EmployeePeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aCompany !== null) {
				if ($this->aCompany->isModified() || $this->aCompany->isNew()) {
					$affectedRows += $this->aCompany->save($con);
				}
				$this->setCompany($this->aCompany);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = EmployeePeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = EmployeePeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += EmployeePeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collCdrLogs !== null) {
				foreach ($this->collCdrLogs as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEmployeeProducts !== null) {
				foreach ($this->collEmployeeProducts as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSupportActivitys !== null) {
				foreach ($this->collSupportActivitys as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aCompany !== null) {
				if (!$this->aCompany->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCompany->getValidationFailures());
				}
			}


			if (($retval = EmployeePeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collCdrLogs !== null) {
					foreach ($this->collCdrLogs as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEmployeeProducts !== null) {
					foreach ($this->collEmployeeProducts as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSupportActivitys !== null) {
					foreach ($this->collSupportActivitys as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = EmployeePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getCompanyId();
				break;
			case 2:
				return $this->getFirstName();
				break;
			case 3:
				return $this->getLastName();
				break;
			case 4:
				return $this->getEmail();
				break;
			case 5:
				return $this->getMobileModel();
				break;
			case 6:
				return $this->getMobileNumber();
				break;
			case 7:
				return $this->getCreatedAt();
				break;
			case 8:
				return $this->getAppCode();
				break;
			case 9:
				return $this->getIsAppRegistered();
				break;
			case 10:
				return $this->getPassword();
				break;
			case 11:
				return $this->getRegistrationType();
				break;
			case 12:
				return $this->getProductPrice();
				break;
			case 13:
				return $this->getProductId();
				break;
			case 14:
				return $this->getCountryCode();
				break;
			case 15:
				return $this->getCountryMobileNumber();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = EmployeePeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getCompanyId(),
			$keys[2] => $this->getFirstName(),
			$keys[3] => $this->getLastName(),
			$keys[4] => $this->getEmail(),
			$keys[5] => $this->getMobileModel(),
			$keys[6] => $this->getMobileNumber(),
			$keys[7] => $this->getCreatedAt(),
			$keys[8] => $this->getAppCode(),
			$keys[9] => $this->getIsAppRegistered(),
			$keys[10] => $this->getPassword(),
			$keys[11] => $this->getRegistrationType(),
			$keys[12] => $this->getProductPrice(),
			$keys[13] => $this->getProductId(),
			$keys[14] => $this->getCountryCode(),
			$keys[15] => $this->getCountryMobileNumber(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = EmployeePeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setCompanyId($value);
				break;
			case 2:
				$this->setFirstName($value);
				break;
			case 3:
				$this->setLastName($value);
				break;
			case 4:
				$this->setEmail($value);
				break;
			case 5:
				$this->setMobileModel($value);
				break;
			case 6:
				$this->setMobileNumber($value);
				break;
			case 7:
				$this->setCreatedAt($value);
				break;
			case 8:
				$this->setAppCode($value);
				break;
			case 9:
				$this->setIsAppRegistered($value);
				break;
			case 10:
				$this->setPassword($value);
				break;
			case 11:
				$this->setRegistrationType($value);
				break;
			case 12:
				$this->setProductPrice($value);
				break;
			case 13:
				$this->setProductId($value);
				break;
			case 14:
				$this->setCountryCode($value);
				break;
			case 15:
				$this->setCountryMobileNumber($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = EmployeePeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setCompanyId($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setFirstName($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setLastName($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setEmail($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setMobileModel($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setMobileNumber($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setCreatedAt($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setAppCode($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setIsAppRegistered($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setPassword($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setRegistrationType($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setProductPrice($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setProductId($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setCountryCode($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setCountryMobileNumber($arr[$keys[15]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(EmployeePeer::DATABASE_NAME);

		if ($this->isColumnModified(EmployeePeer::ID)) $criteria->add(EmployeePeer::ID, $this->id);
		if ($this->isColumnModified(EmployeePeer::COMPANY_ID)) $criteria->add(EmployeePeer::COMPANY_ID, $this->company_id);
		if ($this->isColumnModified(EmployeePeer::FIRST_NAME)) $criteria->add(EmployeePeer::FIRST_NAME, $this->first_name);
		if ($this->isColumnModified(EmployeePeer::LAST_NAME)) $criteria->add(EmployeePeer::LAST_NAME, $this->last_name);
		if ($this->isColumnModified(EmployeePeer::EMAIL)) $criteria->add(EmployeePeer::EMAIL, $this->email);
		if ($this->isColumnModified(EmployeePeer::MOBILE_MODEL)) $criteria->add(EmployeePeer::MOBILE_MODEL, $this->mobile_model);
		if ($this->isColumnModified(EmployeePeer::MOBILE_NUMBER)) $criteria->add(EmployeePeer::MOBILE_NUMBER, $this->mobile_number);
		if ($this->isColumnModified(EmployeePeer::CREATED_AT)) $criteria->add(EmployeePeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(EmployeePeer::APP_CODE)) $criteria->add(EmployeePeer::APP_CODE, $this->app_code);
		if ($this->isColumnModified(EmployeePeer::IS_APP_REGISTERED)) $criteria->add(EmployeePeer::IS_APP_REGISTERED, $this->is_app_registered);
		if ($this->isColumnModified(EmployeePeer::PASSWORD)) $criteria->add(EmployeePeer::PASSWORD, $this->password);
		if ($this->isColumnModified(EmployeePeer::REGISTRATION_TYPE)) $criteria->add(EmployeePeer::REGISTRATION_TYPE, $this->registration_type);
		if ($this->isColumnModified(EmployeePeer::PRODUCT_PRICE)) $criteria->add(EmployeePeer::PRODUCT_PRICE, $this->product_price);
		if ($this->isColumnModified(EmployeePeer::PRODUCT_ID)) $criteria->add(EmployeePeer::PRODUCT_ID, $this->product_id);
		if ($this->isColumnModified(EmployeePeer::COUNTRY_CODE)) $criteria->add(EmployeePeer::COUNTRY_CODE, $this->country_code);
		if ($this->isColumnModified(EmployeePeer::COUNTRY_MOBILE_NUMBER)) $criteria->add(EmployeePeer::COUNTRY_MOBILE_NUMBER, $this->country_mobile_number);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(EmployeePeer::DATABASE_NAME);

		$criteria->add(EmployeePeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Employee (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setCompanyId($this->company_id);

		$copyObj->setFirstName($this->first_name);

		$copyObj->setLastName($this->last_name);

		$copyObj->setEmail($this->email);

		$copyObj->setMobileModel($this->mobile_model);

		$copyObj->setMobileNumber($this->mobile_number);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setAppCode($this->app_code);

		$copyObj->setIsAppRegistered($this->is_app_registered);

		$copyObj->setPassword($this->password);

		$copyObj->setRegistrationType($this->registration_type);

		$copyObj->setProductPrice($this->product_price);

		$copyObj->setProductId($this->product_id);

		$copyObj->setCountryCode($this->country_code);

		$copyObj->setCountryMobileNumber($this->country_mobile_number);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getCdrLogs() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCdrLog($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEmployeeProducts() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEmployeeProduct($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSupportActivitys() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSupportActivity($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Employee Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     EmployeePeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new EmployeePeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Company object.
	 *
	 * @param      Company $v
	 * @return     Employee The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCompany(Company $v = null)
	{
		if ($v === null) {
			$this->setCompanyId(NULL);
		} else {
			$this->setCompanyId($v->getId());
		}

		$this->aCompany = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Company object, it will not be re-added.
		if ($v !== null) {
			$v->addEmployee($this);
		}

		return $this;
	}


	/**
	 * Get the associated Company object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Company The associated Company object.
	 * @throws     PropelException
	 */
	public function getCompany(PropelPDO $con = null)
	{
		if ($this->aCompany === null && ($this->company_id !== null)) {
			$c = new Criteria(CompanyPeer::DATABASE_NAME);
			$c->add(CompanyPeer::ID, $this->company_id);
			$this->aCompany = CompanyPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCompany->addEmployees($this);
			 */
		}
		return $this->aCompany;
	}

	/**
	 * Clears out the collCdrLogs collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCdrLogs()
	 */
	public function clearCdrLogs()
	{
		$this->collCdrLogs = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCdrLogs collection (array).
	 *
	 * By default this just sets the collCdrLogs collection to an empty array (like clearcollCdrLogs());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCdrLogs()
	{
		$this->collCdrLogs = array();
	}

	/**
	 * Gets an array of CdrLog objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Employee has previously been saved, it will retrieve
	 * related CdrLogs from storage. If this Employee is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CdrLog[]
	 * @throws     PropelException
	 */
	public function getCdrLogs($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCdrLogs === null) {
			if ($this->isNew()) {
			   $this->collCdrLogs = array();
			} else {

				$criteria->add(CdrLogPeer::FROM_EMPLOYEE_ID, $this->id);

				CdrLogPeer::addSelectColumns($criteria);
				$this->collCdrLogs = CdrLogPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CdrLogPeer::FROM_EMPLOYEE_ID, $this->id);

				CdrLogPeer::addSelectColumns($criteria);
				if (!isset($this->lastCdrLogCriteria) || !$this->lastCdrLogCriteria->equals($criteria)) {
					$this->collCdrLogs = CdrLogPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCdrLogCriteria = $criteria;
		return $this->collCdrLogs;
	}

	/**
	 * Returns the number of related CdrLog objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CdrLog objects.
	 * @throws     PropelException
	 */
	public function countCdrLogs(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCdrLogs === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CdrLogPeer::FROM_EMPLOYEE_ID, $this->id);

				$count = CdrLogPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CdrLogPeer::FROM_EMPLOYEE_ID, $this->id);

				if (!isset($this->lastCdrLogCriteria) || !$this->lastCdrLogCriteria->equals($criteria)) {
					$count = CdrLogPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCdrLogs);
				}
			} else {
				$count = count($this->collCdrLogs);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CdrLog object to this object
	 * through the CdrLog foreign key attribute.
	 *
	 * @param      CdrLog $l CdrLog
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCdrLog(CdrLog $l)
	{
		if ($this->collCdrLogs === null) {
			$this->initCdrLogs();
		}
		if (!in_array($l, $this->collCdrLogs, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCdrLogs, $l);
			$l->setEmployee($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Employee is new, it will return
	 * an empty collection; or if this Employee has previously
	 * been saved, it will retrieve related CdrLogs from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Employee.
	 */
	public function getCdrLogsJoinDestinationRate($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCdrLogs === null) {
			if ($this->isNew()) {
				$this->collCdrLogs = array();
			} else {

				$criteria->add(CdrLogPeer::FROM_EMPLOYEE_ID, $this->id);

				$this->collCdrLogs = CdrLogPeer::doSelectJoinDestinationRate($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CdrLogPeer::FROM_EMPLOYEE_ID, $this->id);

			if (!isset($this->lastCdrLogCriteria) || !$this->lastCdrLogCriteria->equals($criteria)) {
				$this->collCdrLogs = CdrLogPeer::doSelectJoinDestinationRate($criteria, $con, $join_behavior);
			}
		}
		$this->lastCdrLogCriteria = $criteria;

		return $this->collCdrLogs;
	}

	/**
	 * Clears out the collEmployeeProducts collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEmployeeProducts()
	 */
	public function clearEmployeeProducts()
	{
		$this->collEmployeeProducts = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEmployeeProducts collection (array).
	 *
	 * By default this just sets the collEmployeeProducts collection to an empty array (like clearcollEmployeeProducts());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEmployeeProducts()
	{
		$this->collEmployeeProducts = array();
	}

	/**
	 * Gets an array of EmployeeProduct objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Employee has previously been saved, it will retrieve
	 * related EmployeeProducts from storage. If this Employee is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array EmployeeProduct[]
	 * @throws     PropelException
	 */
	public function getEmployeeProducts($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmployeeProducts === null) {
			if ($this->isNew()) {
			   $this->collEmployeeProducts = array();
			} else {

				$criteria->add(EmployeeProductPeer::EMPLOYEE_ID, $this->id);

				EmployeeProductPeer::addSelectColumns($criteria);
				$this->collEmployeeProducts = EmployeeProductPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EmployeeProductPeer::EMPLOYEE_ID, $this->id);

				EmployeeProductPeer::addSelectColumns($criteria);
				if (!isset($this->lastEmployeeProductCriteria) || !$this->lastEmployeeProductCriteria->equals($criteria)) {
					$this->collEmployeeProducts = EmployeeProductPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEmployeeProductCriteria = $criteria;
		return $this->collEmployeeProducts;
	}

	/**
	 * Returns the number of related EmployeeProduct objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related EmployeeProduct objects.
	 * @throws     PropelException
	 */
	public function countEmployeeProducts(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEmployeeProducts === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EmployeeProductPeer::EMPLOYEE_ID, $this->id);

				$count = EmployeeProductPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EmployeeProductPeer::EMPLOYEE_ID, $this->id);

				if (!isset($this->lastEmployeeProductCriteria) || !$this->lastEmployeeProductCriteria->equals($criteria)) {
					$count = EmployeeProductPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collEmployeeProducts);
				}
			} else {
				$count = count($this->collEmployeeProducts);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a EmployeeProduct object to this object
	 * through the EmployeeProduct foreign key attribute.
	 *
	 * @param      EmployeeProduct $l EmployeeProduct
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEmployeeProduct(EmployeeProduct $l)
	{
		if ($this->collEmployeeProducts === null) {
			$this->initEmployeeProducts();
		}
		if (!in_array($l, $this->collEmployeeProducts, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEmployeeProducts, $l);
			$l->setEmployee($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Employee is new, it will return
	 * an empty collection; or if this Employee has previously
	 * been saved, it will retrieve related EmployeeProducts from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Employee.
	 */
	public function getEmployeeProductsJoinProduct($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmployeeProducts === null) {
			if ($this->isNew()) {
				$this->collEmployeeProducts = array();
			} else {

				$criteria->add(EmployeeProductPeer::EMPLOYEE_ID, $this->id);

				$this->collEmployeeProducts = EmployeeProductPeer::doSelectJoinProduct($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(EmployeeProductPeer::EMPLOYEE_ID, $this->id);

			if (!isset($this->lastEmployeeProductCriteria) || !$this->lastEmployeeProductCriteria->equals($criteria)) {
				$this->collEmployeeProducts = EmployeeProductPeer::doSelectJoinProduct($criteria, $con, $join_behavior);
			}
		}
		$this->lastEmployeeProductCriteria = $criteria;

		return $this->collEmployeeProducts;
	}

	/**
	 * Clears out the collSupportActivitys collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSupportActivitys()
	 */
	public function clearSupportActivitys()
	{
		$this->collSupportActivitys = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSupportActivitys collection (array).
	 *
	 * By default this just sets the collSupportActivitys collection to an empty array (like clearcollSupportActivitys());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSupportActivitys()
	{
		$this->collSupportActivitys = array();
	}

	/**
	 * Gets an array of SupportActivity objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Employee has previously been saved, it will retrieve
	 * related SupportActivitys from storage. If this Employee is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array SupportActivity[]
	 * @throws     PropelException
	 */
	public function getSupportActivitys($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSupportActivitys === null) {
			if ($this->isNew()) {
			   $this->collSupportActivitys = array();
			} else {

				$criteria->add(SupportActivityPeer::EMPLOYEE_ID, $this->id);

				SupportActivityPeer::addSelectColumns($criteria);
				$this->collSupportActivitys = SupportActivityPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SupportActivityPeer::EMPLOYEE_ID, $this->id);

				SupportActivityPeer::addSelectColumns($criteria);
				if (!isset($this->lastSupportActivityCriteria) || !$this->lastSupportActivityCriteria->equals($criteria)) {
					$this->collSupportActivitys = SupportActivityPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSupportActivityCriteria = $criteria;
		return $this->collSupportActivitys;
	}

	/**
	 * Returns the number of related SupportActivity objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related SupportActivity objects.
	 * @throws     PropelException
	 */
	public function countSupportActivitys(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSupportActivitys === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SupportActivityPeer::EMPLOYEE_ID, $this->id);

				$count = SupportActivityPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SupportActivityPeer::EMPLOYEE_ID, $this->id);

				if (!isset($this->lastSupportActivityCriteria) || !$this->lastSupportActivityCriteria->equals($criteria)) {
					$count = SupportActivityPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collSupportActivitys);
				}
			} else {
				$count = count($this->collSupportActivitys);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a SupportActivity object to this object
	 * through the SupportActivity foreign key attribute.
	 *
	 * @param      SupportActivity $l SupportActivity
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSupportActivity(SupportActivity $l)
	{
		if ($this->collSupportActivitys === null) {
			$this->initSupportActivitys();
		}
		if (!in_array($l, $this->collSupportActivitys, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSupportActivitys, $l);
			$l->setEmployee($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Employee is new, it will return
	 * an empty collection; or if this Employee has previously
	 * been saved, it will retrieve related SupportActivitys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Employee.
	 */
	public function getSupportActivitysJoinSupportIssue($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSupportActivitys === null) {
			if ($this->isNew()) {
				$this->collSupportActivitys = array();
			} else {

				$criteria->add(SupportActivityPeer::EMPLOYEE_ID, $this->id);

				$this->collSupportActivitys = SupportActivityPeer::doSelectJoinSupportIssue($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SupportActivityPeer::EMPLOYEE_ID, $this->id);

			if (!isset($this->lastSupportActivityCriteria) || !$this->lastSupportActivityCriteria->equals($criteria)) {
				$this->collSupportActivitys = SupportActivityPeer::doSelectJoinSupportIssue($criteria, $con, $join_behavior);
			}
		}
		$this->lastSupportActivityCriteria = $criteria;

		return $this->collSupportActivitys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Employee is new, it will return
	 * an empty collection; or if this Employee has previously
	 * been saved, it will retrieve related SupportActivitys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Employee.
	 */
	public function getSupportActivitysJoinUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSupportActivitys === null) {
			if ($this->isNew()) {
				$this->collSupportActivitys = array();
			} else {

				$criteria->add(SupportActivityPeer::EMPLOYEE_ID, $this->id);

				$this->collSupportActivitys = SupportActivityPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SupportActivityPeer::EMPLOYEE_ID, $this->id);

			if (!isset($this->lastSupportActivityCriteria) || !$this->lastSupportActivityCriteria->equals($criteria)) {
				$this->collSupportActivitys = SupportActivityPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastSupportActivityCriteria = $criteria;

		return $this->collSupportActivitys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Employee is new, it will return
	 * an empty collection; or if this Employee has previously
	 * been saved, it will retrieve related SupportActivitys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Employee.
	 */
	public function getSupportActivitysJoinSupportActivityStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(EmployeePeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSupportActivitys === null) {
			if ($this->isNew()) {
				$this->collSupportActivitys = array();
			} else {

				$criteria->add(SupportActivityPeer::EMPLOYEE_ID, $this->id);

				$this->collSupportActivitys = SupportActivityPeer::doSelectJoinSupportActivityStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SupportActivityPeer::EMPLOYEE_ID, $this->id);

			if (!isset($this->lastSupportActivityCriteria) || !$this->lastSupportActivityCriteria->equals($criteria)) {
				$this->collSupportActivitys = SupportActivityPeer::doSelectJoinSupportActivityStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastSupportActivityCriteria = $criteria;

		return $this->collSupportActivitys;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collCdrLogs) {
				foreach ((array) $this->collCdrLogs as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEmployeeProducts) {
				foreach ((array) $this->collEmployeeProducts as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSupportActivitys) {
				foreach ((array) $this->collSupportActivitys as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collCdrLogs = null;
		$this->collEmployeeProducts = null;
		$this->collSupportActivitys = null;
			$this->aCompany = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseEmployee:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseEmployee::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseEmployee
