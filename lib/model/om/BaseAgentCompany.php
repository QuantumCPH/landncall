<?php

/**
 * Base class that represents a row from the 'agent_company' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 12/30/11 11:22:03
 *
 * @package    lib.model.om
 */
abstract class BaseAgentCompany extends BaseObject  implements Persistent {


  const PEER = 'AgentCompanyPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        AgentCompanyPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the name field.
	 * @var        string
	 */
	protected $name;

	/**
	 * The value for the cvr_number field.
	 * @var        int
	 */
	protected $cvr_number;

	/**
	 * The value for the ean_number field.
	 * @var        int
	 */
	protected $ean_number;

	/**
	 * The value for the address field.
	 * @var        string
	 */
	protected $address;

	/**
	 * The value for the post_code field.
	 * @var        int
	 */
	protected $post_code;

	/**
	 * The value for the country_id field.
	 * @var        int
	 */
	protected $country_id;

	/**
	 * The value for the city_id field.
	 * @var        int
	 */
	protected $city_id;

	/**
	 * The value for the contact_name field.
	 * @var        string
	 */
	protected $contact_name;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the mobile_number field.
	 * @var        string
	 */
	protected $mobile_number;

	/**
	 * The value for the head_phone_number field.
	 * @var        int
	 */
	protected $head_phone_number;

	/**
	 * The value for the fax_number field.
	 * @var        int
	 */
	protected $fax_number;

	/**
	 * The value for the website field.
	 * @var        string
	 */
	protected $website;

	/**
	 * The value for the status_id field.
	 * @var        int
	 */
	protected $status_id;

	/**
	 * The value for the company_type_id field.
	 * @var        int
	 */
	protected $company_type_id;

	/**
	 * The value for the product_detail field.
	 * @var        int
	 */
	protected $product_detail;

	/**
	 * The value for the commission_period_id field.
	 * @var        int
	 */
	protected $commission_period_id;

	/**
	 * The value for the account_manager_id field.
	 * @var        int
	 */
	protected $account_manager_id;

	/**
	 * The value for the created_at field.
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the agent_commission_package_id field.
	 * @var        int
	 */
	protected $agent_commission_package_id;

	/**
	 * The value for the sms_code field.
	 * @var        string
	 */
	protected $sms_code;

	/**
	 * The value for the is_prepaid field.
	 * @var        boolean
	 */
	protected $is_prepaid;

	/**
	 * The value for the balance field.
	 * @var        double
	 */
	protected $balance;

	/**
	 * The value for the invoice_method_id field.
	 * @var        int
	 */
	protected $invoice_method_id;

	/**
	 * @var        Country
	 */
	protected $aCountry;

	/**
	 * @var        City
	 */
	protected $aCity;

	/**
	 * @var        Status
	 */
	protected $aStatus;

	/**
	 * @var        CompanyType
	 */
	protected $aCompanyType;

	/**
	 * @var        CommissionPeriod
	 */
	protected $aCommissionPeriod;

	/**
	 * @var        User
	 */
	protected $aUser;

	/**
	 * @var        AgentCommissionPackage
	 */
	protected $aAgentCommissionPackage;

	/**
	 * @var        array AgentBank[] Collection to store aggregation of AgentBank objects.
	 */
	protected $collAgentBanks;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAgentBanks.
	 */
	private $lastAgentBankCriteria = null;

	/**
	 * @var        array AgentCommission[] Collection to store aggregation of AgentCommission objects.
	 */
	protected $collAgentCommissions;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAgentCommissions.
	 */
	private $lastAgentCommissionCriteria = null;

	/**
	 * @var        array AgentProduct[] Collection to store aggregation of AgentProduct objects.
	 */
	protected $collAgentProducts;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAgentProducts.
	 */
	private $lastAgentProductCriteria = null;

	/**
	 * @var        array AgentUser[] Collection to store aggregation of AgentUser objects.
	 */
	protected $collAgentUsers;

	/**
	 * @var        Criteria The criteria used to select the current contents of collAgentUsers.
	 */
	private $lastAgentUserCriteria = null;

	/**
	 * @var        array Company[] Collection to store aggregation of Company objects.
	 */
	protected $collCompanys;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCompanys.
	 */
	private $lastCompanyCriteria = null;

	/**
	 * @var        array Customer[] Collection to store aggregation of Customer objects.
	 */
	protected $collCustomers;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCustomers.
	 */
	private $lastCustomerCriteria = null;

	/**
	 * @var        array ProductOrder[] Collection to store aggregation of ProductOrder objects.
	 */
	protected $collProductOrders;

	/**
	 * @var        Criteria The criteria used to select the current contents of collProductOrders.
	 */
	private $lastProductOrderCriteria = null;

	/**
	 * @var        array SubAgentLink[] Collection to store aggregation of SubAgentLink objects.
	 */
	protected $collSubAgentLinksRelatedByAgentCompanyId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSubAgentLinksRelatedByAgentCompanyId.
	 */
	private $lastSubAgentLinkRelatedByAgentCompanyIdCriteria = null;

	/**
	 * @var        array SubAgentLink[] Collection to store aggregation of SubAgentLink objects.
	 */
	protected $collSubAgentLinksRelatedBySubAgentId;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSubAgentLinksRelatedBySubAgentId.
	 */
	private $lastSubAgentLinkRelatedBySubAgentIdCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseAgentCompany object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [name] column value.
	 * 
	 * @return     string
	 */
	public function getName()
	{
		return $this->name;
	}

	/**
	 * Get the [cvr_number] column value.
	 * 
	 * @return     int
	 */
	public function getCvrNumber()
	{
		return $this->cvr_number;
	}

	/**
	 * Get the [ean_number] column value.
	 * 
	 * @return     int
	 */
	public function getEanNumber()
	{
		return $this->ean_number;
	}

	/**
	 * Get the [address] column value.
	 * 
	 * @return     string
	 */
	public function getAddress()
	{
		return $this->address;
	}

	/**
	 * Get the [post_code] column value.
	 * 
	 * @return     int
	 */
	public function getPostCode()
	{
		return $this->post_code;
	}

	/**
	 * Get the [country_id] column value.
	 * 
	 * @return     int
	 */
	public function getCountryId()
	{
		return $this->country_id;
	}

	/**
	 * Get the [city_id] column value.
	 * 
	 * @return     int
	 */
	public function getCityId()
	{
		return $this->city_id;
	}

	/**
	 * Get the [contact_name] column value.
	 * 
	 * @return     string
	 */
	public function getContactName()
	{
		return $this->contact_name;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [mobile_number] column value.
	 * 
	 * @return     string
	 */
	public function getMobileNumber()
	{
		return $this->mobile_number;
	}

	/**
	 * Get the [head_phone_number] column value.
	 * 
	 * @return     int
	 */
	public function getHeadPhoneNumber()
	{
		return $this->head_phone_number;
	}

	/**
	 * Get the [fax_number] column value.
	 * 
	 * @return     int
	 */
	public function getFaxNumber()
	{
		return $this->fax_number;
	}

	/**
	 * Get the [website] column value.
	 * 
	 * @return     string
	 */
	public function getWebsite()
	{
		return $this->website;
	}

	/**
	 * Get the [status_id] column value.
	 * 
	 * @return     int
	 */
	public function getStatusId()
	{
		return $this->status_id;
	}

	/**
	 * Get the [company_type_id] column value.
	 * 
	 * @return     int
	 */
	public function getCompanyTypeId()
	{
		return $this->company_type_id;
	}

	/**
	 * Get the [product_detail] column value.
	 * 
	 * @return     int
	 */
	public function getProductDetail()
	{
		return $this->product_detail;
	}

	/**
	 * Get the [commission_period_id] column value.
	 * 
	 * @return     int
	 */
	public function getCommissionPeriodId()
	{
		return $this->commission_period_id;
	}

	/**
	 * Get the [account_manager_id] column value.
	 * 
	 * @return     int
	 */
	public function getAccountManagerId()
	{
		return $this->account_manager_id;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [agent_commission_package_id] column value.
	 * 
	 * @return     int
	 */
	public function getAgentCommissionPackageId()
	{
		return $this->agent_commission_package_id;
	}

	/**
	 * Get the [sms_code] column value.
	 * 
	 * @return     string
	 */
	public function getSmsCode()
	{
		return $this->sms_code;
	}

	/**
	 * Get the [is_prepaid] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsPrepaid()
	{
		return $this->is_prepaid;
	}

	/**
	 * Get the [balance] column value.
	 * 
	 * @return     double
	 */
	public function getBalance()
	{
		return $this->balance;
	}

	/**
	 * Get the [invoice_method_id] column value.
	 * 
	 * @return     int
	 */
	public function getInvoiceMethodId()
	{
		return $this->invoice_method_id;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     AgentCompany The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = AgentCompanyPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [name] column.
	 * 
	 * @param      string $v new value
	 * @return     AgentCompany The current object (for fluent API support)
	 */
	public function setName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->name !== $v) {
			$this->name = $v;
			$this->modifiedColumns[] = AgentCompanyPeer::NAME;
		}

		return $this;
	} // setName()

	/**
	 * Set the value of [cvr_number] column.
	 * 
	 * @param      int $v new value
	 * @return     AgentCompany The current object (for fluent API support)
	 */
	public function setCvrNumber($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cvr_number !== $v) {
			$this->cvr_number = $v;
			$this->modifiedColumns[] = AgentCompanyPeer::CVR_NUMBER;
		}

		return $this;
	} // setCvrNumber()

	/**
	 * Set the value of [ean_number] column.
	 * 
	 * @param      int $v new value
	 * @return     AgentCompany The current object (for fluent API support)
	 */
	public function setEanNumber($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->ean_number !== $v) {
			$this->ean_number = $v;
			$this->modifiedColumns[] = AgentCompanyPeer::EAN_NUMBER;
		}

		return $this;
	} // setEanNumber()

	/**
	 * Set the value of [address] column.
	 * 
	 * @param      string $v new value
	 * @return     AgentCompany The current object (for fluent API support)
	 */
	public function setAddress($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->address !== $v) {
			$this->address = $v;
			$this->modifiedColumns[] = AgentCompanyPeer::ADDRESS;
		}

		return $this;
	} // setAddress()

	/**
	 * Set the value of [post_code] column.
	 * 
	 * @param      int $v new value
	 * @return     AgentCompany The current object (for fluent API support)
	 */
	public function setPostCode($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->post_code !== $v) {
			$this->post_code = $v;
			$this->modifiedColumns[] = AgentCompanyPeer::POST_CODE;
		}

		return $this;
	} // setPostCode()

	/**
	 * Set the value of [country_id] column.
	 * 
	 * @param      int $v new value
	 * @return     AgentCompany The current object (for fluent API support)
	 */
	public function setCountryId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->country_id !== $v) {
			$this->country_id = $v;
			$this->modifiedColumns[] = AgentCompanyPeer::COUNTRY_ID;
		}

		if ($this->aCountry !== null && $this->aCountry->getId() !== $v) {
			$this->aCountry = null;
		}

		return $this;
	} // setCountryId()

	/**
	 * Set the value of [city_id] column.
	 * 
	 * @param      int $v new value
	 * @return     AgentCompany The current object (for fluent API support)
	 */
	public function setCityId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->city_id !== $v) {
			$this->city_id = $v;
			$this->modifiedColumns[] = AgentCompanyPeer::CITY_ID;
		}

		if ($this->aCity !== null && $this->aCity->getId() !== $v) {
			$this->aCity = null;
		}

		return $this;
	} // setCityId()

	/**
	 * Set the value of [contact_name] column.
	 * 
	 * @param      string $v new value
	 * @return     AgentCompany The current object (for fluent API support)
	 */
	public function setContactName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->contact_name !== $v) {
			$this->contact_name = $v;
			$this->modifiedColumns[] = AgentCompanyPeer::CONTACT_NAME;
		}

		return $this;
	} // setContactName()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     AgentCompany The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = AgentCompanyPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [mobile_number] column.
	 * 
	 * @param      string $v new value
	 * @return     AgentCompany The current object (for fluent API support)
	 */
	public function setMobileNumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mobile_number !== $v) {
			$this->mobile_number = $v;
			$this->modifiedColumns[] = AgentCompanyPeer::MOBILE_NUMBER;
		}

		return $this;
	} // setMobileNumber()

	/**
	 * Set the value of [head_phone_number] column.
	 * 
	 * @param      int $v new value
	 * @return     AgentCompany The current object (for fluent API support)
	 */
	public function setHeadPhoneNumber($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->head_phone_number !== $v) {
			$this->head_phone_number = $v;
			$this->modifiedColumns[] = AgentCompanyPeer::HEAD_PHONE_NUMBER;
		}

		return $this;
	} // setHeadPhoneNumber()

	/**
	 * Set the value of [fax_number] column.
	 * 
	 * @param      int $v new value
	 * @return     AgentCompany The current object (for fluent API support)
	 */
	public function setFaxNumber($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->fax_number !== $v) {
			$this->fax_number = $v;
			$this->modifiedColumns[] = AgentCompanyPeer::FAX_NUMBER;
		}

		return $this;
	} // setFaxNumber()

	/**
	 * Set the value of [website] column.
	 * 
	 * @param      string $v new value
	 * @return     AgentCompany The current object (for fluent API support)
	 */
	public function setWebsite($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->website !== $v) {
			$this->website = $v;
			$this->modifiedColumns[] = AgentCompanyPeer::WEBSITE;
		}

		return $this;
	} // setWebsite()

	/**
	 * Set the value of [status_id] column.
	 * 
	 * @param      int $v new value
	 * @return     AgentCompany The current object (for fluent API support)
	 */
	public function setStatusId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->status_id !== $v) {
			$this->status_id = $v;
			$this->modifiedColumns[] = AgentCompanyPeer::STATUS_ID;
		}

		if ($this->aStatus !== null && $this->aStatus->getId() !== $v) {
			$this->aStatus = null;
		}

		return $this;
	} // setStatusId()

	/**
	 * Set the value of [company_type_id] column.
	 * 
	 * @param      int $v new value
	 * @return     AgentCompany The current object (for fluent API support)
	 */
	public function setCompanyTypeId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->company_type_id !== $v) {
			$this->company_type_id = $v;
			$this->modifiedColumns[] = AgentCompanyPeer::COMPANY_TYPE_ID;
		}

		if ($this->aCompanyType !== null && $this->aCompanyType->getId() !== $v) {
			$this->aCompanyType = null;
		}

		return $this;
	} // setCompanyTypeId()

	/**
	 * Set the value of [product_detail] column.
	 * 
	 * @param      int $v new value
	 * @return     AgentCompany The current object (for fluent API support)
	 */
	public function setProductDetail($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->product_detail !== $v) {
			$this->product_detail = $v;
			$this->modifiedColumns[] = AgentCompanyPeer::PRODUCT_DETAIL;
		}

		return $this;
	} // setProductDetail()

	/**
	 * Set the value of [commission_period_id] column.
	 * 
	 * @param      int $v new value
	 * @return     AgentCompany The current object (for fluent API support)
	 */
	public function setCommissionPeriodId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->commission_period_id !== $v) {
			$this->commission_period_id = $v;
			$this->modifiedColumns[] = AgentCompanyPeer::COMMISSION_PERIOD_ID;
		}

		if ($this->aCommissionPeriod !== null && $this->aCommissionPeriod->getId() !== $v) {
			$this->aCommissionPeriod = null;
		}

		return $this;
	} // setCommissionPeriodId()

	/**
	 * Set the value of [account_manager_id] column.
	 * 
	 * @param      int $v new value
	 * @return     AgentCompany The current object (for fluent API support)
	 */
	public function setAccountManagerId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->account_manager_id !== $v) {
			$this->account_manager_id = $v;
			$this->modifiedColumns[] = AgentCompanyPeer::ACCOUNT_MANAGER_ID;
		}

		if ($this->aUser !== null && $this->aUser->getId() !== $v) {
			$this->aUser = null;
		}

		return $this;
	} // setAccountManagerId()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     AgentCompany The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = AgentCompanyPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Set the value of [agent_commission_package_id] column.
	 * 
	 * @param      int $v new value
	 * @return     AgentCompany The current object (for fluent API support)
	 */
	public function setAgentCommissionPackageId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->agent_commission_package_id !== $v) {
			$this->agent_commission_package_id = $v;
			$this->modifiedColumns[] = AgentCompanyPeer::AGENT_COMMISSION_PACKAGE_ID;
		}

		if ($this->aAgentCommissionPackage !== null && $this->aAgentCommissionPackage->getId() !== $v) {
			$this->aAgentCommissionPackage = null;
		}

		return $this;
	} // setAgentCommissionPackageId()

	/**
	 * Set the value of [sms_code] column.
	 * 
	 * @param      string $v new value
	 * @return     AgentCompany The current object (for fluent API support)
	 */
	public function setSmsCode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->sms_code !== $v) {
			$this->sms_code = $v;
			$this->modifiedColumns[] = AgentCompanyPeer::SMS_CODE;
		}

		return $this;
	} // setSmsCode()

	/**
	 * Set the value of [is_prepaid] column.
	 * 
	 * @param      boolean $v new value
	 * @return     AgentCompany The current object (for fluent API support)
	 */
	public function setIsPrepaid($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_prepaid !== $v) {
			$this->is_prepaid = $v;
			$this->modifiedColumns[] = AgentCompanyPeer::IS_PREPAID;
		}

		return $this;
	} // setIsPrepaid()

	/**
	 * Set the value of [balance] column.
	 * 
	 * @param      double $v new value
	 * @return     AgentCompany The current object (for fluent API support)
	 */
	public function setBalance($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->balance !== $v) {
			$this->balance = $v;
			$this->modifiedColumns[] = AgentCompanyPeer::BALANCE;
		}

		return $this;
	} // setBalance()

	/**
	 * Set the value of [invoice_method_id] column.
	 * 
	 * @param      int $v new value
	 * @return     AgentCompany The current object (for fluent API support)
	 */
	public function setInvoiceMethodId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->invoice_method_id !== $v) {
			$this->invoice_method_id = $v;
			$this->modifiedColumns[] = AgentCompanyPeer::INVOICE_METHOD_ID;
		}

		return $this;
	} // setInvoiceMethodId()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array())) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->name = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->cvr_number = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->ean_number = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->address = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->post_code = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->country_id = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->city_id = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->contact_name = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->email = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->mobile_number = ($row[$startcol + 10] !== null) ? (string) $row[$startcol + 10] : null;
			$this->head_phone_number = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->fax_number = ($row[$startcol + 12] !== null) ? (int) $row[$startcol + 12] : null;
			$this->website = ($row[$startcol + 13] !== null) ? (string) $row[$startcol + 13] : null;
			$this->status_id = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->company_type_id = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->product_detail = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->commission_period_id = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->account_manager_id = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->created_at = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->agent_commission_package_id = ($row[$startcol + 20] !== null) ? (int) $row[$startcol + 20] : null;
			$this->sms_code = ($row[$startcol + 21] !== null) ? (string) $row[$startcol + 21] : null;
			$this->is_prepaid = ($row[$startcol + 22] !== null) ? (boolean) $row[$startcol + 22] : null;
			$this->balance = ($row[$startcol + 23] !== null) ? (double) $row[$startcol + 23] : null;
			$this->invoice_method_id = ($row[$startcol + 24] !== null) ? (int) $row[$startcol + 24] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 25; // 25 = AgentCompanyPeer::NUM_COLUMNS - AgentCompanyPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating AgentCompany object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aCountry !== null && $this->country_id !== $this->aCountry->getId()) {
			$this->aCountry = null;
		}
		if ($this->aCity !== null && $this->city_id !== $this->aCity->getId()) {
			$this->aCity = null;
		}
		if ($this->aStatus !== null && $this->status_id !== $this->aStatus->getId()) {
			$this->aStatus = null;
		}
		if ($this->aCompanyType !== null && $this->company_type_id !== $this->aCompanyType->getId()) {
			$this->aCompanyType = null;
		}
		if ($this->aCommissionPeriod !== null && $this->commission_period_id !== $this->aCommissionPeriod->getId()) {
			$this->aCommissionPeriod = null;
		}
		if ($this->aUser !== null && $this->account_manager_id !== $this->aUser->getId()) {
			$this->aUser = null;
		}
		if ($this->aAgentCommissionPackage !== null && $this->agent_commission_package_id !== $this->aAgentCommissionPackage->getId()) {
			$this->aAgentCommissionPackage = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AgentCompanyPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = AgentCompanyPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aCountry = null;
			$this->aCity = null;
			$this->aStatus = null;
			$this->aCompanyType = null;
			$this->aCommissionPeriod = null;
			$this->aUser = null;
			$this->aAgentCommissionPackage = null;
			$this->collAgentBanks = null;
			$this->lastAgentBankCriteria = null;

			$this->collAgentCommissions = null;
			$this->lastAgentCommissionCriteria = null;

			$this->collAgentProducts = null;
			$this->lastAgentProductCriteria = null;

			$this->collAgentUsers = null;
			$this->lastAgentUserCriteria = null;

			$this->collCompanys = null;
			$this->lastCompanyCriteria = null;

			$this->collCustomers = null;
			$this->lastCustomerCriteria = null;

			$this->collProductOrders = null;
			$this->lastProductOrderCriteria = null;

			$this->collSubAgentLinksRelatedByAgentCompanyId = null;
			$this->lastSubAgentLinkRelatedByAgentCompanyIdCriteria = null;

			$this->collSubAgentLinksRelatedBySubAgentId = null;
			$this->lastSubAgentLinkRelatedBySubAgentIdCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseAgentCompany:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AgentCompanyPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			AgentCompanyPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseAgentCompany:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseAgentCompany:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(AgentCompanyPeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(AgentCompanyPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseAgentCompany:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			AgentCompanyPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aCountry !== null) {
				if ($this->aCountry->isModified() || $this->aCountry->isNew()) {
					$affectedRows += $this->aCountry->save($con);
				}
				$this->setCountry($this->aCountry);
			}

			if ($this->aCity !== null) {
				if ($this->aCity->isModified() || $this->aCity->isNew()) {
					$affectedRows += $this->aCity->save($con);
				}
				$this->setCity($this->aCity);
			}

			if ($this->aStatus !== null) {
				if ($this->aStatus->isModified() || $this->aStatus->isNew()) {
					$affectedRows += $this->aStatus->save($con);
				}
				$this->setStatus($this->aStatus);
			}

			if ($this->aCompanyType !== null) {
				if ($this->aCompanyType->isModified() || $this->aCompanyType->isNew()) {
					$affectedRows += $this->aCompanyType->save($con);
				}
				$this->setCompanyType($this->aCompanyType);
			}

			if ($this->aCommissionPeriod !== null) {
				if ($this->aCommissionPeriod->isModified() || $this->aCommissionPeriod->isNew()) {
					$affectedRows += $this->aCommissionPeriod->save($con);
				}
				$this->setCommissionPeriod($this->aCommissionPeriod);
			}

			if ($this->aUser !== null) {
				if ($this->aUser->isModified() || $this->aUser->isNew()) {
					$affectedRows += $this->aUser->save($con);
				}
				$this->setUser($this->aUser);
			}

			if ($this->aAgentCommissionPackage !== null) {
				if ($this->aAgentCommissionPackage->isModified() || $this->aAgentCommissionPackage->isNew()) {
					$affectedRows += $this->aAgentCommissionPackage->save($con);
				}
				$this->setAgentCommissionPackage($this->aAgentCommissionPackage);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = AgentCompanyPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = AgentCompanyPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += AgentCompanyPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collAgentBanks !== null) {
				foreach ($this->collAgentBanks as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAgentCommissions !== null) {
				foreach ($this->collAgentCommissions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAgentProducts !== null) {
				foreach ($this->collAgentProducts as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collAgentUsers !== null) {
				foreach ($this->collAgentUsers as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCompanys !== null) {
				foreach ($this->collCompanys as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCustomers !== null) {
				foreach ($this->collCustomers as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collProductOrders !== null) {
				foreach ($this->collProductOrders as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSubAgentLinksRelatedByAgentCompanyId !== null) {
				foreach ($this->collSubAgentLinksRelatedByAgentCompanyId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSubAgentLinksRelatedBySubAgentId !== null) {
				foreach ($this->collSubAgentLinksRelatedBySubAgentId as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aCountry !== null) {
				if (!$this->aCountry->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCountry->getValidationFailures());
				}
			}

			if ($this->aCity !== null) {
				if (!$this->aCity->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCity->getValidationFailures());
				}
			}

			if ($this->aStatus !== null) {
				if (!$this->aStatus->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aStatus->getValidationFailures());
				}
			}

			if ($this->aCompanyType !== null) {
				if (!$this->aCompanyType->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCompanyType->getValidationFailures());
				}
			}

			if ($this->aCommissionPeriod !== null) {
				if (!$this->aCommissionPeriod->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCommissionPeriod->getValidationFailures());
				}
			}

			if ($this->aUser !== null) {
				if (!$this->aUser->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aUser->getValidationFailures());
				}
			}

			if ($this->aAgentCommissionPackage !== null) {
				if (!$this->aAgentCommissionPackage->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAgentCommissionPackage->getValidationFailures());
				}
			}


			if (($retval = AgentCompanyPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collAgentBanks !== null) {
					foreach ($this->collAgentBanks as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAgentCommissions !== null) {
					foreach ($this->collAgentCommissions as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAgentProducts !== null) {
					foreach ($this->collAgentProducts as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collAgentUsers !== null) {
					foreach ($this->collAgentUsers as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCompanys !== null) {
					foreach ($this->collCompanys as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCustomers !== null) {
					foreach ($this->collCustomers as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collProductOrders !== null) {
					foreach ($this->collProductOrders as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSubAgentLinksRelatedByAgentCompanyId !== null) {
					foreach ($this->collSubAgentLinksRelatedByAgentCompanyId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSubAgentLinksRelatedBySubAgentId !== null) {
					foreach ($this->collSubAgentLinksRelatedBySubAgentId as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = AgentCompanyPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getName();
				break;
			case 2:
				return $this->getCvrNumber();
				break;
			case 3:
				return $this->getEanNumber();
				break;
			case 4:
				return $this->getAddress();
				break;
			case 5:
				return $this->getPostCode();
				break;
			case 6:
				return $this->getCountryId();
				break;
			case 7:
				return $this->getCityId();
				break;
			case 8:
				return $this->getContactName();
				break;
			case 9:
				return $this->getEmail();
				break;
			case 10:
				return $this->getMobileNumber();
				break;
			case 11:
				return $this->getHeadPhoneNumber();
				break;
			case 12:
				return $this->getFaxNumber();
				break;
			case 13:
				return $this->getWebsite();
				break;
			case 14:
				return $this->getStatusId();
				break;
			case 15:
				return $this->getCompanyTypeId();
				break;
			case 16:
				return $this->getProductDetail();
				break;
			case 17:
				return $this->getCommissionPeriodId();
				break;
			case 18:
				return $this->getAccountManagerId();
				break;
			case 19:
				return $this->getCreatedAt();
				break;
			case 20:
				return $this->getAgentCommissionPackageId();
				break;
			case 21:
				return $this->getSmsCode();
				break;
			case 22:
				return $this->getIsPrepaid();
				break;
			case 23:
				return $this->getBalance();
				break;
			case 24:
				return $this->getInvoiceMethodId();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = AgentCompanyPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getName(),
			$keys[2] => $this->getCvrNumber(),
			$keys[3] => $this->getEanNumber(),
			$keys[4] => $this->getAddress(),
			$keys[5] => $this->getPostCode(),
			$keys[6] => $this->getCountryId(),
			$keys[7] => $this->getCityId(),
			$keys[8] => $this->getContactName(),
			$keys[9] => $this->getEmail(),
			$keys[10] => $this->getMobileNumber(),
			$keys[11] => $this->getHeadPhoneNumber(),
			$keys[12] => $this->getFaxNumber(),
			$keys[13] => $this->getWebsite(),
			$keys[14] => $this->getStatusId(),
			$keys[15] => $this->getCompanyTypeId(),
			$keys[16] => $this->getProductDetail(),
			$keys[17] => $this->getCommissionPeriodId(),
			$keys[18] => $this->getAccountManagerId(),
			$keys[19] => $this->getCreatedAt(),
			$keys[20] => $this->getAgentCommissionPackageId(),
			$keys[21] => $this->getSmsCode(),
			$keys[22] => $this->getIsPrepaid(),
			$keys[23] => $this->getBalance(),
			$keys[24] => $this->getInvoiceMethodId(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = AgentCompanyPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setName($value);
				break;
			case 2:
				$this->setCvrNumber($value);
				break;
			case 3:
				$this->setEanNumber($value);
				break;
			case 4:
				$this->setAddress($value);
				break;
			case 5:
				$this->setPostCode($value);
				break;
			case 6:
				$this->setCountryId($value);
				break;
			case 7:
				$this->setCityId($value);
				break;
			case 8:
				$this->setContactName($value);
				break;
			case 9:
				$this->setEmail($value);
				break;
			case 10:
				$this->setMobileNumber($value);
				break;
			case 11:
				$this->setHeadPhoneNumber($value);
				break;
			case 12:
				$this->setFaxNumber($value);
				break;
			case 13:
				$this->setWebsite($value);
				break;
			case 14:
				$this->setStatusId($value);
				break;
			case 15:
				$this->setCompanyTypeId($value);
				break;
			case 16:
				$this->setProductDetail($value);
				break;
			case 17:
				$this->setCommissionPeriodId($value);
				break;
			case 18:
				$this->setAccountManagerId($value);
				break;
			case 19:
				$this->setCreatedAt($value);
				break;
			case 20:
				$this->setAgentCommissionPackageId($value);
				break;
			case 21:
				$this->setSmsCode($value);
				break;
			case 22:
				$this->setIsPrepaid($value);
				break;
			case 23:
				$this->setBalance($value);
				break;
			case 24:
				$this->setInvoiceMethodId($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = AgentCompanyPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setName($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setCvrNumber($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setEanNumber($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setAddress($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setPostCode($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setCountryId($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setCityId($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setContactName($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setEmail($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setMobileNumber($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setHeadPhoneNumber($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setFaxNumber($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setWebsite($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setStatusId($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setCompanyTypeId($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setProductDetail($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setCommissionPeriodId($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setAccountManagerId($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setCreatedAt($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setAgentCommissionPackageId($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setSmsCode($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setIsPrepaid($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setBalance($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setInvoiceMethodId($arr[$keys[24]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);

		if ($this->isColumnModified(AgentCompanyPeer::ID)) $criteria->add(AgentCompanyPeer::ID, $this->id);
		if ($this->isColumnModified(AgentCompanyPeer::NAME)) $criteria->add(AgentCompanyPeer::NAME, $this->name);
		if ($this->isColumnModified(AgentCompanyPeer::CVR_NUMBER)) $criteria->add(AgentCompanyPeer::CVR_NUMBER, $this->cvr_number);
		if ($this->isColumnModified(AgentCompanyPeer::EAN_NUMBER)) $criteria->add(AgentCompanyPeer::EAN_NUMBER, $this->ean_number);
		if ($this->isColumnModified(AgentCompanyPeer::ADDRESS)) $criteria->add(AgentCompanyPeer::ADDRESS, $this->address);
		if ($this->isColumnModified(AgentCompanyPeer::POST_CODE)) $criteria->add(AgentCompanyPeer::POST_CODE, $this->post_code);
		if ($this->isColumnModified(AgentCompanyPeer::COUNTRY_ID)) $criteria->add(AgentCompanyPeer::COUNTRY_ID, $this->country_id);
		if ($this->isColumnModified(AgentCompanyPeer::CITY_ID)) $criteria->add(AgentCompanyPeer::CITY_ID, $this->city_id);
		if ($this->isColumnModified(AgentCompanyPeer::CONTACT_NAME)) $criteria->add(AgentCompanyPeer::CONTACT_NAME, $this->contact_name);
		if ($this->isColumnModified(AgentCompanyPeer::EMAIL)) $criteria->add(AgentCompanyPeer::EMAIL, $this->email);
		if ($this->isColumnModified(AgentCompanyPeer::MOBILE_NUMBER)) $criteria->add(AgentCompanyPeer::MOBILE_NUMBER, $this->mobile_number);
		if ($this->isColumnModified(AgentCompanyPeer::HEAD_PHONE_NUMBER)) $criteria->add(AgentCompanyPeer::HEAD_PHONE_NUMBER, $this->head_phone_number);
		if ($this->isColumnModified(AgentCompanyPeer::FAX_NUMBER)) $criteria->add(AgentCompanyPeer::FAX_NUMBER, $this->fax_number);
		if ($this->isColumnModified(AgentCompanyPeer::WEBSITE)) $criteria->add(AgentCompanyPeer::WEBSITE, $this->website);
		if ($this->isColumnModified(AgentCompanyPeer::STATUS_ID)) $criteria->add(AgentCompanyPeer::STATUS_ID, $this->status_id);
		if ($this->isColumnModified(AgentCompanyPeer::COMPANY_TYPE_ID)) $criteria->add(AgentCompanyPeer::COMPANY_TYPE_ID, $this->company_type_id);
		if ($this->isColumnModified(AgentCompanyPeer::PRODUCT_DETAIL)) $criteria->add(AgentCompanyPeer::PRODUCT_DETAIL, $this->product_detail);
		if ($this->isColumnModified(AgentCompanyPeer::COMMISSION_PERIOD_ID)) $criteria->add(AgentCompanyPeer::COMMISSION_PERIOD_ID, $this->commission_period_id);
		if ($this->isColumnModified(AgentCompanyPeer::ACCOUNT_MANAGER_ID)) $criteria->add(AgentCompanyPeer::ACCOUNT_MANAGER_ID, $this->account_manager_id);
		if ($this->isColumnModified(AgentCompanyPeer::CREATED_AT)) $criteria->add(AgentCompanyPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(AgentCompanyPeer::AGENT_COMMISSION_PACKAGE_ID)) $criteria->add(AgentCompanyPeer::AGENT_COMMISSION_PACKAGE_ID, $this->agent_commission_package_id);
		if ($this->isColumnModified(AgentCompanyPeer::SMS_CODE)) $criteria->add(AgentCompanyPeer::SMS_CODE, $this->sms_code);
		if ($this->isColumnModified(AgentCompanyPeer::IS_PREPAID)) $criteria->add(AgentCompanyPeer::IS_PREPAID, $this->is_prepaid);
		if ($this->isColumnModified(AgentCompanyPeer::BALANCE)) $criteria->add(AgentCompanyPeer::BALANCE, $this->balance);
		if ($this->isColumnModified(AgentCompanyPeer::INVOICE_METHOD_ID)) $criteria->add(AgentCompanyPeer::INVOICE_METHOD_ID, $this->invoice_method_id);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);

		$criteria->add(AgentCompanyPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of AgentCompany (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setName($this->name);

		$copyObj->setCvrNumber($this->cvr_number);

		$copyObj->setEanNumber($this->ean_number);

		$copyObj->setAddress($this->address);

		$copyObj->setPostCode($this->post_code);

		$copyObj->setCountryId($this->country_id);

		$copyObj->setCityId($this->city_id);

		$copyObj->setContactName($this->contact_name);

		$copyObj->setEmail($this->email);

		$copyObj->setMobileNumber($this->mobile_number);

		$copyObj->setHeadPhoneNumber($this->head_phone_number);

		$copyObj->setFaxNumber($this->fax_number);

		$copyObj->setWebsite($this->website);

		$copyObj->setStatusId($this->status_id);

		$copyObj->setCompanyTypeId($this->company_type_id);

		$copyObj->setProductDetail($this->product_detail);

		$copyObj->setCommissionPeriodId($this->commission_period_id);

		$copyObj->setAccountManagerId($this->account_manager_id);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setAgentCommissionPackageId($this->agent_commission_package_id);

		$copyObj->setSmsCode($this->sms_code);

		$copyObj->setIsPrepaid($this->is_prepaid);

		$copyObj->setBalance($this->balance);

		$copyObj->setInvoiceMethodId($this->invoice_method_id);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getAgentBanks() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAgentBank($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAgentCommissions() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAgentCommission($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAgentProducts() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAgentProduct($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getAgentUsers() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addAgentUser($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCompanys() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCompany($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCustomers() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCustomer($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getProductOrders() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addProductOrder($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSubAgentLinksRelatedByAgentCompanyId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSubAgentLinkRelatedByAgentCompanyId($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSubAgentLinksRelatedBySubAgentId() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSubAgentLinkRelatedBySubAgentId($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     AgentCompany Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     AgentCompanyPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new AgentCompanyPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Country object.
	 *
	 * @param      Country $v
	 * @return     AgentCompany The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCountry(Country $v = null)
	{
		if ($v === null) {
			$this->setCountryId(NULL);
		} else {
			$this->setCountryId($v->getId());
		}

		$this->aCountry = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Country object, it will not be re-added.
		if ($v !== null) {
			$v->addAgentCompany($this);
		}

		return $this;
	}


	/**
	 * Get the associated Country object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Country The associated Country object.
	 * @throws     PropelException
	 */
	public function getCountry(PropelPDO $con = null)
	{
		if ($this->aCountry === null && ($this->country_id !== null)) {
			$c = new Criteria(CountryPeer::DATABASE_NAME);
			$c->add(CountryPeer::ID, $this->country_id);
			$this->aCountry = CountryPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCountry->addAgentCompanys($this);
			 */
		}
		return $this->aCountry;
	}

	/**
	 * Declares an association between this object and a City object.
	 *
	 * @param      City $v
	 * @return     AgentCompany The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCity(City $v = null)
	{
		if ($v === null) {
			$this->setCityId(NULL);
		} else {
			$this->setCityId($v->getId());
		}

		$this->aCity = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the City object, it will not be re-added.
		if ($v !== null) {
			$v->addAgentCompany($this);
		}

		return $this;
	}


	/**
	 * Get the associated City object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     City The associated City object.
	 * @throws     PropelException
	 */
	public function getCity(PropelPDO $con = null)
	{
		if ($this->aCity === null && ($this->city_id !== null)) {
			$c = new Criteria(CityPeer::DATABASE_NAME);
			$c->add(CityPeer::ID, $this->city_id);
			$this->aCity = CityPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCity->addAgentCompanys($this);
			 */
		}
		return $this->aCity;
	}

	/**
	 * Declares an association between this object and a Status object.
	 *
	 * @param      Status $v
	 * @return     AgentCompany The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setStatus(Status $v = null)
	{
		if ($v === null) {
			$this->setStatusId(NULL);
		} else {
			$this->setStatusId($v->getId());
		}

		$this->aStatus = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Status object, it will not be re-added.
		if ($v !== null) {
			$v->addAgentCompany($this);
		}

		return $this;
	}


	/**
	 * Get the associated Status object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Status The associated Status object.
	 * @throws     PropelException
	 */
	public function getStatus(PropelPDO $con = null)
	{
		if ($this->aStatus === null && ($this->status_id !== null)) {
			$c = new Criteria(StatusPeer::DATABASE_NAME);
			$c->add(StatusPeer::ID, $this->status_id);
			$this->aStatus = StatusPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aStatus->addAgentCompanys($this);
			 */
		}
		return $this->aStatus;
	}

	/**
	 * Declares an association between this object and a CompanyType object.
	 *
	 * @param      CompanyType $v
	 * @return     AgentCompany The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCompanyType(CompanyType $v = null)
	{
		if ($v === null) {
			$this->setCompanyTypeId(NULL);
		} else {
			$this->setCompanyTypeId($v->getId());
		}

		$this->aCompanyType = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the CompanyType object, it will not be re-added.
		if ($v !== null) {
			$v->addAgentCompany($this);
		}

		return $this;
	}


	/**
	 * Get the associated CompanyType object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     CompanyType The associated CompanyType object.
	 * @throws     PropelException
	 */
	public function getCompanyType(PropelPDO $con = null)
	{
		if ($this->aCompanyType === null && ($this->company_type_id !== null)) {
			$c = new Criteria(CompanyTypePeer::DATABASE_NAME);
			$c->add(CompanyTypePeer::ID, $this->company_type_id);
			$this->aCompanyType = CompanyTypePeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCompanyType->addAgentCompanys($this);
			 */
		}
		return $this->aCompanyType;
	}

	/**
	 * Declares an association between this object and a CommissionPeriod object.
	 *
	 * @param      CommissionPeriod $v
	 * @return     AgentCompany The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCommissionPeriod(CommissionPeriod $v = null)
	{
		if ($v === null) {
			$this->setCommissionPeriodId(NULL);
		} else {
			$this->setCommissionPeriodId($v->getId());
		}

		$this->aCommissionPeriod = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the CommissionPeriod object, it will not be re-added.
		if ($v !== null) {
			$v->addAgentCompany($this);
		}

		return $this;
	}


	/**
	 * Get the associated CommissionPeriod object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     CommissionPeriod The associated CommissionPeriod object.
	 * @throws     PropelException
	 */
	public function getCommissionPeriod(PropelPDO $con = null)
	{
		if ($this->aCommissionPeriod === null && ($this->commission_period_id !== null)) {
			$c = new Criteria(CommissionPeriodPeer::DATABASE_NAME);
			$c->add(CommissionPeriodPeer::ID, $this->commission_period_id);
			$this->aCommissionPeriod = CommissionPeriodPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCommissionPeriod->addAgentCompanys($this);
			 */
		}
		return $this->aCommissionPeriod;
	}

	/**
	 * Declares an association between this object and a User object.
	 *
	 * @param      User $v
	 * @return     AgentCompany The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setUser(User $v = null)
	{
		if ($v === null) {
			$this->setAccountManagerId(NULL);
		} else {
			$this->setAccountManagerId($v->getId());
		}

		$this->aUser = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the User object, it will not be re-added.
		if ($v !== null) {
			$v->addAgentCompany($this);
		}

		return $this;
	}


	/**
	 * Get the associated User object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     User The associated User object.
	 * @throws     PropelException
	 */
	public function getUser(PropelPDO $con = null)
	{
		if ($this->aUser === null && ($this->account_manager_id !== null)) {
			$c = new Criteria(UserPeer::DATABASE_NAME);
			$c->add(UserPeer::ID, $this->account_manager_id);
			$this->aUser = UserPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aUser->addAgentCompanys($this);
			 */
		}
		return $this->aUser;
	}

	/**
	 * Declares an association between this object and a AgentCommissionPackage object.
	 *
	 * @param      AgentCommissionPackage $v
	 * @return     AgentCompany The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAgentCommissionPackage(AgentCommissionPackage $v = null)
	{
		if ($v === null) {
			$this->setAgentCommissionPackageId(NULL);
		} else {
			$this->setAgentCommissionPackageId($v->getId());
		}

		$this->aAgentCommissionPackage = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the AgentCommissionPackage object, it will not be re-added.
		if ($v !== null) {
			$v->addAgentCompany($this);
		}

		return $this;
	}


	/**
	 * Get the associated AgentCommissionPackage object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     AgentCommissionPackage The associated AgentCommissionPackage object.
	 * @throws     PropelException
	 */
	public function getAgentCommissionPackage(PropelPDO $con = null)
	{
		if ($this->aAgentCommissionPackage === null && ($this->agent_commission_package_id !== null)) {
			$c = new Criteria(AgentCommissionPackagePeer::DATABASE_NAME);
			$c->add(AgentCommissionPackagePeer::ID, $this->agent_commission_package_id);
			$this->aAgentCommissionPackage = AgentCommissionPackagePeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aAgentCommissionPackage->addAgentCompanys($this);
			 */
		}
		return $this->aAgentCommissionPackage;
	}

	/**
	 * Clears out the collAgentBanks collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAgentBanks()
	 */
	public function clearAgentBanks()
	{
		$this->collAgentBanks = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAgentBanks collection (array).
	 *
	 * By default this just sets the collAgentBanks collection to an empty array (like clearcollAgentBanks());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAgentBanks()
	{
		$this->collAgentBanks = array();
	}

	/**
	 * Gets an array of AgentBank objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this AgentCompany has previously been saved, it will retrieve
	 * related AgentBanks from storage. If this AgentCompany is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AgentBank[]
	 * @throws     PropelException
	 */
	public function getAgentBanks($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAgentBanks === null) {
			if ($this->isNew()) {
			   $this->collAgentBanks = array();
			} else {

				$criteria->add(AgentBankPeer::AGENT_COMPANY_ID, $this->id);

				AgentBankPeer::addSelectColumns($criteria);
				$this->collAgentBanks = AgentBankPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AgentBankPeer::AGENT_COMPANY_ID, $this->id);

				AgentBankPeer::addSelectColumns($criteria);
				if (!isset($this->lastAgentBankCriteria) || !$this->lastAgentBankCriteria->equals($criteria)) {
					$this->collAgentBanks = AgentBankPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAgentBankCriteria = $criteria;
		return $this->collAgentBanks;
	}

	/**
	 * Returns the number of related AgentBank objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AgentBank objects.
	 * @throws     PropelException
	 */
	public function countAgentBanks(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAgentBanks === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AgentBankPeer::AGENT_COMPANY_ID, $this->id);

				$count = AgentBankPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AgentBankPeer::AGENT_COMPANY_ID, $this->id);

				if (!isset($this->lastAgentBankCriteria) || !$this->lastAgentBankCriteria->equals($criteria)) {
					$count = AgentBankPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collAgentBanks);
				}
			} else {
				$count = count($this->collAgentBanks);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a AgentBank object to this object
	 * through the AgentBank foreign key attribute.
	 *
	 * @param      AgentBank $l AgentBank
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAgentBank(AgentBank $l)
	{
		if ($this->collAgentBanks === null) {
			$this->initAgentBanks();
		}
		if (!in_array($l, $this->collAgentBanks, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAgentBanks, $l);
			$l->setAgentCompany($this);
		}
	}

	/**
	 * Clears out the collAgentCommissions collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAgentCommissions()
	 */
	public function clearAgentCommissions()
	{
		$this->collAgentCommissions = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAgentCommissions collection (array).
	 *
	 * By default this just sets the collAgentCommissions collection to an empty array (like clearcollAgentCommissions());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAgentCommissions()
	{
		$this->collAgentCommissions = array();
	}

	/**
	 * Gets an array of AgentCommission objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this AgentCompany has previously been saved, it will retrieve
	 * related AgentCommissions from storage. If this AgentCompany is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AgentCommission[]
	 * @throws     PropelException
	 */
	public function getAgentCommissions($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAgentCommissions === null) {
			if ($this->isNew()) {
			   $this->collAgentCommissions = array();
			} else {

				$criteria->add(AgentCommissionPeer::AGENT_COMPANY_ID, $this->id);

				AgentCommissionPeer::addSelectColumns($criteria);
				$this->collAgentCommissions = AgentCommissionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AgentCommissionPeer::AGENT_COMPANY_ID, $this->id);

				AgentCommissionPeer::addSelectColumns($criteria);
				if (!isset($this->lastAgentCommissionCriteria) || !$this->lastAgentCommissionCriteria->equals($criteria)) {
					$this->collAgentCommissions = AgentCommissionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAgentCommissionCriteria = $criteria;
		return $this->collAgentCommissions;
	}

	/**
	 * Returns the number of related AgentCommission objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AgentCommission objects.
	 * @throws     PropelException
	 */
	public function countAgentCommissions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAgentCommissions === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AgentCommissionPeer::AGENT_COMPANY_ID, $this->id);

				$count = AgentCommissionPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AgentCommissionPeer::AGENT_COMPANY_ID, $this->id);

				if (!isset($this->lastAgentCommissionCriteria) || !$this->lastAgentCommissionCriteria->equals($criteria)) {
					$count = AgentCommissionPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collAgentCommissions);
				}
			} else {
				$count = count($this->collAgentCommissions);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a AgentCommission object to this object
	 * through the AgentCommission foreign key attribute.
	 *
	 * @param      AgentCommission $l AgentCommission
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAgentCommission(AgentCommission $l)
	{
		if ($this->collAgentCommissions === null) {
			$this->initAgentCommissions();
		}
		if (!in_array($l, $this->collAgentCommissions, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAgentCommissions, $l);
			$l->setAgentCompany($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this AgentCompany is new, it will return
	 * an empty collection; or if this AgentCompany has previously
	 * been saved, it will retrieve related AgentCommissions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in AgentCompany.
	 */
	public function getAgentCommissionsJoinRevenueInterval($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAgentCommissions === null) {
			if ($this->isNew()) {
				$this->collAgentCommissions = array();
			} else {

				$criteria->add(AgentCommissionPeer::AGENT_COMPANY_ID, $this->id);

				$this->collAgentCommissions = AgentCommissionPeer::doSelectJoinRevenueInterval($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AgentCommissionPeer::AGENT_COMPANY_ID, $this->id);

			if (!isset($this->lastAgentCommissionCriteria) || !$this->lastAgentCommissionCriteria->equals($criteria)) {
				$this->collAgentCommissions = AgentCommissionPeer::doSelectJoinRevenueInterval($criteria, $con, $join_behavior);
			}
		}
		$this->lastAgentCommissionCriteria = $criteria;

		return $this->collAgentCommissions;
	}

	/**
	 * Clears out the collAgentProducts collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAgentProducts()
	 */
	public function clearAgentProducts()
	{
		$this->collAgentProducts = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAgentProducts collection (array).
	 *
	 * By default this just sets the collAgentProducts collection to an empty array (like clearcollAgentProducts());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAgentProducts()
	{
		$this->collAgentProducts = array();
	}

	/**
	 * Gets an array of AgentProduct objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this AgentCompany has previously been saved, it will retrieve
	 * related AgentProducts from storage. If this AgentCompany is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AgentProduct[]
	 * @throws     PropelException
	 */
	public function getAgentProducts($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAgentProducts === null) {
			if ($this->isNew()) {
			   $this->collAgentProducts = array();
			} else {

				$criteria->add(AgentProductPeer::AGENT_ID, $this->id);

				AgentProductPeer::addSelectColumns($criteria);
				$this->collAgentProducts = AgentProductPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AgentProductPeer::AGENT_ID, $this->id);

				AgentProductPeer::addSelectColumns($criteria);
				if (!isset($this->lastAgentProductCriteria) || !$this->lastAgentProductCriteria->equals($criteria)) {
					$this->collAgentProducts = AgentProductPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAgentProductCriteria = $criteria;
		return $this->collAgentProducts;
	}

	/**
	 * Returns the number of related AgentProduct objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AgentProduct objects.
	 * @throws     PropelException
	 */
	public function countAgentProducts(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAgentProducts === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AgentProductPeer::AGENT_ID, $this->id);

				$count = AgentProductPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AgentProductPeer::AGENT_ID, $this->id);

				if (!isset($this->lastAgentProductCriteria) || !$this->lastAgentProductCriteria->equals($criteria)) {
					$count = AgentProductPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collAgentProducts);
				}
			} else {
				$count = count($this->collAgentProducts);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a AgentProduct object to this object
	 * through the AgentProduct foreign key attribute.
	 *
	 * @param      AgentProduct $l AgentProduct
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAgentProduct(AgentProduct $l)
	{
		if ($this->collAgentProducts === null) {
			$this->initAgentProducts();
		}
		if (!in_array($l, $this->collAgentProducts, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAgentProducts, $l);
			$l->setAgentCompany($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this AgentCompany is new, it will return
	 * an empty collection; or if this AgentCompany has previously
	 * been saved, it will retrieve related AgentProducts from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in AgentCompany.
	 */
	public function getAgentProductsJoinProduct($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAgentProducts === null) {
			if ($this->isNew()) {
				$this->collAgentProducts = array();
			} else {

				$criteria->add(AgentProductPeer::AGENT_ID, $this->id);

				$this->collAgentProducts = AgentProductPeer::doSelectJoinProduct($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AgentProductPeer::AGENT_ID, $this->id);

			if (!isset($this->lastAgentProductCriteria) || !$this->lastAgentProductCriteria->equals($criteria)) {
				$this->collAgentProducts = AgentProductPeer::doSelectJoinProduct($criteria, $con, $join_behavior);
			}
		}
		$this->lastAgentProductCriteria = $criteria;

		return $this->collAgentProducts;
	}

	/**
	 * Clears out the collAgentUsers collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addAgentUsers()
	 */
	public function clearAgentUsers()
	{
		$this->collAgentUsers = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collAgentUsers collection (array).
	 *
	 * By default this just sets the collAgentUsers collection to an empty array (like clearcollAgentUsers());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initAgentUsers()
	{
		$this->collAgentUsers = array();
	}

	/**
	 * Gets an array of AgentUser objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this AgentCompany has previously been saved, it will retrieve
	 * related AgentUsers from storage. If this AgentCompany is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array AgentUser[]
	 * @throws     PropelException
	 */
	public function getAgentUsers($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAgentUsers === null) {
			if ($this->isNew()) {
			   $this->collAgentUsers = array();
			} else {

				$criteria->add(AgentUserPeer::AGENT_COMPANY_ID, $this->id);

				AgentUserPeer::addSelectColumns($criteria);
				$this->collAgentUsers = AgentUserPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(AgentUserPeer::AGENT_COMPANY_ID, $this->id);

				AgentUserPeer::addSelectColumns($criteria);
				if (!isset($this->lastAgentUserCriteria) || !$this->lastAgentUserCriteria->equals($criteria)) {
					$this->collAgentUsers = AgentUserPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastAgentUserCriteria = $criteria;
		return $this->collAgentUsers;
	}

	/**
	 * Returns the number of related AgentUser objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related AgentUser objects.
	 * @throws     PropelException
	 */
	public function countAgentUsers(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collAgentUsers === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(AgentUserPeer::AGENT_COMPANY_ID, $this->id);

				$count = AgentUserPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(AgentUserPeer::AGENT_COMPANY_ID, $this->id);

				if (!isset($this->lastAgentUserCriteria) || !$this->lastAgentUserCriteria->equals($criteria)) {
					$count = AgentUserPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collAgentUsers);
				}
			} else {
				$count = count($this->collAgentUsers);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a AgentUser object to this object
	 * through the AgentUser foreign key attribute.
	 *
	 * @param      AgentUser $l AgentUser
	 * @return     void
	 * @throws     PropelException
	 */
	public function addAgentUser(AgentUser $l)
	{
		if ($this->collAgentUsers === null) {
			$this->initAgentUsers();
		}
		if (!in_array($l, $this->collAgentUsers, true)) { // only add it if the **same** object is not already associated
			array_push($this->collAgentUsers, $l);
			$l->setAgentCompany($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this AgentCompany is new, it will return
	 * an empty collection; or if this AgentCompany has previously
	 * been saved, it will retrieve related AgentUsers from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in AgentCompany.
	 */
	public function getAgentUsersJoinStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collAgentUsers === null) {
			if ($this->isNew()) {
				$this->collAgentUsers = array();
			} else {

				$criteria->add(AgentUserPeer::AGENT_COMPANY_ID, $this->id);

				$this->collAgentUsers = AgentUserPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(AgentUserPeer::AGENT_COMPANY_ID, $this->id);

			if (!isset($this->lastAgentUserCriteria) || !$this->lastAgentUserCriteria->equals($criteria)) {
				$this->collAgentUsers = AgentUserPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastAgentUserCriteria = $criteria;

		return $this->collAgentUsers;
	}

	/**
	 * Clears out the collCompanys collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCompanys()
	 */
	public function clearCompanys()
	{
		$this->collCompanys = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCompanys collection (array).
	 *
	 * By default this just sets the collCompanys collection to an empty array (like clearcollCompanys());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCompanys()
	{
		$this->collCompanys = array();
	}

	/**
	 * Gets an array of Company objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this AgentCompany has previously been saved, it will retrieve
	 * related Companys from storage. If this AgentCompany is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Company[]
	 * @throws     PropelException
	 */
	public function getCompanys($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanys === null) {
			if ($this->isNew()) {
			   $this->collCompanys = array();
			} else {

				$criteria->add(CompanyPeer::AGENT_COMPANY_ID, $this->id);

				CompanyPeer::addSelectColumns($criteria);
				$this->collCompanys = CompanyPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CompanyPeer::AGENT_COMPANY_ID, $this->id);

				CompanyPeer::addSelectColumns($criteria);
				if (!isset($this->lastCompanyCriteria) || !$this->lastCompanyCriteria->equals($criteria)) {
					$this->collCompanys = CompanyPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCompanyCriteria = $criteria;
		return $this->collCompanys;
	}

	/**
	 * Returns the number of related Company objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Company objects.
	 * @throws     PropelException
	 */
	public function countCompanys(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCompanys === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CompanyPeer::AGENT_COMPANY_ID, $this->id);

				$count = CompanyPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CompanyPeer::AGENT_COMPANY_ID, $this->id);

				if (!isset($this->lastCompanyCriteria) || !$this->lastCompanyCriteria->equals($criteria)) {
					$count = CompanyPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCompanys);
				}
			} else {
				$count = count($this->collCompanys);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Company object to this object
	 * through the Company foreign key attribute.
	 *
	 * @param      Company $l Company
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCompany(Company $l)
	{
		if ($this->collCompanys === null) {
			$this->initCompanys();
		}
		if (!in_array($l, $this->collCompanys, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCompanys, $l);
			$l->setAgentCompany($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this AgentCompany is new, it will return
	 * an empty collection; or if this AgentCompany has previously
	 * been saved, it will retrieve related Companys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in AgentCompany.
	 */
	public function getCompanysJoinCountry($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanys === null) {
			if ($this->isNew()) {
				$this->collCompanys = array();
			} else {

				$criteria->add(CompanyPeer::AGENT_COMPANY_ID, $this->id);

				$this->collCompanys = CompanyPeer::doSelectJoinCountry($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyPeer::AGENT_COMPANY_ID, $this->id);

			if (!isset($this->lastCompanyCriteria) || !$this->lastCompanyCriteria->equals($criteria)) {
				$this->collCompanys = CompanyPeer::doSelectJoinCountry($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyCriteria = $criteria;

		return $this->collCompanys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this AgentCompany is new, it will return
	 * an empty collection; or if this AgentCompany has previously
	 * been saved, it will retrieve related Companys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in AgentCompany.
	 */
	public function getCompanysJoinCity($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanys === null) {
			if ($this->isNew()) {
				$this->collCompanys = array();
			} else {

				$criteria->add(CompanyPeer::AGENT_COMPANY_ID, $this->id);

				$this->collCompanys = CompanyPeer::doSelectJoinCity($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyPeer::AGENT_COMPANY_ID, $this->id);

			if (!isset($this->lastCompanyCriteria) || !$this->lastCompanyCriteria->equals($criteria)) {
				$this->collCompanys = CompanyPeer::doSelectJoinCity($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyCriteria = $criteria;

		return $this->collCompanys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this AgentCompany is new, it will return
	 * an empty collection; or if this AgentCompany has previously
	 * been saved, it will retrieve related Companys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in AgentCompany.
	 */
	public function getCompanysJoinStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanys === null) {
			if ($this->isNew()) {
				$this->collCompanys = array();
			} else {

				$criteria->add(CompanyPeer::AGENT_COMPANY_ID, $this->id);

				$this->collCompanys = CompanyPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyPeer::AGENT_COMPANY_ID, $this->id);

			if (!isset($this->lastCompanyCriteria) || !$this->lastCompanyCriteria->equals($criteria)) {
				$this->collCompanys = CompanyPeer::doSelectJoinStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyCriteria = $criteria;

		return $this->collCompanys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this AgentCompany is new, it will return
	 * an empty collection; or if this AgentCompany has previously
	 * been saved, it will retrieve related Companys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in AgentCompany.
	 */
	public function getCompanysJoinCompanySize($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanys === null) {
			if ($this->isNew()) {
				$this->collCompanys = array();
			} else {

				$criteria->add(CompanyPeer::AGENT_COMPANY_ID, $this->id);

				$this->collCompanys = CompanyPeer::doSelectJoinCompanySize($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyPeer::AGENT_COMPANY_ID, $this->id);

			if (!isset($this->lastCompanyCriteria) || !$this->lastCompanyCriteria->equals($criteria)) {
				$this->collCompanys = CompanyPeer::doSelectJoinCompanySize($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyCriteria = $criteria;

		return $this->collCompanys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this AgentCompany is new, it will return
	 * an empty collection; or if this AgentCompany has previously
	 * been saved, it will retrieve related Companys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in AgentCompany.
	 */
	public function getCompanysJoinCompanyType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanys === null) {
			if ($this->isNew()) {
				$this->collCompanys = array();
			} else {

				$criteria->add(CompanyPeer::AGENT_COMPANY_ID, $this->id);

				$this->collCompanys = CompanyPeer::doSelectJoinCompanyType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyPeer::AGENT_COMPANY_ID, $this->id);

			if (!isset($this->lastCompanyCriteria) || !$this->lastCompanyCriteria->equals($criteria)) {
				$this->collCompanys = CompanyPeer::doSelectJoinCompanyType($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyCriteria = $criteria;

		return $this->collCompanys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this AgentCompany is new, it will return
	 * an empty collection; or if this AgentCompany has previously
	 * been saved, it will retrieve related Companys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in AgentCompany.
	 */
	public function getCompanysJoinCustomerType($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanys === null) {
			if ($this->isNew()) {
				$this->collCompanys = array();
			} else {

				$criteria->add(CompanyPeer::AGENT_COMPANY_ID, $this->id);

				$this->collCompanys = CompanyPeer::doSelectJoinCustomerType($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyPeer::AGENT_COMPANY_ID, $this->id);

			if (!isset($this->lastCompanyCriteria) || !$this->lastCompanyCriteria->equals($criteria)) {
				$this->collCompanys = CompanyPeer::doSelectJoinCustomerType($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyCriteria = $criteria;

		return $this->collCompanys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this AgentCompany is new, it will return
	 * an empty collection; or if this AgentCompany has previously
	 * been saved, it will retrieve related Companys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in AgentCompany.
	 */
	public function getCompanysJoinApartmentForm($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanys === null) {
			if ($this->isNew()) {
				$this->collCompanys = array();
			} else {

				$criteria->add(CompanyPeer::AGENT_COMPANY_ID, $this->id);

				$this->collCompanys = CompanyPeer::doSelectJoinApartmentForm($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyPeer::AGENT_COMPANY_ID, $this->id);

			if (!isset($this->lastCompanyCriteria) || !$this->lastCompanyCriteria->equals($criteria)) {
				$this->collCompanys = CompanyPeer::doSelectJoinApartmentForm($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyCriteria = $criteria;

		return $this->collCompanys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this AgentCompany is new, it will return
	 * an empty collection; or if this AgentCompany has previously
	 * been saved, it will retrieve related Companys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in AgentCompany.
	 */
	public function getCompanysJoinInvoiceMethod($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanys === null) {
			if ($this->isNew()) {
				$this->collCompanys = array();
			} else {

				$criteria->add(CompanyPeer::AGENT_COMPANY_ID, $this->id);

				$this->collCompanys = CompanyPeer::doSelectJoinInvoiceMethod($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyPeer::AGENT_COMPANY_ID, $this->id);

			if (!isset($this->lastCompanyCriteria) || !$this->lastCompanyCriteria->equals($criteria)) {
				$this->collCompanys = CompanyPeer::doSelectJoinInvoiceMethod($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyCriteria = $criteria;

		return $this->collCompanys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this AgentCompany is new, it will return
	 * an empty collection; or if this AgentCompany has previously
	 * been saved, it will retrieve related Companys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in AgentCompany.
	 */
	public function getCompanysJoinUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanys === null) {
			if ($this->isNew()) {
				$this->collCompanys = array();
			} else {

				$criteria->add(CompanyPeer::AGENT_COMPANY_ID, $this->id);

				$this->collCompanys = CompanyPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyPeer::AGENT_COMPANY_ID, $this->id);

			if (!isset($this->lastCompanyCriteria) || !$this->lastCompanyCriteria->equals($criteria)) {
				$this->collCompanys = CompanyPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyCriteria = $criteria;

		return $this->collCompanys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this AgentCompany is new, it will return
	 * an empty collection; or if this AgentCompany has previously
	 * been saved, it will retrieve related Companys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in AgentCompany.
	 */
	public function getCompanysJoinPackage($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanys === null) {
			if ($this->isNew()) {
				$this->collCompanys = array();
			} else {

				$criteria->add(CompanyPeer::AGENT_COMPANY_ID, $this->id);

				$this->collCompanys = CompanyPeer::doSelectJoinPackage($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CompanyPeer::AGENT_COMPANY_ID, $this->id);

			if (!isset($this->lastCompanyCriteria) || !$this->lastCompanyCriteria->equals($criteria)) {
				$this->collCompanys = CompanyPeer::doSelectJoinPackage($criteria, $con, $join_behavior);
			}
		}
		$this->lastCompanyCriteria = $criteria;

		return $this->collCompanys;
	}

	/**
	 * Clears out the collCustomers collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCustomers()
	 */
	public function clearCustomers()
	{
		$this->collCustomers = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCustomers collection (array).
	 *
	 * By default this just sets the collCustomers collection to an empty array (like clearcollCustomers());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCustomers()
	{
		$this->collCustomers = array();
	}

	/**
	 * Gets an array of Customer objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this AgentCompany has previously been saved, it will retrieve
	 * related Customers from storage. If this AgentCompany is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Customer[]
	 * @throws     PropelException
	 */
	public function getCustomers($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCustomers === null) {
			if ($this->isNew()) {
			   $this->collCustomers = array();
			} else {

				$criteria->add(CustomerPeer::REFERRER_ID, $this->id);

				CustomerPeer::addSelectColumns($criteria);
				$this->collCustomers = CustomerPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CustomerPeer::REFERRER_ID, $this->id);

				CustomerPeer::addSelectColumns($criteria);
				if (!isset($this->lastCustomerCriteria) || !$this->lastCustomerCriteria->equals($criteria)) {
					$this->collCustomers = CustomerPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCustomerCriteria = $criteria;
		return $this->collCustomers;
	}

	/**
	 * Returns the number of related Customer objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Customer objects.
	 * @throws     PropelException
	 */
	public function countCustomers(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCustomers === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CustomerPeer::REFERRER_ID, $this->id);

				$count = CustomerPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CustomerPeer::REFERRER_ID, $this->id);

				if (!isset($this->lastCustomerCriteria) || !$this->lastCustomerCriteria->equals($criteria)) {
					$count = CustomerPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCustomers);
				}
			} else {
				$count = count($this->collCustomers);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Customer object to this object
	 * through the Customer foreign key attribute.
	 *
	 * @param      Customer $l Customer
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCustomer(Customer $l)
	{
		if ($this->collCustomers === null) {
			$this->initCustomers();
		}
		if (!in_array($l, $this->collCustomers, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCustomers, $l);
			$l->setAgentCompany($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this AgentCompany is new, it will return
	 * an empty collection; or if this AgentCompany has previously
	 * been saved, it will retrieve related Customers from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in AgentCompany.
	 */
	public function getCustomersJoinCountry($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCustomers === null) {
			if ($this->isNew()) {
				$this->collCustomers = array();
			} else {

				$criteria->add(CustomerPeer::REFERRER_ID, $this->id);

				$this->collCustomers = CustomerPeer::doSelectJoinCountry($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CustomerPeer::REFERRER_ID, $this->id);

			if (!isset($this->lastCustomerCriteria) || !$this->lastCustomerCriteria->equals($criteria)) {
				$this->collCustomers = CustomerPeer::doSelectJoinCountry($criteria, $con, $join_behavior);
			}
		}
		$this->lastCustomerCriteria = $criteria;

		return $this->collCustomers;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this AgentCompany is new, it will return
	 * an empty collection; or if this AgentCompany has previously
	 * been saved, it will retrieve related Customers from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in AgentCompany.
	 */
	public function getCustomersJoinDevice($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCustomers === null) {
			if ($this->isNew()) {
				$this->collCustomers = array();
			} else {

				$criteria->add(CustomerPeer::REFERRER_ID, $this->id);

				$this->collCustomers = CustomerPeer::doSelectJoinDevice($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CustomerPeer::REFERRER_ID, $this->id);

			if (!isset($this->lastCustomerCriteria) || !$this->lastCustomerCriteria->equals($criteria)) {
				$this->collCustomers = CustomerPeer::doSelectJoinDevice($criteria, $con, $join_behavior);
			}
		}
		$this->lastCustomerCriteria = $criteria;

		return $this->collCustomers;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this AgentCompany is new, it will return
	 * an empty collection; or if this AgentCompany has previously
	 * been saved, it will retrieve related Customers from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in AgentCompany.
	 */
	public function getCustomersJoinTelecomOperator($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCustomers === null) {
			if ($this->isNew()) {
				$this->collCustomers = array();
			} else {

				$criteria->add(CustomerPeer::REFERRER_ID, $this->id);

				$this->collCustomers = CustomerPeer::doSelectJoinTelecomOperator($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CustomerPeer::REFERRER_ID, $this->id);

			if (!isset($this->lastCustomerCriteria) || !$this->lastCustomerCriteria->equals($criteria)) {
				$this->collCustomers = CustomerPeer::doSelectJoinTelecomOperator($criteria, $con, $join_behavior);
			}
		}
		$this->lastCustomerCriteria = $criteria;

		return $this->collCustomers;
	}

	/**
	 * Clears out the collProductOrders collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addProductOrders()
	 */
	public function clearProductOrders()
	{
		$this->collProductOrders = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collProductOrders collection (array).
	 *
	 * By default this just sets the collProductOrders collection to an empty array (like clearcollProductOrders());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initProductOrders()
	{
		$this->collProductOrders = array();
	}

	/**
	 * Gets an array of ProductOrder objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this AgentCompany has previously been saved, it will retrieve
	 * related ProductOrders from storage. If this AgentCompany is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ProductOrder[]
	 * @throws     PropelException
	 */
	public function getProductOrders($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collProductOrders === null) {
			if ($this->isNew()) {
			   $this->collProductOrders = array();
			} else {

				$criteria->add(ProductOrderPeer::AGENT_COMPANY_ID, $this->id);

				ProductOrderPeer::addSelectColumns($criteria);
				$this->collProductOrders = ProductOrderPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ProductOrderPeer::AGENT_COMPANY_ID, $this->id);

				ProductOrderPeer::addSelectColumns($criteria);
				if (!isset($this->lastProductOrderCriteria) || !$this->lastProductOrderCriteria->equals($criteria)) {
					$this->collProductOrders = ProductOrderPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastProductOrderCriteria = $criteria;
		return $this->collProductOrders;
	}

	/**
	 * Returns the number of related ProductOrder objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ProductOrder objects.
	 * @throws     PropelException
	 */
	public function countProductOrders(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collProductOrders === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ProductOrderPeer::AGENT_COMPANY_ID, $this->id);

				$count = ProductOrderPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ProductOrderPeer::AGENT_COMPANY_ID, $this->id);

				if (!isset($this->lastProductOrderCriteria) || !$this->lastProductOrderCriteria->equals($criteria)) {
					$count = ProductOrderPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collProductOrders);
				}
			} else {
				$count = count($this->collProductOrders);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ProductOrder object to this object
	 * through the ProductOrder foreign key attribute.
	 *
	 * @param      ProductOrder $l ProductOrder
	 * @return     void
	 * @throws     PropelException
	 */
	public function addProductOrder(ProductOrder $l)
	{
		if ($this->collProductOrders === null) {
			$this->initProductOrders();
		}
		if (!in_array($l, $this->collProductOrders, true)) { // only add it if the **same** object is not already associated
			array_push($this->collProductOrders, $l);
			$l->setAgentCompany($this);
		}
	}

	/**
	 * Clears out the collSubAgentLinksRelatedByAgentCompanyId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSubAgentLinksRelatedByAgentCompanyId()
	 */
	public function clearSubAgentLinksRelatedByAgentCompanyId()
	{
		$this->collSubAgentLinksRelatedByAgentCompanyId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSubAgentLinksRelatedByAgentCompanyId collection (array).
	 *
	 * By default this just sets the collSubAgentLinksRelatedByAgentCompanyId collection to an empty array (like clearcollSubAgentLinksRelatedByAgentCompanyId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSubAgentLinksRelatedByAgentCompanyId()
	{
		$this->collSubAgentLinksRelatedByAgentCompanyId = array();
	}

	/**
	 * Gets an array of SubAgentLink objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this AgentCompany has previously been saved, it will retrieve
	 * related SubAgentLinksRelatedByAgentCompanyId from storage. If this AgentCompany is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array SubAgentLink[]
	 * @throws     PropelException
	 */
	public function getSubAgentLinksRelatedByAgentCompanyId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSubAgentLinksRelatedByAgentCompanyId === null) {
			if ($this->isNew()) {
			   $this->collSubAgentLinksRelatedByAgentCompanyId = array();
			} else {

				$criteria->add(SubAgentLinkPeer::AGENT_COMPANY_ID, $this->id);

				SubAgentLinkPeer::addSelectColumns($criteria);
				$this->collSubAgentLinksRelatedByAgentCompanyId = SubAgentLinkPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SubAgentLinkPeer::AGENT_COMPANY_ID, $this->id);

				SubAgentLinkPeer::addSelectColumns($criteria);
				if (!isset($this->lastSubAgentLinkRelatedByAgentCompanyIdCriteria) || !$this->lastSubAgentLinkRelatedByAgentCompanyIdCriteria->equals($criteria)) {
					$this->collSubAgentLinksRelatedByAgentCompanyId = SubAgentLinkPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSubAgentLinkRelatedByAgentCompanyIdCriteria = $criteria;
		return $this->collSubAgentLinksRelatedByAgentCompanyId;
	}

	/**
	 * Returns the number of related SubAgentLink objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related SubAgentLink objects.
	 * @throws     PropelException
	 */
	public function countSubAgentLinksRelatedByAgentCompanyId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSubAgentLinksRelatedByAgentCompanyId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SubAgentLinkPeer::AGENT_COMPANY_ID, $this->id);

				$count = SubAgentLinkPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SubAgentLinkPeer::AGENT_COMPANY_ID, $this->id);

				if (!isset($this->lastSubAgentLinkRelatedByAgentCompanyIdCriteria) || !$this->lastSubAgentLinkRelatedByAgentCompanyIdCriteria->equals($criteria)) {
					$count = SubAgentLinkPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collSubAgentLinksRelatedByAgentCompanyId);
				}
			} else {
				$count = count($this->collSubAgentLinksRelatedByAgentCompanyId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a SubAgentLink object to this object
	 * through the SubAgentLink foreign key attribute.
	 *
	 * @param      SubAgentLink $l SubAgentLink
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSubAgentLinkRelatedByAgentCompanyId(SubAgentLink $l)
	{
		if ($this->collSubAgentLinksRelatedByAgentCompanyId === null) {
			$this->initSubAgentLinksRelatedByAgentCompanyId();
		}
		if (!in_array($l, $this->collSubAgentLinksRelatedByAgentCompanyId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSubAgentLinksRelatedByAgentCompanyId, $l);
			$l->setAgentCompanyRelatedByAgentCompanyId($this);
		}
	}

	/**
	 * Clears out the collSubAgentLinksRelatedBySubAgentId collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSubAgentLinksRelatedBySubAgentId()
	 */
	public function clearSubAgentLinksRelatedBySubAgentId()
	{
		$this->collSubAgentLinksRelatedBySubAgentId = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSubAgentLinksRelatedBySubAgentId collection (array).
	 *
	 * By default this just sets the collSubAgentLinksRelatedBySubAgentId collection to an empty array (like clearcollSubAgentLinksRelatedBySubAgentId());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSubAgentLinksRelatedBySubAgentId()
	{
		$this->collSubAgentLinksRelatedBySubAgentId = array();
	}

	/**
	 * Gets an array of SubAgentLink objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this AgentCompany has previously been saved, it will retrieve
	 * related SubAgentLinksRelatedBySubAgentId from storage. If this AgentCompany is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array SubAgentLink[]
	 * @throws     PropelException
	 */
	public function getSubAgentLinksRelatedBySubAgentId($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSubAgentLinksRelatedBySubAgentId === null) {
			if ($this->isNew()) {
			   $this->collSubAgentLinksRelatedBySubAgentId = array();
			} else {

				$criteria->add(SubAgentLinkPeer::SUB_AGENT_ID, $this->id);

				SubAgentLinkPeer::addSelectColumns($criteria);
				$this->collSubAgentLinksRelatedBySubAgentId = SubAgentLinkPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SubAgentLinkPeer::SUB_AGENT_ID, $this->id);

				SubAgentLinkPeer::addSelectColumns($criteria);
				if (!isset($this->lastSubAgentLinkRelatedBySubAgentIdCriteria) || !$this->lastSubAgentLinkRelatedBySubAgentIdCriteria->equals($criteria)) {
					$this->collSubAgentLinksRelatedBySubAgentId = SubAgentLinkPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSubAgentLinkRelatedBySubAgentIdCriteria = $criteria;
		return $this->collSubAgentLinksRelatedBySubAgentId;
	}

	/**
	 * Returns the number of related SubAgentLink objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related SubAgentLink objects.
	 * @throws     PropelException
	 */
	public function countSubAgentLinksRelatedBySubAgentId(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(AgentCompanyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSubAgentLinksRelatedBySubAgentId === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SubAgentLinkPeer::SUB_AGENT_ID, $this->id);

				$count = SubAgentLinkPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SubAgentLinkPeer::SUB_AGENT_ID, $this->id);

				if (!isset($this->lastSubAgentLinkRelatedBySubAgentIdCriteria) || !$this->lastSubAgentLinkRelatedBySubAgentIdCriteria->equals($criteria)) {
					$count = SubAgentLinkPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collSubAgentLinksRelatedBySubAgentId);
				}
			} else {
				$count = count($this->collSubAgentLinksRelatedBySubAgentId);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a SubAgentLink object to this object
	 * through the SubAgentLink foreign key attribute.
	 *
	 * @param      SubAgentLink $l SubAgentLink
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSubAgentLinkRelatedBySubAgentId(SubAgentLink $l)
	{
		if ($this->collSubAgentLinksRelatedBySubAgentId === null) {
			$this->initSubAgentLinksRelatedBySubAgentId();
		}
		if (!in_array($l, $this->collSubAgentLinksRelatedBySubAgentId, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSubAgentLinksRelatedBySubAgentId, $l);
			$l->setAgentCompanyRelatedBySubAgentId($this);
		}
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collAgentBanks) {
				foreach ((array) $this->collAgentBanks as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAgentCommissions) {
				foreach ((array) $this->collAgentCommissions as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAgentProducts) {
				foreach ((array) $this->collAgentProducts as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collAgentUsers) {
				foreach ((array) $this->collAgentUsers as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCompanys) {
				foreach ((array) $this->collCompanys as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCustomers) {
				foreach ((array) $this->collCustomers as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collProductOrders) {
				foreach ((array) $this->collProductOrders as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSubAgentLinksRelatedByAgentCompanyId) {
				foreach ((array) $this->collSubAgentLinksRelatedByAgentCompanyId as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSubAgentLinksRelatedBySubAgentId) {
				foreach ((array) $this->collSubAgentLinksRelatedBySubAgentId as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collAgentBanks = null;
		$this->collAgentCommissions = null;
		$this->collAgentProducts = null;
		$this->collAgentUsers = null;
		$this->collCompanys = null;
		$this->collCustomers = null;
		$this->collProductOrders = null;
		$this->collSubAgentLinksRelatedByAgentCompanyId = null;
		$this->collSubAgentLinksRelatedBySubAgentId = null;
			$this->aCountry = null;
			$this->aCity = null;
			$this->aStatus = null;
			$this->aCompanyType = null;
			$this->aCommissionPeriod = null;
			$this->aUser = null;
			$this->aAgentCommissionPackage = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseAgentCompany:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseAgentCompany::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseAgentCompany
