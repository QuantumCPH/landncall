<?php

/**
 * Base class that represents a row from the 'customer' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 01/11/12 05:25:23
 *
 * @package    lib.model.om
 */
abstract class BaseCustomer extends BaseObject  implements Persistent {


  const PEER = 'CustomerPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        CustomerPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        string
	 */
	protected $id;

	/**
	 * The value for the first_name field.
	 * @var        string
	 */
	protected $first_name;

	/**
	 * The value for the last_name field.
	 * @var        string
	 */
	protected $last_name;

	/**
	 * The value for the country_id field.
	 * @var        int
	 */
	protected $country_id;

	/**
	 * The value for the city field.
	 * @var        string
	 */
	protected $city;

	/**
	 * The value for the po_box_number field.
	 * @var        string
	 */
	protected $po_box_number;

	/**
	 * The value for the mobile_number field.
	 * @var        string
	 */
	protected $mobile_number;

	/**
	 * The value for the device_id field.
	 * @var        string
	 */
	protected $device_id;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the password field.
	 * @var        string
	 */
	protected $password;

	/**
	 * The value for the is_newsletter_subscriber field.
	 * @var        boolean
	 */
	protected $is_newsletter_subscriber;

	/**
	 * The value for the created_at field.
	 * Note: this column has a database default value of: (expression) CURRENT_TIMESTAMP
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the customer_status_id field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $customer_status_id;

	/**
	 * The value for the address field.
	 * @var        string
	 */
	protected $address;

	/**
	 * The value for the fonet_customer_id field.
	 * @var        double
	 */
	protected $fonet_customer_id;

	/**
	 * The value for the referrer_id field.
	 * @var        int
	 */
	protected $referrer_id;

	/**
	 * The value for the telecom_operator_id field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $telecom_operator_id;

	/**
	 * The value for the date_of_birth field.
	 * @var        string
	 */
	protected $date_of_birth;

	/**
	 * The value for the other field.
	 * @var        string
	 */
	protected $other;

	/**
	 * The value for the subscription_type field.
	 * @var        string
	 */
	protected $subscription_type;

	/**
	 * The value for the auto_refill_amount field.
	 * @var        double
	 */
	protected $auto_refill_amount;

	/**
	 * The value for the subscription_id field.
	 * @var        string
	 */
	protected $subscription_id;

	/**
	 * The value for the last_auto_refill field.
	 * @var        string
	 */
	protected $last_auto_refill;

	/**
	 * The value for the auto_refill_min_balance field.
	 * @var        double
	 */
	protected $auto_refill_min_balance;

	/**
	 * The value for the c9_customer_number field.
	 * @var        string
	 */
	protected $c9_customer_number;

	/**
	 * The value for the registration_type_id field.
	 * @var        int
	 */
	protected $registration_type_id;

	/**
	 * The value for the imsi field.
	 * @var        string
	 */
	protected $imsi;

	/**
	 * The value for the uniqueid field.
	 * @var        int
	 */
	protected $uniqueid;

	/**
	 * The value for the plain_text field.
	 * @var        string
	 */
	protected $plain_text;

	/**
	 * The value for the ticketval field.
	 * @var        string
	 */
	protected $ticketval;

	/**
	 * The value for the to_date field.
	 * @var        string
	 */
	protected $to_date;

	/**
	 * The value for the from_date field.
	 * @var        string
	 */
	protected $from_date;

	/**
	 * @var        Country
	 */
	protected $aCountry;

	/**
	 * @var        Device
	 */
	protected $aDevice;

	/**
	 * @var        EntityStatus
	 */
	protected $aEntityStatus;

	/**
	 * @var        FonetCustomer
	 */
	protected $aFonetCustomer;

	/**
	 * @var        AgentCompany
	 */
	protected $aAgentCompany;

	/**
	 * @var        TelecomOperator
	 */
	protected $aTelecomOperator;

	/**
	 * @var        array CustomerOrder[] Collection to store aggregation of CustomerOrder objects.
	 */
	protected $collCustomerOrders;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCustomerOrders.
	 */
	private $lastCustomerOrderCriteria = null;

	/**
	 * @var        array CustomerProduct[] Collection to store aggregation of CustomerProduct objects.
	 */
	protected $collCustomerProducts;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCustomerProducts.
	 */
	private $lastCustomerProductCriteria = null;

	/**
	 * @var        array Transaction[] Collection to store aggregation of Transaction objects.
	 */
	protected $collTransactions;

	/**
	 * @var        Criteria The criteria used to select the current contents of collTransactions.
	 */
	private $lastTransactionCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseCustomer object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->customer_status_id = 1;
		$this->telecom_operator_id = 1;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     string
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [first_name] column value.
	 * 
	 * @return     string
	 */
	public function getFirstName()
	{
		return $this->first_name;
	}

	/**
	 * Get the [last_name] column value.
	 * 
	 * @return     string
	 */
	public function getLastName()
	{
		return $this->last_name;
	}

	/**
	 * Get the [country_id] column value.
	 * 
	 * @return     int
	 */
	public function getCountryId()
	{
		return $this->country_id;
	}

	/**
	 * Get the [city] column value.
	 * 
	 * @return     string
	 */
	public function getCity()
	{
		return $this->city;
	}

	/**
	 * Get the [po_box_number] column value.
	 * 
	 * @return     string
	 */
	public function getPoBoxNumber()
	{
		return $this->po_box_number;
	}

	/**
	 * Get the [mobile_number] column value.
	 * 
	 * @return     string
	 */
	public function getMobileNumber()
	{
		return $this->mobile_number;
	}

	/**
	 * Get the [device_id] column value.
	 * 
	 * @return     string
	 */
	public function getDeviceId()
	{
		return $this->device_id;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [password] column value.
	 * 
	 * @return     string
	 */
	public function getPassword()
	{
		return $this->password;
	}

	/**
	 * Get the [is_newsletter_subscriber] column value.
	 * 
	 * @return     boolean
	 */
	public function getIsNewsletterSubscriber()
	{
		return $this->is_newsletter_subscriber;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [customer_status_id] column value.
	 * 
	 * @return     int
	 */
	public function getCustomerStatusId()
	{
		return $this->customer_status_id;
	}

	/**
	 * Get the [address] column value.
	 * 
	 * @return     string
	 */
	public function getAddress()
	{
		return $this->address;
	}

	/**
	 * Get the [fonet_customer_id] column value.
	 * 
	 * @return     double
	 */
	public function getFonetCustomerId()
	{
		return $this->fonet_customer_id;
	}

	/**
	 * Get the [referrer_id] column value.
	 * 
	 * @return     int
	 */
	public function getReferrerId()
	{
		return $this->referrer_id;
	}

	/**
	 * Get the [telecom_operator_id] column value.
	 * 
	 * @return     int
	 */
	public function getTelecomOperatorId()
	{
		return $this->telecom_operator_id;
	}

	/**
	 * Get the [optionally formatted] temporal [date_of_birth] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getDateOfBirth($format = 'Y-m-d')
	{
		if ($this->date_of_birth === null) {
			return null;
		}


		if ($this->date_of_birth === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->date_of_birth);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->date_of_birth, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [other] column value.
	 * 
	 * @return     string
	 */
	public function getOther()
	{
		return $this->other;
	}

	/**
	 * Get the [subscription_type] column value.
	 * 
	 * @return     string
	 */
	public function getSubscriptionType()
	{
		return $this->subscription_type;
	}

	/**
	 * Get the [auto_refill_amount] column value.
	 * 
	 * @return     double
	 */
	public function getAutoRefillAmount()
	{
		return $this->auto_refill_amount;
	}

	/**
	 * Get the [subscription_id] column value.
	 * 
	 * @return     string
	 */
	public function getSubscriptionId()
	{
		return $this->subscription_id;
	}

	/**
	 * Get the [optionally formatted] temporal [last_auto_refill] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getLastAutoRefill($format = 'Y-m-d H:i:s')
	{
		if ($this->last_auto_refill === null) {
			return null;
		}


		if ($this->last_auto_refill === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->last_auto_refill);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->last_auto_refill, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [auto_refill_min_balance] column value.
	 * 
	 * @return     double
	 */
	public function getAutoRefillMinBalance()
	{
		return $this->auto_refill_min_balance;
	}

	/**
	 * Get the [c9_customer_number] column value.
	 * 
	 * @return     string
	 */
	public function getC9CustomerNumber()
	{
		return $this->c9_customer_number;
	}

	/**
	 * Get the [registration_type_id] column value.
	 * 
	 * @return     int
	 */
	public function getRegistrationTypeId()
	{
		return $this->registration_type_id;
	}

	/**
	 * Get the [imsi] column value.
	 * 
	 * @return     string
	 */
	public function getImsi()
	{
		return $this->imsi;
	}

	/**
	 * Get the [uniqueid] column value.
	 * 
	 * @return     int
	 */
	public function getUniqueid()
	{
		return $this->uniqueid;
	}

	/**
	 * Get the [plain_text] column value.
	 * 
	 * @return     string
	 */
	public function getPlainText()
	{
		return $this->plain_text;
	}

	/**
	 * Get the [ticketval] column value.
	 * 
	 * @return     string
	 */
	public function getTicketval()
	{
		return $this->ticketval;
	}

	/**
	 * Get the [optionally formatted] temporal [to_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getToDate($format = 'Y-m-d')
	{
		if ($this->to_date === null) {
			return null;
		}


		if ($this->to_date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->to_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->to_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [from_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getFromDate($format = 'Y-m-d')
	{
		if ($this->from_date === null) {
			return null;
		}


		if ($this->from_date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->from_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->from_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = CustomerPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [first_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setFirstName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->first_name !== $v) {
			$this->first_name = $v;
			$this->modifiedColumns[] = CustomerPeer::FIRST_NAME;
		}

		return $this;
	} // setFirstName()

	/**
	 * Set the value of [last_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setLastName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->last_name !== $v) {
			$this->last_name = $v;
			$this->modifiedColumns[] = CustomerPeer::LAST_NAME;
		}

		return $this;
	} // setLastName()

	/**
	 * Set the value of [country_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setCountryId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->country_id !== $v) {
			$this->country_id = $v;
			$this->modifiedColumns[] = CustomerPeer::COUNTRY_ID;
		}

		if ($this->aCountry !== null && $this->aCountry->getId() !== $v) {
			$this->aCountry = null;
		}

		return $this;
	} // setCountryId()

	/**
	 * Set the value of [city] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setCity($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->city !== $v) {
			$this->city = $v;
			$this->modifiedColumns[] = CustomerPeer::CITY;
		}

		return $this;
	} // setCity()

	/**
	 * Set the value of [po_box_number] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setPoBoxNumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->po_box_number !== $v) {
			$this->po_box_number = $v;
			$this->modifiedColumns[] = CustomerPeer::PO_BOX_NUMBER;
		}

		return $this;
	} // setPoBoxNumber()

	/**
	 * Set the value of [mobile_number] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setMobileNumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->mobile_number !== $v) {
			$this->mobile_number = $v;
			$this->modifiedColumns[] = CustomerPeer::MOBILE_NUMBER;
		}

		return $this;
	} // setMobileNumber()

	/**
	 * Set the value of [device_id] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setDeviceId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->device_id !== $v) {
			$this->device_id = $v;
			$this->modifiedColumns[] = CustomerPeer::DEVICE_ID;
		}

		if ($this->aDevice !== null && $this->aDevice->getId() !== $v) {
			$this->aDevice = null;
		}

		return $this;
	} // setDeviceId()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = CustomerPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [password] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setPassword($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->password !== $v) {
			$this->password = $v;
			$this->modifiedColumns[] = CustomerPeer::PASSWORD;
		}

		return $this;
	} // setPassword()

	/**
	 * Set the value of [is_newsletter_subscriber] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setIsNewsletterSubscriber($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->is_newsletter_subscriber !== $v) {
			$this->is_newsletter_subscriber = $v;
			$this->modifiedColumns[] = CustomerPeer::IS_NEWSLETTER_SUBSCRIBER;
		}

		return $this;
	} // setIsNewsletterSubscriber()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = CustomerPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = CustomerPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Set the value of [customer_status_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setCustomerStatusId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->customer_status_id !== $v || $v === 1) {
			$this->customer_status_id = $v;
			$this->modifiedColumns[] = CustomerPeer::CUSTOMER_STATUS_ID;
		}

		if ($this->aEntityStatus !== null && $this->aEntityStatus->getId() !== $v) {
			$this->aEntityStatus = null;
		}

		return $this;
	} // setCustomerStatusId()

	/**
	 * Set the value of [address] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setAddress($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->address !== $v) {
			$this->address = $v;
			$this->modifiedColumns[] = CustomerPeer::ADDRESS;
		}

		return $this;
	} // setAddress()

	/**
	 * Set the value of [fonet_customer_id] column.
	 * 
	 * @param      double $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setFonetCustomerId($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->fonet_customer_id !== $v) {
			$this->fonet_customer_id = $v;
			$this->modifiedColumns[] = CustomerPeer::FONET_CUSTOMER_ID;
		}

		if ($this->aFonetCustomer !== null && $this->aFonetCustomer->getFonetCustomerId() !== $v) {
			$this->aFonetCustomer = null;
		}

		return $this;
	} // setFonetCustomerId()

	/**
	 * Set the value of [referrer_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setReferrerId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->referrer_id !== $v) {
			$this->referrer_id = $v;
			$this->modifiedColumns[] = CustomerPeer::REFERRER_ID;
		}

		if ($this->aAgentCompany !== null && $this->aAgentCompany->getId() !== $v) {
			$this->aAgentCompany = null;
		}

		return $this;
	} // setReferrerId()

	/**
	 * Set the value of [telecom_operator_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setTelecomOperatorId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->telecom_operator_id !== $v || $v === 1) {
			$this->telecom_operator_id = $v;
			$this->modifiedColumns[] = CustomerPeer::TELECOM_OPERATOR_ID;
		}

		if ($this->aTelecomOperator !== null && $this->aTelecomOperator->getId() !== $v) {
			$this->aTelecomOperator = null;
		}

		return $this;
	} // setTelecomOperatorId()

	/**
	 * Sets the value of [date_of_birth] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setDateOfBirth($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->date_of_birth !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->date_of_birth !== null && $tmpDt = new DateTime($this->date_of_birth)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->date_of_birth = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = CustomerPeer::DATE_OF_BIRTH;
			}
		} // if either are not null

		return $this;
	} // setDateOfBirth()

	/**
	 * Set the value of [other] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setOther($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->other !== $v) {
			$this->other = $v;
			$this->modifiedColumns[] = CustomerPeer::OTHER;
		}

		return $this;
	} // setOther()

	/**
	 * Set the value of [subscription_type] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setSubscriptionType($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->subscription_type !== $v) {
			$this->subscription_type = $v;
			$this->modifiedColumns[] = CustomerPeer::SUBSCRIPTION_TYPE;
		}

		return $this;
	} // setSubscriptionType()

	/**
	 * Set the value of [auto_refill_amount] column.
	 * 
	 * @param      double $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setAutoRefillAmount($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->auto_refill_amount !== $v) {
			$this->auto_refill_amount = $v;
			$this->modifiedColumns[] = CustomerPeer::AUTO_REFILL_AMOUNT;
		}

		return $this;
	} // setAutoRefillAmount()

	/**
	 * Set the value of [subscription_id] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setSubscriptionId($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->subscription_id !== $v) {
			$this->subscription_id = $v;
			$this->modifiedColumns[] = CustomerPeer::SUBSCRIPTION_ID;
		}

		return $this;
	} // setSubscriptionId()

	/**
	 * Sets the value of [last_auto_refill] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setLastAutoRefill($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->last_auto_refill !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->last_auto_refill !== null && $tmpDt = new DateTime($this->last_auto_refill)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->last_auto_refill = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = CustomerPeer::LAST_AUTO_REFILL;
			}
		} // if either are not null

		return $this;
	} // setLastAutoRefill()

	/**
	 * Set the value of [auto_refill_min_balance] column.
	 * 
	 * @param      double $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setAutoRefillMinBalance($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->auto_refill_min_balance !== $v) {
			$this->auto_refill_min_balance = $v;
			$this->modifiedColumns[] = CustomerPeer::AUTO_REFILL_MIN_BALANCE;
		}

		return $this;
	} // setAutoRefillMinBalance()

	/**
	 * Set the value of [c9_customer_number] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setC9CustomerNumber($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->c9_customer_number !== $v) {
			$this->c9_customer_number = $v;
			$this->modifiedColumns[] = CustomerPeer::C9_CUSTOMER_NUMBER;
		}

		return $this;
	} // setC9CustomerNumber()

	/**
	 * Set the value of [registration_type_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setRegistrationTypeId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->registration_type_id !== $v) {
			$this->registration_type_id = $v;
			$this->modifiedColumns[] = CustomerPeer::REGISTRATION_TYPE_ID;
		}

		return $this;
	} // setRegistrationTypeId()

	/**
	 * Set the value of [imsi] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setImsi($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->imsi !== $v) {
			$this->imsi = $v;
			$this->modifiedColumns[] = CustomerPeer::IMSI;
		}

		return $this;
	} // setImsi()

	/**
	 * Set the value of [uniqueid] column.
	 * 
	 * @param      int $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setUniqueid($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->uniqueid !== $v) {
			$this->uniqueid = $v;
			$this->modifiedColumns[] = CustomerPeer::UNIQUEID;
		}

		return $this;
	} // setUniqueid()

	/**
	 * Set the value of [plain_text] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setPlainText($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->plain_text !== $v) {
			$this->plain_text = $v;
			$this->modifiedColumns[] = CustomerPeer::PLAIN_TEXT;
		}

		return $this;
	} // setPlainText()

	/**
	 * Set the value of [ticketval] column.
	 * 
	 * @param      string $v new value
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setTicketval($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->ticketval !== $v) {
			$this->ticketval = $v;
			$this->modifiedColumns[] = CustomerPeer::TICKETVAL;
		}

		return $this;
	} // setTicketval()

	/**
	 * Sets the value of [to_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setToDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->to_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->to_date !== null && $tmpDt = new DateTime($this->to_date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->to_date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = CustomerPeer::TO_DATE;
			}
		} // if either are not null

		return $this;
	} // setToDate()

	/**
	 * Sets the value of [from_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Customer The current object (for fluent API support)
	 */
	public function setFromDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->from_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->from_date !== null && $tmpDt = new DateTime($this->from_date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->from_date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = CustomerPeer::FROM_DATE;
			}
		} // if either are not null

		return $this;
	} // setFromDate()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(CustomerPeer::CUSTOMER_STATUS_ID,CustomerPeer::TELECOM_OPERATOR_ID))) {
				return false;
			}

			if ($this->customer_status_id !== 1) {
				return false;
			}

			if ($this->telecom_operator_id !== 1) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (string) $row[$startcol + 0] : null;
			$this->first_name = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->last_name = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->country_id = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->city = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->po_box_number = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->mobile_number = ($row[$startcol + 6] !== null) ? (string) $row[$startcol + 6] : null;
			$this->device_id = ($row[$startcol + 7] !== null) ? (string) $row[$startcol + 7] : null;
			$this->email = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->password = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->is_newsletter_subscriber = ($row[$startcol + 10] !== null) ? (boolean) $row[$startcol + 10] : null;
			$this->created_at = ($row[$startcol + 11] !== null) ? (string) $row[$startcol + 11] : null;
			$this->updated_at = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->customer_status_id = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->address = ($row[$startcol + 14] !== null) ? (string) $row[$startcol + 14] : null;
			$this->fonet_customer_id = ($row[$startcol + 15] !== null) ? (double) $row[$startcol + 15] : null;
			$this->referrer_id = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->telecom_operator_id = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->date_of_birth = ($row[$startcol + 18] !== null) ? (string) $row[$startcol + 18] : null;
			$this->other = ($row[$startcol + 19] !== null) ? (string) $row[$startcol + 19] : null;
			$this->subscription_type = ($row[$startcol + 20] !== null) ? (string) $row[$startcol + 20] : null;
			$this->auto_refill_amount = ($row[$startcol + 21] !== null) ? (double) $row[$startcol + 21] : null;
			$this->subscription_id = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->last_auto_refill = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->auto_refill_min_balance = ($row[$startcol + 24] !== null) ? (double) $row[$startcol + 24] : null;
			$this->c9_customer_number = ($row[$startcol + 25] !== null) ? (string) $row[$startcol + 25] : null;
			$this->registration_type_id = ($row[$startcol + 26] !== null) ? (int) $row[$startcol + 26] : null;
			$this->imsi = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->uniqueid = ($row[$startcol + 28] !== null) ? (int) $row[$startcol + 28] : null;
			$this->plain_text = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->ticketval = ($row[$startcol + 30] !== null) ? (string) $row[$startcol + 30] : null;
			$this->to_date = ($row[$startcol + 31] !== null) ? (string) $row[$startcol + 31] : null;
			$this->from_date = ($row[$startcol + 32] !== null) ? (string) $row[$startcol + 32] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 33; // 33 = CustomerPeer::NUM_COLUMNS - CustomerPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Customer object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aCountry !== null && $this->country_id !== $this->aCountry->getId()) {
			$this->aCountry = null;
		}
		if ($this->aDevice !== null && $this->device_id !== $this->aDevice->getId()) {
			$this->aDevice = null;
		}
		if ($this->aEntityStatus !== null && $this->customer_status_id !== $this->aEntityStatus->getId()) {
			$this->aEntityStatus = null;
		}
		if ($this->aFonetCustomer !== null && $this->fonet_customer_id !== $this->aFonetCustomer->getFonetCustomerId()) {
			$this->aFonetCustomer = null;
		}
		if ($this->aAgentCompany !== null && $this->referrer_id !== $this->aAgentCompany->getId()) {
			$this->aAgentCompany = null;
		}
		if ($this->aTelecomOperator !== null && $this->telecom_operator_id !== $this->aTelecomOperator->getId()) {
			$this->aTelecomOperator = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CustomerPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = CustomerPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aCountry = null;
			$this->aDevice = null;
			$this->aEntityStatus = null;
			$this->aFonetCustomer = null;
			$this->aAgentCompany = null;
			$this->aTelecomOperator = null;
			$this->collCustomerOrders = null;
			$this->lastCustomerOrderCriteria = null;

			$this->collCustomerProducts = null;
			$this->lastCustomerProductCriteria = null;

			$this->collTransactions = null;
			$this->lastTransactionCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseCustomer:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CustomerPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			CustomerPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseCustomer:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseCustomer:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(CustomerPeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

    if ($this->isModified() && !$this->isColumnModified(CustomerPeer::UPDATED_AT))
    {
      $this->setUpdatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CustomerPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseCustomer:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			CustomerPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aCountry !== null) {
				if ($this->aCountry->isModified() || $this->aCountry->isNew()) {
					$affectedRows += $this->aCountry->save($con);
				}
				$this->setCountry($this->aCountry);
			}

			if ($this->aDevice !== null) {
				if ($this->aDevice->isModified() || $this->aDevice->isNew()) {
					$affectedRows += $this->aDevice->save($con);
				}
				$this->setDevice($this->aDevice);
			}

			if ($this->aEntityStatus !== null) {
				if ($this->aEntityStatus->isModified() || $this->aEntityStatus->isNew()) {
					$affectedRows += $this->aEntityStatus->save($con);
				}
				$this->setEntityStatus($this->aEntityStatus);
			}

			if ($this->aFonetCustomer !== null) {
				if ($this->aFonetCustomer->isModified() || $this->aFonetCustomer->isNew()) {
					$affectedRows += $this->aFonetCustomer->save($con);
				}
				$this->setFonetCustomer($this->aFonetCustomer);
			}

			if ($this->aAgentCompany !== null) {
				if ($this->aAgentCompany->isModified() || $this->aAgentCompany->isNew()) {
					$affectedRows += $this->aAgentCompany->save($con);
				}
				$this->setAgentCompany($this->aAgentCompany);
			}

			if ($this->aTelecomOperator !== null) {
				if ($this->aTelecomOperator->isModified() || $this->aTelecomOperator->isNew()) {
					$affectedRows += $this->aTelecomOperator->save($con);
				}
				$this->setTelecomOperator($this->aTelecomOperator);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = CustomerPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = CustomerPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += CustomerPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collCustomerOrders !== null) {
				foreach ($this->collCustomerOrders as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCustomerProducts !== null) {
				foreach ($this->collCustomerProducts as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collTransactions !== null) {
				foreach ($this->collTransactions as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aCountry !== null) {
				if (!$this->aCountry->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCountry->getValidationFailures());
				}
			}

			if ($this->aDevice !== null) {
				if (!$this->aDevice->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aDevice->getValidationFailures());
				}
			}

			if ($this->aEntityStatus !== null) {
				if (!$this->aEntityStatus->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aEntityStatus->getValidationFailures());
				}
			}

			if ($this->aFonetCustomer !== null) {
				if (!$this->aFonetCustomer->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aFonetCustomer->getValidationFailures());
				}
			}

			if ($this->aAgentCompany !== null) {
				if (!$this->aAgentCompany->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAgentCompany->getValidationFailures());
				}
			}

			if ($this->aTelecomOperator !== null) {
				if (!$this->aTelecomOperator->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aTelecomOperator->getValidationFailures());
				}
			}


			if (($retval = CustomerPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collCustomerOrders !== null) {
					foreach ($this->collCustomerOrders as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCustomerProducts !== null) {
					foreach ($this->collCustomerProducts as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collTransactions !== null) {
					foreach ($this->collTransactions as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CustomerPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getFirstName();
				break;
			case 2:
				return $this->getLastName();
				break;
			case 3:
				return $this->getCountryId();
				break;
			case 4:
				return $this->getCity();
				break;
			case 5:
				return $this->getPoBoxNumber();
				break;
			case 6:
				return $this->getMobileNumber();
				break;
			case 7:
				return $this->getDeviceId();
				break;
			case 8:
				return $this->getEmail();
				break;
			case 9:
				return $this->getPassword();
				break;
			case 10:
				return $this->getIsNewsletterSubscriber();
				break;
			case 11:
				return $this->getCreatedAt();
				break;
			case 12:
				return $this->getUpdatedAt();
				break;
			case 13:
				return $this->getCustomerStatusId();
				break;
			case 14:
				return $this->getAddress();
				break;
			case 15:
				return $this->getFonetCustomerId();
				break;
			case 16:
				return $this->getReferrerId();
				break;
			case 17:
				return $this->getTelecomOperatorId();
				break;
			case 18:
				return $this->getDateOfBirth();
				break;
			case 19:
				return $this->getOther();
				break;
			case 20:
				return $this->getSubscriptionType();
				break;
			case 21:
				return $this->getAutoRefillAmount();
				break;
			case 22:
				return $this->getSubscriptionId();
				break;
			case 23:
				return $this->getLastAutoRefill();
				break;
			case 24:
				return $this->getAutoRefillMinBalance();
				break;
			case 25:
				return $this->getC9CustomerNumber();
				break;
			case 26:
				return $this->getRegistrationTypeId();
				break;
			case 27:
				return $this->getImsi();
				break;
			case 28:
				return $this->getUniqueid();
				break;
			case 29:
				return $this->getPlainText();
				break;
			case 30:
				return $this->getTicketval();
				break;
			case 31:
				return $this->getToDate();
				break;
			case 32:
				return $this->getFromDate();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = CustomerPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getFirstName(),
			$keys[2] => $this->getLastName(),
			$keys[3] => $this->getCountryId(),
			$keys[4] => $this->getCity(),
			$keys[5] => $this->getPoBoxNumber(),
			$keys[6] => $this->getMobileNumber(),
			$keys[7] => $this->getDeviceId(),
			$keys[8] => $this->getEmail(),
			$keys[9] => $this->getPassword(),
			$keys[10] => $this->getIsNewsletterSubscriber(),
			$keys[11] => $this->getCreatedAt(),
			$keys[12] => $this->getUpdatedAt(),
			$keys[13] => $this->getCustomerStatusId(),
			$keys[14] => $this->getAddress(),
			$keys[15] => $this->getFonetCustomerId(),
			$keys[16] => $this->getReferrerId(),
			$keys[17] => $this->getTelecomOperatorId(),
			$keys[18] => $this->getDateOfBirth(),
			$keys[19] => $this->getOther(),
			$keys[20] => $this->getSubscriptionType(),
			$keys[21] => $this->getAutoRefillAmount(),
			$keys[22] => $this->getSubscriptionId(),
			$keys[23] => $this->getLastAutoRefill(),
			$keys[24] => $this->getAutoRefillMinBalance(),
			$keys[25] => $this->getC9CustomerNumber(),
			$keys[26] => $this->getRegistrationTypeId(),
			$keys[27] => $this->getImsi(),
			$keys[28] => $this->getUniqueid(),
			$keys[29] => $this->getPlainText(),
			$keys[30] => $this->getTicketval(),
			$keys[31] => $this->getToDate(),
			$keys[32] => $this->getFromDate(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CustomerPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setFirstName($value);
				break;
			case 2:
				$this->setLastName($value);
				break;
			case 3:
				$this->setCountryId($value);
				break;
			case 4:
				$this->setCity($value);
				break;
			case 5:
				$this->setPoBoxNumber($value);
				break;
			case 6:
				$this->setMobileNumber($value);
				break;
			case 7:
				$this->setDeviceId($value);
				break;
			case 8:
				$this->setEmail($value);
				break;
			case 9:
				$this->setPassword($value);
				break;
			case 10:
				$this->setIsNewsletterSubscriber($value);
				break;
			case 11:
				$this->setCreatedAt($value);
				break;
			case 12:
				$this->setUpdatedAt($value);
				break;
			case 13:
				$this->setCustomerStatusId($value);
				break;
			case 14:
				$this->setAddress($value);
				break;
			case 15:
				$this->setFonetCustomerId($value);
				break;
			case 16:
				$this->setReferrerId($value);
				break;
			case 17:
				$this->setTelecomOperatorId($value);
				break;
			case 18:
				$this->setDateOfBirth($value);
				break;
			case 19:
				$this->setOther($value);
				break;
			case 20:
				$this->setSubscriptionType($value);
				break;
			case 21:
				$this->setAutoRefillAmount($value);
				break;
			case 22:
				$this->setSubscriptionId($value);
				break;
			case 23:
				$this->setLastAutoRefill($value);
				break;
			case 24:
				$this->setAutoRefillMinBalance($value);
				break;
			case 25:
				$this->setC9CustomerNumber($value);
				break;
			case 26:
				$this->setRegistrationTypeId($value);
				break;
			case 27:
				$this->setImsi($value);
				break;
			case 28:
				$this->setUniqueid($value);
				break;
			case 29:
				$this->setPlainText($value);
				break;
			case 30:
				$this->setTicketval($value);
				break;
			case 31:
				$this->setToDate($value);
				break;
			case 32:
				$this->setFromDate($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = CustomerPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setFirstName($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setLastName($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setCountryId($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setCity($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setPoBoxNumber($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setMobileNumber($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setDeviceId($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setEmail($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setPassword($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setIsNewsletterSubscriber($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setCreatedAt($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setUpdatedAt($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setCustomerStatusId($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setAddress($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setFonetCustomerId($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setReferrerId($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setTelecomOperatorId($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setDateOfBirth($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setOther($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setSubscriptionType($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setAutoRefillAmount($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setSubscriptionId($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setLastAutoRefill($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setAutoRefillMinBalance($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setC9CustomerNumber($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setRegistrationTypeId($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setImsi($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setUniqueid($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setPlainText($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setTicketval($arr[$keys[30]]);
		if (array_key_exists($keys[31], $arr)) $this->setToDate($arr[$keys[31]]);
		if (array_key_exists($keys[32], $arr)) $this->setFromDate($arr[$keys[32]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(CustomerPeer::DATABASE_NAME);

		if ($this->isColumnModified(CustomerPeer::ID)) $criteria->add(CustomerPeer::ID, $this->id);
		if ($this->isColumnModified(CustomerPeer::FIRST_NAME)) $criteria->add(CustomerPeer::FIRST_NAME, $this->first_name);
		if ($this->isColumnModified(CustomerPeer::LAST_NAME)) $criteria->add(CustomerPeer::LAST_NAME, $this->last_name);
		if ($this->isColumnModified(CustomerPeer::COUNTRY_ID)) $criteria->add(CustomerPeer::COUNTRY_ID, $this->country_id);
		if ($this->isColumnModified(CustomerPeer::CITY)) $criteria->add(CustomerPeer::CITY, $this->city);
		if ($this->isColumnModified(CustomerPeer::PO_BOX_NUMBER)) $criteria->add(CustomerPeer::PO_BOX_NUMBER, $this->po_box_number);
		if ($this->isColumnModified(CustomerPeer::MOBILE_NUMBER)) $criteria->add(CustomerPeer::MOBILE_NUMBER, $this->mobile_number);
		if ($this->isColumnModified(CustomerPeer::DEVICE_ID)) $criteria->add(CustomerPeer::DEVICE_ID, $this->device_id);
		if ($this->isColumnModified(CustomerPeer::EMAIL)) $criteria->add(CustomerPeer::EMAIL, $this->email);
		if ($this->isColumnModified(CustomerPeer::PASSWORD)) $criteria->add(CustomerPeer::PASSWORD, $this->password);
		if ($this->isColumnModified(CustomerPeer::IS_NEWSLETTER_SUBSCRIBER)) $criteria->add(CustomerPeer::IS_NEWSLETTER_SUBSCRIBER, $this->is_newsletter_subscriber);
		if ($this->isColumnModified(CustomerPeer::CREATED_AT)) $criteria->add(CustomerPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(CustomerPeer::UPDATED_AT)) $criteria->add(CustomerPeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(CustomerPeer::CUSTOMER_STATUS_ID)) $criteria->add(CustomerPeer::CUSTOMER_STATUS_ID, $this->customer_status_id);
		if ($this->isColumnModified(CustomerPeer::ADDRESS)) $criteria->add(CustomerPeer::ADDRESS, $this->address);
		if ($this->isColumnModified(CustomerPeer::FONET_CUSTOMER_ID)) $criteria->add(CustomerPeer::FONET_CUSTOMER_ID, $this->fonet_customer_id);
		if ($this->isColumnModified(CustomerPeer::REFERRER_ID)) $criteria->add(CustomerPeer::REFERRER_ID, $this->referrer_id);
		if ($this->isColumnModified(CustomerPeer::TELECOM_OPERATOR_ID)) $criteria->add(CustomerPeer::TELECOM_OPERATOR_ID, $this->telecom_operator_id);
		if ($this->isColumnModified(CustomerPeer::DATE_OF_BIRTH)) $criteria->add(CustomerPeer::DATE_OF_BIRTH, $this->date_of_birth);
		if ($this->isColumnModified(CustomerPeer::OTHER)) $criteria->add(CustomerPeer::OTHER, $this->other);
		if ($this->isColumnModified(CustomerPeer::SUBSCRIPTION_TYPE)) $criteria->add(CustomerPeer::SUBSCRIPTION_TYPE, $this->subscription_type);
		if ($this->isColumnModified(CustomerPeer::AUTO_REFILL_AMOUNT)) $criteria->add(CustomerPeer::AUTO_REFILL_AMOUNT, $this->auto_refill_amount);
		if ($this->isColumnModified(CustomerPeer::SUBSCRIPTION_ID)) $criteria->add(CustomerPeer::SUBSCRIPTION_ID, $this->subscription_id);
		if ($this->isColumnModified(CustomerPeer::LAST_AUTO_REFILL)) $criteria->add(CustomerPeer::LAST_AUTO_REFILL, $this->last_auto_refill);
		if ($this->isColumnModified(CustomerPeer::AUTO_REFILL_MIN_BALANCE)) $criteria->add(CustomerPeer::AUTO_REFILL_MIN_BALANCE, $this->auto_refill_min_balance);
		if ($this->isColumnModified(CustomerPeer::C9_CUSTOMER_NUMBER)) $criteria->add(CustomerPeer::C9_CUSTOMER_NUMBER, $this->c9_customer_number);
		if ($this->isColumnModified(CustomerPeer::REGISTRATION_TYPE_ID)) $criteria->add(CustomerPeer::REGISTRATION_TYPE_ID, $this->registration_type_id);
		if ($this->isColumnModified(CustomerPeer::IMSI)) $criteria->add(CustomerPeer::IMSI, $this->imsi);
		if ($this->isColumnModified(CustomerPeer::UNIQUEID)) $criteria->add(CustomerPeer::UNIQUEID, $this->uniqueid);
		if ($this->isColumnModified(CustomerPeer::PLAIN_TEXT)) $criteria->add(CustomerPeer::PLAIN_TEXT, $this->plain_text);
		if ($this->isColumnModified(CustomerPeer::TICKETVAL)) $criteria->add(CustomerPeer::TICKETVAL, $this->ticketval);
		if ($this->isColumnModified(CustomerPeer::TO_DATE)) $criteria->add(CustomerPeer::TO_DATE, $this->to_date);
		if ($this->isColumnModified(CustomerPeer::FROM_DATE)) $criteria->add(CustomerPeer::FROM_DATE, $this->from_date);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(CustomerPeer::DATABASE_NAME);

		$criteria->add(CustomerPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     string
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      string $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Customer (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setFirstName($this->first_name);

		$copyObj->setLastName($this->last_name);

		$copyObj->setCountryId($this->country_id);

		$copyObj->setCity($this->city);

		$copyObj->setPoBoxNumber($this->po_box_number);

		$copyObj->setMobileNumber($this->mobile_number);

		$copyObj->setDeviceId($this->device_id);

		$copyObj->setEmail($this->email);

		$copyObj->setPassword($this->password);

		$copyObj->setIsNewsletterSubscriber($this->is_newsletter_subscriber);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setCustomerStatusId($this->customer_status_id);

		$copyObj->setAddress($this->address);

		$copyObj->setFonetCustomerId($this->fonet_customer_id);

		$copyObj->setReferrerId($this->referrer_id);

		$copyObj->setTelecomOperatorId($this->telecom_operator_id);

		$copyObj->setDateOfBirth($this->date_of_birth);

		$copyObj->setOther($this->other);

		$copyObj->setSubscriptionType($this->subscription_type);

		$copyObj->setAutoRefillAmount($this->auto_refill_amount);

		$copyObj->setSubscriptionId($this->subscription_id);

		$copyObj->setLastAutoRefill($this->last_auto_refill);

		$copyObj->setAutoRefillMinBalance($this->auto_refill_min_balance);

		$copyObj->setC9CustomerNumber($this->c9_customer_number);

		$copyObj->setRegistrationTypeId($this->registration_type_id);

		$copyObj->setImsi($this->imsi);

		$copyObj->setUniqueid($this->uniqueid);

		$copyObj->setPlainText($this->plain_text);

		$copyObj->setTicketval($this->ticketval);

		$copyObj->setToDate($this->to_date);

		$copyObj->setFromDate($this->from_date);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getCustomerOrders() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCustomerOrder($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCustomerProducts() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCustomerProduct($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getTransactions() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addTransaction($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Customer Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     CustomerPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new CustomerPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Country object.
	 *
	 * @param      Country $v
	 * @return     Customer The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCountry(Country $v = null)
	{
		if ($v === null) {
			$this->setCountryId(NULL);
		} else {
			$this->setCountryId($v->getId());
		}

		$this->aCountry = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Country object, it will not be re-added.
		if ($v !== null) {
			$v->addCustomer($this);
		}

		return $this;
	}


	/**
	 * Get the associated Country object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Country The associated Country object.
	 * @throws     PropelException
	 */
	public function getCountry(PropelPDO $con = null)
	{
		if ($this->aCountry === null && ($this->country_id !== null)) {
			$c = new Criteria(CountryPeer::DATABASE_NAME);
			$c->add(CountryPeer::ID, $this->country_id);
			$this->aCountry = CountryPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCountry->addCustomers($this);
			 */
		}
		return $this->aCountry;
	}

	/**
	 * Declares an association between this object and a Device object.
	 *
	 * @param      Device $v
	 * @return     Customer The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setDevice(Device $v = null)
	{
		if ($v === null) {
			$this->setDeviceId(NULL);
		} else {
			$this->setDeviceId($v->getId());
		}

		$this->aDevice = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Device object, it will not be re-added.
		if ($v !== null) {
			$v->addCustomer($this);
		}

		return $this;
	}


	/**
	 * Get the associated Device object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Device The associated Device object.
	 * @throws     PropelException
	 */
	public function getDevice(PropelPDO $con = null)
	{
		if ($this->aDevice === null && (($this->device_id !== "" && $this->device_id !== null))) {
			$c = new Criteria(DevicePeer::DATABASE_NAME);
			$c->add(DevicePeer::ID, $this->device_id);
			$this->aDevice = DevicePeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aDevice->addCustomers($this);
			 */
		}
		return $this->aDevice;
	}

	/**
	 * Declares an association between this object and a EntityStatus object.
	 *
	 * @param      EntityStatus $v
	 * @return     Customer The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setEntityStatus(EntityStatus $v = null)
	{
		if ($v === null) {
			$this->setCustomerStatusId(1);
		} else {
			$this->setCustomerStatusId($v->getId());
		}

		$this->aEntityStatus = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the EntityStatus object, it will not be re-added.
		if ($v !== null) {
			$v->addCustomer($this);
		}

		return $this;
	}


	/**
	 * Get the associated EntityStatus object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     EntityStatus The associated EntityStatus object.
	 * @throws     PropelException
	 */
	public function getEntityStatus(PropelPDO $con = null)
	{
		if ($this->aEntityStatus === null && ($this->customer_status_id !== null)) {
			$c = new Criteria(EntityStatusPeer::DATABASE_NAME);
			$c->add(EntityStatusPeer::ID, $this->customer_status_id);
			$this->aEntityStatus = EntityStatusPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aEntityStatus->addCustomers($this);
			 */
		}
		return $this->aEntityStatus;
	}

	/**
	 * Declares an association between this object and a FonetCustomer object.
	 *
	 * @param      FonetCustomer $v
	 * @return     Customer The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setFonetCustomer(FonetCustomer $v = null)
	{
		if ($v === null) {
			$this->setFonetCustomerId(NULL);
		} else {
			$this->setFonetCustomerId($v->getFonetCustomerId());
		}

		$this->aFonetCustomer = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the FonetCustomer object, it will not be re-added.
		if ($v !== null) {
			$v->addCustomer($this);
		}

		return $this;
	}


	/**
	 * Get the associated FonetCustomer object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     FonetCustomer The associated FonetCustomer object.
	 * @throws     PropelException
	 */
	public function getFonetCustomer(PropelPDO $con = null)
	{
		if ($this->aFonetCustomer === null && ($this->fonet_customer_id != 0)) {
			$c = new Criteria(FonetCustomerPeer::DATABASE_NAME);
			$c->add(FonetCustomerPeer::FONET_CUSTOMER_ID, $this->fonet_customer_id);
			$this->aFonetCustomer = FonetCustomerPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aFonetCustomer->addCustomers($this);
			 */
		}
		return $this->aFonetCustomer;
	}

	/**
	 * Declares an association between this object and a AgentCompany object.
	 *
	 * @param      AgentCompany $v
	 * @return     Customer The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAgentCompany(AgentCompany $v = null)
	{
		if ($v === null) {
			$this->setReferrerId(NULL);
		} else {
			$this->setReferrerId($v->getId());
		}

		$this->aAgentCompany = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the AgentCompany object, it will not be re-added.
		if ($v !== null) {
			$v->addCustomer($this);
		}

		return $this;
	}


	/**
	 * Get the associated AgentCompany object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     AgentCompany The associated AgentCompany object.
	 * @throws     PropelException
	 */
	public function getAgentCompany(PropelPDO $con = null)
	{
		if ($this->aAgentCompany === null && ($this->referrer_id !== null)) {
			$c = new Criteria(AgentCompanyPeer::DATABASE_NAME);
			$c->add(AgentCompanyPeer::ID, $this->referrer_id);
			$this->aAgentCompany = AgentCompanyPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aAgentCompany->addCustomers($this);
			 */
		}
		return $this->aAgentCompany;
	}

	/**
	 * Declares an association between this object and a TelecomOperator object.
	 *
	 * @param      TelecomOperator $v
	 * @return     Customer The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setTelecomOperator(TelecomOperator $v = null)
	{
		if ($v === null) {
			$this->setTelecomOperatorId(1);
		} else {
			$this->setTelecomOperatorId($v->getId());
		}

		$this->aTelecomOperator = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the TelecomOperator object, it will not be re-added.
		if ($v !== null) {
			$v->addCustomer($this);
		}

		return $this;
	}


	/**
	 * Get the associated TelecomOperator object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     TelecomOperator The associated TelecomOperator object.
	 * @throws     PropelException
	 */
	public function getTelecomOperator(PropelPDO $con = null)
	{
		if ($this->aTelecomOperator === null && ($this->telecom_operator_id !== null)) {
			$c = new Criteria(TelecomOperatorPeer::DATABASE_NAME);
			$c->add(TelecomOperatorPeer::ID, $this->telecom_operator_id);
			$this->aTelecomOperator = TelecomOperatorPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aTelecomOperator->addCustomers($this);
			 */
		}
		return $this->aTelecomOperator;
	}

	/**
	 * Clears out the collCustomerOrders collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCustomerOrders()
	 */
	public function clearCustomerOrders()
	{
		$this->collCustomerOrders = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCustomerOrders collection (array).
	 *
	 * By default this just sets the collCustomerOrders collection to an empty array (like clearcollCustomerOrders());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCustomerOrders()
	{
		$this->collCustomerOrders = array();
	}

	/**
	 * Gets an array of CustomerOrder objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Customer has previously been saved, it will retrieve
	 * related CustomerOrders from storage. If this Customer is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CustomerOrder[]
	 * @throws     PropelException
	 */
	public function getCustomerOrders($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCustomerOrders === null) {
			if ($this->isNew()) {
			   $this->collCustomerOrders = array();
			} else {

				$criteria->add(CustomerOrderPeer::CUSTOMER_ID, $this->id);

				CustomerOrderPeer::addSelectColumns($criteria);
				$this->collCustomerOrders = CustomerOrderPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CustomerOrderPeer::CUSTOMER_ID, $this->id);

				CustomerOrderPeer::addSelectColumns($criteria);
				if (!isset($this->lastCustomerOrderCriteria) || !$this->lastCustomerOrderCriteria->equals($criteria)) {
					$this->collCustomerOrders = CustomerOrderPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCustomerOrderCriteria = $criteria;
		return $this->collCustomerOrders;
	}

	/**
	 * Returns the number of related CustomerOrder objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CustomerOrder objects.
	 * @throws     PropelException
	 */
	public function countCustomerOrders(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCustomerOrders === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CustomerOrderPeer::CUSTOMER_ID, $this->id);

				$count = CustomerOrderPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CustomerOrderPeer::CUSTOMER_ID, $this->id);

				if (!isset($this->lastCustomerOrderCriteria) || !$this->lastCustomerOrderCriteria->equals($criteria)) {
					$count = CustomerOrderPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCustomerOrders);
				}
			} else {
				$count = count($this->collCustomerOrders);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CustomerOrder object to this object
	 * through the CustomerOrder foreign key attribute.
	 *
	 * @param      CustomerOrder $l CustomerOrder
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCustomerOrder(CustomerOrder $l)
	{
		if ($this->collCustomerOrders === null) {
			$this->initCustomerOrders();
		}
		if (!in_array($l, $this->collCustomerOrders, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCustomerOrders, $l);
			$l->setCustomer($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Customer is new, it will return
	 * an empty collection; or if this Customer has previously
	 * been saved, it will retrieve related CustomerOrders from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Customer.
	 */
	public function getCustomerOrdersJoinProduct($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCustomerOrders === null) {
			if ($this->isNew()) {
				$this->collCustomerOrders = array();
			} else {

				$criteria->add(CustomerOrderPeer::CUSTOMER_ID, $this->id);

				$this->collCustomerOrders = CustomerOrderPeer::doSelectJoinProduct($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CustomerOrderPeer::CUSTOMER_ID, $this->id);

			if (!isset($this->lastCustomerOrderCriteria) || !$this->lastCustomerOrderCriteria->equals($criteria)) {
				$this->collCustomerOrders = CustomerOrderPeer::doSelectJoinProduct($criteria, $con, $join_behavior);
			}
		}
		$this->lastCustomerOrderCriteria = $criteria;

		return $this->collCustomerOrders;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Customer is new, it will return
	 * an empty collection; or if this Customer has previously
	 * been saved, it will retrieve related CustomerOrders from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Customer.
	 */
	public function getCustomerOrdersJoinEntityStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCustomerOrders === null) {
			if ($this->isNew()) {
				$this->collCustomerOrders = array();
			} else {

				$criteria->add(CustomerOrderPeer::CUSTOMER_ID, $this->id);

				$this->collCustomerOrders = CustomerOrderPeer::doSelectJoinEntityStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CustomerOrderPeer::CUSTOMER_ID, $this->id);

			if (!isset($this->lastCustomerOrderCriteria) || !$this->lastCustomerOrderCriteria->equals($criteria)) {
				$this->collCustomerOrders = CustomerOrderPeer::doSelectJoinEntityStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastCustomerOrderCriteria = $criteria;

		return $this->collCustomerOrders;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Customer is new, it will return
	 * an empty collection; or if this Customer has previously
	 * been saved, it will retrieve related CustomerOrders from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Customer.
	 */
	public function getCustomerOrdersJoinAgentCommissionPackage($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCustomerOrders === null) {
			if ($this->isNew()) {
				$this->collCustomerOrders = array();
			} else {

				$criteria->add(CustomerOrderPeer::CUSTOMER_ID, $this->id);

				$this->collCustomerOrders = CustomerOrderPeer::doSelectJoinAgentCommissionPackage($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CustomerOrderPeer::CUSTOMER_ID, $this->id);

			if (!isset($this->lastCustomerOrderCriteria) || !$this->lastCustomerOrderCriteria->equals($criteria)) {
				$this->collCustomerOrders = CustomerOrderPeer::doSelectJoinAgentCommissionPackage($criteria, $con, $join_behavior);
			}
		}
		$this->lastCustomerOrderCriteria = $criteria;

		return $this->collCustomerOrders;
	}

	/**
	 * Clears out the collCustomerProducts collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCustomerProducts()
	 */
	public function clearCustomerProducts()
	{
		$this->collCustomerProducts = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCustomerProducts collection (array).
	 *
	 * By default this just sets the collCustomerProducts collection to an empty array (like clearcollCustomerProducts());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCustomerProducts()
	{
		$this->collCustomerProducts = array();
	}

	/**
	 * Gets an array of CustomerProduct objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Customer has previously been saved, it will retrieve
	 * related CustomerProducts from storage. If this Customer is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CustomerProduct[]
	 * @throws     PropelException
	 */
	public function getCustomerProducts($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCustomerProducts === null) {
			if ($this->isNew()) {
			   $this->collCustomerProducts = array();
			} else {

				$criteria->add(CustomerProductPeer::CUSTOMER_ID, $this->id);

				CustomerProductPeer::addSelectColumns($criteria);
				$this->collCustomerProducts = CustomerProductPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CustomerProductPeer::CUSTOMER_ID, $this->id);

				CustomerProductPeer::addSelectColumns($criteria);
				if (!isset($this->lastCustomerProductCriteria) || !$this->lastCustomerProductCriteria->equals($criteria)) {
					$this->collCustomerProducts = CustomerProductPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCustomerProductCriteria = $criteria;
		return $this->collCustomerProducts;
	}

	/**
	 * Returns the number of related CustomerProduct objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CustomerProduct objects.
	 * @throws     PropelException
	 */
	public function countCustomerProducts(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCustomerProducts === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CustomerProductPeer::CUSTOMER_ID, $this->id);

				$count = CustomerProductPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CustomerProductPeer::CUSTOMER_ID, $this->id);

				if (!isset($this->lastCustomerProductCriteria) || !$this->lastCustomerProductCriteria->equals($criteria)) {
					$count = CustomerProductPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCustomerProducts);
				}
			} else {
				$count = count($this->collCustomerProducts);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CustomerProduct object to this object
	 * through the CustomerProduct foreign key attribute.
	 *
	 * @param      CustomerProduct $l CustomerProduct
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCustomerProduct(CustomerProduct $l)
	{
		if ($this->collCustomerProducts === null) {
			$this->initCustomerProducts();
		}
		if (!in_array($l, $this->collCustomerProducts, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCustomerProducts, $l);
			$l->setCustomer($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Customer is new, it will return
	 * an empty collection; or if this Customer has previously
	 * been saved, it will retrieve related CustomerProducts from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Customer.
	 */
	public function getCustomerProductsJoinProduct($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCustomerProducts === null) {
			if ($this->isNew()) {
				$this->collCustomerProducts = array();
			} else {

				$criteria->add(CustomerProductPeer::CUSTOMER_ID, $this->id);

				$this->collCustomerProducts = CustomerProductPeer::doSelectJoinProduct($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(CustomerProductPeer::CUSTOMER_ID, $this->id);

			if (!isset($this->lastCustomerProductCriteria) || !$this->lastCustomerProductCriteria->equals($criteria)) {
				$this->collCustomerProducts = CustomerProductPeer::doSelectJoinProduct($criteria, $con, $join_behavior);
			}
		}
		$this->lastCustomerProductCriteria = $criteria;

		return $this->collCustomerProducts;
	}

	/**
	 * Clears out the collTransactions collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addTransactions()
	 */
	public function clearTransactions()
	{
		$this->collTransactions = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collTransactions collection (array).
	 *
	 * By default this just sets the collTransactions collection to an empty array (like clearcollTransactions());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initTransactions()
	{
		$this->collTransactions = array();
	}

	/**
	 * Gets an array of Transaction objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Customer has previously been saved, it will retrieve
	 * related Transactions from storage. If this Customer is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Transaction[]
	 * @throws     PropelException
	 */
	public function getTransactions($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransactions === null) {
			if ($this->isNew()) {
			   $this->collTransactions = array();
			} else {

				$criteria->add(TransactionPeer::CUSTOMER_ID, $this->id);

				TransactionPeer::addSelectColumns($criteria);
				$this->collTransactions = TransactionPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(TransactionPeer::CUSTOMER_ID, $this->id);

				TransactionPeer::addSelectColumns($criteria);
				if (!isset($this->lastTransactionCriteria) || !$this->lastTransactionCriteria->equals($criteria)) {
					$this->collTransactions = TransactionPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastTransactionCriteria = $criteria;
		return $this->collTransactions;
	}

	/**
	 * Returns the number of related Transaction objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Transaction objects.
	 * @throws     PropelException
	 */
	public function countTransactions(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collTransactions === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(TransactionPeer::CUSTOMER_ID, $this->id);

				$count = TransactionPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(TransactionPeer::CUSTOMER_ID, $this->id);

				if (!isset($this->lastTransactionCriteria) || !$this->lastTransactionCriteria->equals($criteria)) {
					$count = TransactionPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collTransactions);
				}
			} else {
				$count = count($this->collTransactions);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Transaction object to this object
	 * through the Transaction foreign key attribute.
	 *
	 * @param      Transaction $l Transaction
	 * @return     void
	 * @throws     PropelException
	 */
	public function addTransaction(Transaction $l)
	{
		if ($this->collTransactions === null) {
			$this->initTransactions();
		}
		if (!in_array($l, $this->collTransactions, true)) { // only add it if the **same** object is not already associated
			array_push($this->collTransactions, $l);
			$l->setCustomer($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Customer is new, it will return
	 * an empty collection; or if this Customer has previously
	 * been saved, it will retrieve related Transactions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Customer.
	 */
	public function getTransactionsJoinCustomerOrder($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransactions === null) {
			if ($this->isNew()) {
				$this->collTransactions = array();
			} else {

				$criteria->add(TransactionPeer::CUSTOMER_ID, $this->id);

				$this->collTransactions = TransactionPeer::doSelectJoinCustomerOrder($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TransactionPeer::CUSTOMER_ID, $this->id);

			if (!isset($this->lastTransactionCriteria) || !$this->lastTransactionCriteria->equals($criteria)) {
				$this->collTransactions = TransactionPeer::doSelectJoinCustomerOrder($criteria, $con, $join_behavior);
			}
		}
		$this->lastTransactionCriteria = $criteria;

		return $this->collTransactions;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Customer is new, it will return
	 * an empty collection; or if this Customer has previously
	 * been saved, it will retrieve related Transactions from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Customer.
	 */
	public function getTransactionsJoinEntityStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CustomerPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collTransactions === null) {
			if ($this->isNew()) {
				$this->collTransactions = array();
			} else {

				$criteria->add(TransactionPeer::CUSTOMER_ID, $this->id);

				$this->collTransactions = TransactionPeer::doSelectJoinEntityStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(TransactionPeer::CUSTOMER_ID, $this->id);

			if (!isset($this->lastTransactionCriteria) || !$this->lastTransactionCriteria->equals($criteria)) {
				$this->collTransactions = TransactionPeer::doSelectJoinEntityStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastTransactionCriteria = $criteria;

		return $this->collTransactions;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collCustomerOrders) {
				foreach ((array) $this->collCustomerOrders as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCustomerProducts) {
				foreach ((array) $this->collCustomerProducts as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collTransactions) {
				foreach ((array) $this->collTransactions as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collCustomerOrders = null;
		$this->collCustomerProducts = null;
		$this->collTransactions = null;
			$this->aCountry = null;
			$this->aDevice = null;
			$this->aEntityStatus = null;
			$this->aFonetCustomer = null;
			$this->aAgentCompany = null;
			$this->aTelecomOperator = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseCustomer:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseCustomer::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseCustomer
