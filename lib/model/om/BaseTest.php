<?php

/**
 * Base class that represents a row from the 'test' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 01/03/12 09:22:05
 *
 * @package    lib.model.om
 */
abstract class BaseTest extends BaseObject  implements Persistent {


  const PEER = 'TestPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        TestPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the name field.
	 * @var        string
	 */
	protected $name;

	/**
	 * The value for the cvr_number field.
	 * @var        int
	 */
	protected $cvr_number;

	/**
	 * The value for the ean_number field.
	 * @var        int
	 */
	protected $ean_number;

	/**
	 * The value for the address field.
	 * @var        string
	 */
	protected $address;

	/**
	 * The value for the post_code field.
	 * @var        int
	 */
	protected $post_code;

	/**
	 * The value for the country_id field.
	 * @var        int
	 */
	protected $country_id;

	/**
	 * The value for the city_id field.
	 * @var        int
	 */
	protected $city_id;

	/**
	 * The value for the contact_name field.
	 * @var        string
	 */
	protected $contact_name;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the head_phone_number field.
	 * @var        int
	 */
	protected $head_phone_number;

	/**
	 * The value for the fax_number field.
	 * @var        int
	 */
	protected $fax_number;

	/**
	 * The value for the website field.
	 * @var        string
	 */
	protected $website;

	/**
	 * The value for the status_id field.
	 * @var        int
	 */
	protected $status_id;

	/**
	 * The value for the company_size_id field.
	 * @var        int
	 */
	protected $company_size_id;

	/**
	 * The value for the company_type_id field.
	 * @var        int
	 */
	protected $company_type_id;

	/**
	 * The value for the customer_type_id field.
	 * @var        int
	 */
	protected $customer_type_id;

	/**
	 * The value for the cpr_number field.
	 * @var        int
	 */
	protected $cpr_number;

	/**
	 * The value for the apartment_form_id field.
	 * @var        int
	 */
	protected $apartment_form_id;

	/**
	 * The value for the invoice_method_id field.
	 * @var        int
	 */
	protected $invoice_method_id;

	/**
	 * The value for the account_manager_id field.
	 * @var        int
	 */
	protected $account_manager_id;

	/**
	 * The value for the agent_company_id field.
	 * @var        int
	 */
	protected $agent_company_id;

	/**
	 * The value for the created_at field.
	 * Note: this column has a database default value of: (expression) CURRENT_TIMESTAMP
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the confirmed_at field.
	 * @var        string
	 */
	protected $confirmed_at;

	/**
	 * The value for the sim_card_dispatch_date field.
	 * @var        string
	 */
	protected $sim_card_dispatch_date;

	/**
	 * The value for the package_id field.
	 * @var        int
	 */
	protected $package_id;

	/**
	 * The value for the send_letter field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $send_letter;

	/**
	 * The value for the send_email field.
	 * Note: this column has a database default value of: true
	 * @var        boolean
	 */
	protected $send_email;

	/**
	 * The value for the send_specification field.
	 * Note: this column has a database default value of: false
	 * @var        boolean
	 */
	protected $send_specification;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseTest object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->send_letter = false;
		$this->send_email = true;
		$this->send_specification = false;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [name] column value.
	 * 
	 * @return     string
	 */
	public function getName()
	{
		return $this->name;
	}

	/**
	 * Get the [cvr_number] column value.
	 * 
	 * @return     int
	 */
	public function getCvrNumber()
	{
		return $this->cvr_number;
	}

	/**
	 * Get the [ean_number] column value.
	 * 
	 * @return     int
	 */
	public function getEanNumber()
	{
		return $this->ean_number;
	}

	/**
	 * Get the [address] column value.
	 * 
	 * @return     string
	 */
	public function getAddress()
	{
		return $this->address;
	}

	/**
	 * Get the [post_code] column value.
	 * 
	 * @return     int
	 */
	public function getPostCode()
	{
		return $this->post_code;
	}

	/**
	 * Get the [country_id] column value.
	 * 
	 * @return     int
	 */
	public function getCountryId()
	{
		return $this->country_id;
	}

	/**
	 * Get the [city_id] column value.
	 * 
	 * @return     int
	 */
	public function getCityId()
	{
		return $this->city_id;
	}

	/**
	 * Get the [contact_name] column value.
	 * 
	 * @return     string
	 */
	public function getContactName()
	{
		return $this->contact_name;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [head_phone_number] column value.
	 * 
	 * @return     int
	 */
	public function getHeadPhoneNumber()
	{
		return $this->head_phone_number;
	}

	/**
	 * Get the [fax_number] column value.
	 * 
	 * @return     int
	 */
	public function getFaxNumber()
	{
		return $this->fax_number;
	}

	/**
	 * Get the [website] column value.
	 * 
	 * @return     string
	 */
	public function getWebsite()
	{
		return $this->website;
	}

	/**
	 * Get the [status_id] column value.
	 * 
	 * @return     int
	 */
	public function getStatusId()
	{
		return $this->status_id;
	}

	/**
	 * Get the [company_size_id] column value.
	 * 
	 * @return     int
	 */
	public function getCompanySizeId()
	{
		return $this->company_size_id;
	}

	/**
	 * Get the [company_type_id] column value.
	 * 
	 * @return     int
	 */
	public function getCompanyTypeId()
	{
		return $this->company_type_id;
	}

	/**
	 * Get the [customer_type_id] column value.
	 * 
	 * @return     int
	 */
	public function getCustomerTypeId()
	{
		return $this->customer_type_id;
	}

	/**
	 * Get the [cpr_number] column value.
	 * 
	 * @return     int
	 */
	public function getCprNumber()
	{
		return $this->cpr_number;
	}

	/**
	 * Get the [apartment_form_id] column value.
	 * 
	 * @return     int
	 */
	public function getApartmentFormId()
	{
		return $this->apartment_form_id;
	}

	/**
	 * Get the [invoice_method_id] column value.
	 * 
	 * @return     int
	 */
	public function getInvoiceMethodId()
	{
		return $this->invoice_method_id;
	}

	/**
	 * Get the [account_manager_id] column value.
	 * 
	 * @return     int
	 */
	public function getAccountManagerId()
	{
		return $this->account_manager_id;
	}

	/**
	 * Get the [agent_company_id] column value.
	 * 
	 * @return     int
	 */
	public function getAgentCompanyId()
	{
		return $this->agent_company_id;
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [confirmed_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getConfirmedAt($format = 'Y-m-d')
	{
		if ($this->confirmed_at === null) {
			return null;
		}


		if ($this->confirmed_at === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->confirmed_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->confirmed_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [sim_card_dispatch_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getSimCardDispatchDate($format = 'Y-m-d')
	{
		if ($this->sim_card_dispatch_date === null) {
			return null;
		}


		if ($this->sim_card_dispatch_date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->sim_card_dispatch_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->sim_card_dispatch_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [package_id] column value.
	 * 
	 * @return     int
	 */
	public function getPackageId()
	{
		return $this->package_id;
	}

	/**
	 * Get the [send_letter] column value.
	 * 
	 * @return     boolean
	 */
	public function getSendLetter()
	{
		return $this->send_letter;
	}

	/**
	 * Get the [send_email] column value.
	 * 
	 * @return     boolean
	 */
	public function getSendEmail()
	{
		return $this->send_email;
	}

	/**
	 * Get the [send_specification] column value.
	 * 
	 * @return     boolean
	 */
	public function getSendSpecification()
	{
		return $this->send_specification;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Test The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = TestPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [name] column.
	 * 
	 * @param      string $v new value
	 * @return     Test The current object (for fluent API support)
	 */
	public function setName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->name !== $v) {
			$this->name = $v;
			$this->modifiedColumns[] = TestPeer::NAME;
		}

		return $this;
	} // setName()

	/**
	 * Set the value of [cvr_number] column.
	 * 
	 * @param      int $v new value
	 * @return     Test The current object (for fluent API support)
	 */
	public function setCvrNumber($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cvr_number !== $v) {
			$this->cvr_number = $v;
			$this->modifiedColumns[] = TestPeer::CVR_NUMBER;
		}

		return $this;
	} // setCvrNumber()

	/**
	 * Set the value of [ean_number] column.
	 * 
	 * @param      int $v new value
	 * @return     Test The current object (for fluent API support)
	 */
	public function setEanNumber($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->ean_number !== $v) {
			$this->ean_number = $v;
			$this->modifiedColumns[] = TestPeer::EAN_NUMBER;
		}

		return $this;
	} // setEanNumber()

	/**
	 * Set the value of [address] column.
	 * 
	 * @param      string $v new value
	 * @return     Test The current object (for fluent API support)
	 */
	public function setAddress($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->address !== $v) {
			$this->address = $v;
			$this->modifiedColumns[] = TestPeer::ADDRESS;
		}

		return $this;
	} // setAddress()

	/**
	 * Set the value of [post_code] column.
	 * 
	 * @param      int $v new value
	 * @return     Test The current object (for fluent API support)
	 */
	public function setPostCode($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->post_code !== $v) {
			$this->post_code = $v;
			$this->modifiedColumns[] = TestPeer::POST_CODE;
		}

		return $this;
	} // setPostCode()

	/**
	 * Set the value of [country_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Test The current object (for fluent API support)
	 */
	public function setCountryId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->country_id !== $v) {
			$this->country_id = $v;
			$this->modifiedColumns[] = TestPeer::COUNTRY_ID;
		}

		return $this;
	} // setCountryId()

	/**
	 * Set the value of [city_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Test The current object (for fluent API support)
	 */
	public function setCityId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->city_id !== $v) {
			$this->city_id = $v;
			$this->modifiedColumns[] = TestPeer::CITY_ID;
		}

		return $this;
	} // setCityId()

	/**
	 * Set the value of [contact_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Test The current object (for fluent API support)
	 */
	public function setContactName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->contact_name !== $v) {
			$this->contact_name = $v;
			$this->modifiedColumns[] = TestPeer::CONTACT_NAME;
		}

		return $this;
	} // setContactName()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     Test The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = TestPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [head_phone_number] column.
	 * 
	 * @param      int $v new value
	 * @return     Test The current object (for fluent API support)
	 */
	public function setHeadPhoneNumber($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->head_phone_number !== $v) {
			$this->head_phone_number = $v;
			$this->modifiedColumns[] = TestPeer::HEAD_PHONE_NUMBER;
		}

		return $this;
	} // setHeadPhoneNumber()

	/**
	 * Set the value of [fax_number] column.
	 * 
	 * @param      int $v new value
	 * @return     Test The current object (for fluent API support)
	 */
	public function setFaxNumber($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->fax_number !== $v) {
			$this->fax_number = $v;
			$this->modifiedColumns[] = TestPeer::FAX_NUMBER;
		}

		return $this;
	} // setFaxNumber()

	/**
	 * Set the value of [website] column.
	 * 
	 * @param      string $v new value
	 * @return     Test The current object (for fluent API support)
	 */
	public function setWebsite($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->website !== $v) {
			$this->website = $v;
			$this->modifiedColumns[] = TestPeer::WEBSITE;
		}

		return $this;
	} // setWebsite()

	/**
	 * Set the value of [status_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Test The current object (for fluent API support)
	 */
	public function setStatusId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->status_id !== $v) {
			$this->status_id = $v;
			$this->modifiedColumns[] = TestPeer::STATUS_ID;
		}

		return $this;
	} // setStatusId()

	/**
	 * Set the value of [company_size_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Test The current object (for fluent API support)
	 */
	public function setCompanySizeId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->company_size_id !== $v) {
			$this->company_size_id = $v;
			$this->modifiedColumns[] = TestPeer::COMPANY_SIZE_ID;
		}

		return $this;
	} // setCompanySizeId()

	/**
	 * Set the value of [company_type_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Test The current object (for fluent API support)
	 */
	public function setCompanyTypeId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->company_type_id !== $v) {
			$this->company_type_id = $v;
			$this->modifiedColumns[] = TestPeer::COMPANY_TYPE_ID;
		}

		return $this;
	} // setCompanyTypeId()

	/**
	 * Set the value of [customer_type_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Test The current object (for fluent API support)
	 */
	public function setCustomerTypeId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->customer_type_id !== $v) {
			$this->customer_type_id = $v;
			$this->modifiedColumns[] = TestPeer::CUSTOMER_TYPE_ID;
		}

		return $this;
	} // setCustomerTypeId()

	/**
	 * Set the value of [cpr_number] column.
	 * 
	 * @param      int $v new value
	 * @return     Test The current object (for fluent API support)
	 */
	public function setCprNumber($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cpr_number !== $v) {
			$this->cpr_number = $v;
			$this->modifiedColumns[] = TestPeer::CPR_NUMBER;
		}

		return $this;
	} // setCprNumber()

	/**
	 * Set the value of [apartment_form_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Test The current object (for fluent API support)
	 */
	public function setApartmentFormId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->apartment_form_id !== $v) {
			$this->apartment_form_id = $v;
			$this->modifiedColumns[] = TestPeer::APARTMENT_FORM_ID;
		}

		return $this;
	} // setApartmentFormId()

	/**
	 * Set the value of [invoice_method_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Test The current object (for fluent API support)
	 */
	public function setInvoiceMethodId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->invoice_method_id !== $v) {
			$this->invoice_method_id = $v;
			$this->modifiedColumns[] = TestPeer::INVOICE_METHOD_ID;
		}

		return $this;
	} // setInvoiceMethodId()

	/**
	 * Set the value of [account_manager_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Test The current object (for fluent API support)
	 */
	public function setAccountManagerId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->account_manager_id !== $v) {
			$this->account_manager_id = $v;
			$this->modifiedColumns[] = TestPeer::ACCOUNT_MANAGER_ID;
		}

		return $this;
	} // setAccountManagerId()

	/**
	 * Set the value of [agent_company_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Test The current object (for fluent API support)
	 */
	public function setAgentCompanyId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->agent_company_id !== $v) {
			$this->agent_company_id = $v;
			$this->modifiedColumns[] = TestPeer::AGENT_COMPANY_ID;
		}

		return $this;
	} // setAgentCompanyId()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Test The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = TestPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [confirmed_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Test The current object (for fluent API support)
	 */
	public function setConfirmedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->confirmed_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->confirmed_at !== null && $tmpDt = new DateTime($this->confirmed_at)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->confirmed_at = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TestPeer::CONFIRMED_AT;
			}
		} // if either are not null

		return $this;
	} // setConfirmedAt()

	/**
	 * Sets the value of [sim_card_dispatch_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Test The current object (for fluent API support)
	 */
	public function setSimCardDispatchDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->sim_card_dispatch_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->sim_card_dispatch_date !== null && $tmpDt = new DateTime($this->sim_card_dispatch_date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->sim_card_dispatch_date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = TestPeer::SIM_CARD_DISPATCH_DATE;
			}
		} // if either are not null

		return $this;
	} // setSimCardDispatchDate()

	/**
	 * Set the value of [package_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Test The current object (for fluent API support)
	 */
	public function setPackageId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->package_id !== $v) {
			$this->package_id = $v;
			$this->modifiedColumns[] = TestPeer::PACKAGE_ID;
		}

		return $this;
	} // setPackageId()

	/**
	 * Set the value of [send_letter] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Test The current object (for fluent API support)
	 */
	public function setSendLetter($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->send_letter !== $v || $v === false) {
			$this->send_letter = $v;
			$this->modifiedColumns[] = TestPeer::SEND_LETTER;
		}

		return $this;
	} // setSendLetter()

	/**
	 * Set the value of [send_email] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Test The current object (for fluent API support)
	 */
	public function setSendEmail($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->send_email !== $v || $v === true) {
			$this->send_email = $v;
			$this->modifiedColumns[] = TestPeer::SEND_EMAIL;
		}

		return $this;
	} // setSendEmail()

	/**
	 * Set the value of [send_specification] column.
	 * 
	 * @param      boolean $v new value
	 * @return     Test The current object (for fluent API support)
	 */
	public function setSendSpecification($v)
	{
		if ($v !== null) {
			$v = (boolean) $v;
		}

		if ($this->send_specification !== $v || $v === false) {
			$this->send_specification = $v;
			$this->modifiedColumns[] = TestPeer::SEND_SPECIFICATION;
		}

		return $this;
	} // setSendSpecification()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(TestPeer::SEND_LETTER,TestPeer::SEND_EMAIL,TestPeer::SEND_SPECIFICATION))) {
				return false;
			}

			if ($this->send_letter !== false) {
				return false;
			}

			if ($this->send_email !== true) {
				return false;
			}

			if ($this->send_specification !== false) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->name = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->cvr_number = ($row[$startcol + 2] !== null) ? (int) $row[$startcol + 2] : null;
			$this->ean_number = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->address = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->post_code = ($row[$startcol + 5] !== null) ? (int) $row[$startcol + 5] : null;
			$this->country_id = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->city_id = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->contact_name = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->email = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->head_phone_number = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->fax_number = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->website = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->status_id = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->company_size_id = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->company_type_id = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->customer_type_id = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->cpr_number = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->apartment_form_id = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->invoice_method_id = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
			$this->account_manager_id = ($row[$startcol + 20] !== null) ? (int) $row[$startcol + 20] : null;
			$this->agent_company_id = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
			$this->created_at = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->confirmed_at = ($row[$startcol + 23] !== null) ? (string) $row[$startcol + 23] : null;
			$this->sim_card_dispatch_date = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->package_id = ($row[$startcol + 25] !== null) ? (int) $row[$startcol + 25] : null;
			$this->send_letter = ($row[$startcol + 26] !== null) ? (boolean) $row[$startcol + 26] : null;
			$this->send_email = ($row[$startcol + 27] !== null) ? (boolean) $row[$startcol + 27] : null;
			$this->send_specification = ($row[$startcol + 28] !== null) ? (boolean) $row[$startcol + 28] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 29; // 29 = TestPeer::NUM_COLUMNS - TestPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Test object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TestPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = TestPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseTest:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TestPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			TestPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseTest:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseTest:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(TestPeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(TestPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseTest:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			TestPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			if ($this->isNew() ) {
				$this->modifiedColumns[] = TestPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = TestPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += TestPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			if (($retval = TestPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}



			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TestPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getName();
				break;
			case 2:
				return $this->getCvrNumber();
				break;
			case 3:
				return $this->getEanNumber();
				break;
			case 4:
				return $this->getAddress();
				break;
			case 5:
				return $this->getPostCode();
				break;
			case 6:
				return $this->getCountryId();
				break;
			case 7:
				return $this->getCityId();
				break;
			case 8:
				return $this->getContactName();
				break;
			case 9:
				return $this->getEmail();
				break;
			case 10:
				return $this->getHeadPhoneNumber();
				break;
			case 11:
				return $this->getFaxNumber();
				break;
			case 12:
				return $this->getWebsite();
				break;
			case 13:
				return $this->getStatusId();
				break;
			case 14:
				return $this->getCompanySizeId();
				break;
			case 15:
				return $this->getCompanyTypeId();
				break;
			case 16:
				return $this->getCustomerTypeId();
				break;
			case 17:
				return $this->getCprNumber();
				break;
			case 18:
				return $this->getApartmentFormId();
				break;
			case 19:
				return $this->getInvoiceMethodId();
				break;
			case 20:
				return $this->getAccountManagerId();
				break;
			case 21:
				return $this->getAgentCompanyId();
				break;
			case 22:
				return $this->getCreatedAt();
				break;
			case 23:
				return $this->getConfirmedAt();
				break;
			case 24:
				return $this->getSimCardDispatchDate();
				break;
			case 25:
				return $this->getPackageId();
				break;
			case 26:
				return $this->getSendLetter();
				break;
			case 27:
				return $this->getSendEmail();
				break;
			case 28:
				return $this->getSendSpecification();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = TestPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getName(),
			$keys[2] => $this->getCvrNumber(),
			$keys[3] => $this->getEanNumber(),
			$keys[4] => $this->getAddress(),
			$keys[5] => $this->getPostCode(),
			$keys[6] => $this->getCountryId(),
			$keys[7] => $this->getCityId(),
			$keys[8] => $this->getContactName(),
			$keys[9] => $this->getEmail(),
			$keys[10] => $this->getHeadPhoneNumber(),
			$keys[11] => $this->getFaxNumber(),
			$keys[12] => $this->getWebsite(),
			$keys[13] => $this->getStatusId(),
			$keys[14] => $this->getCompanySizeId(),
			$keys[15] => $this->getCompanyTypeId(),
			$keys[16] => $this->getCustomerTypeId(),
			$keys[17] => $this->getCprNumber(),
			$keys[18] => $this->getApartmentFormId(),
			$keys[19] => $this->getInvoiceMethodId(),
			$keys[20] => $this->getAccountManagerId(),
			$keys[21] => $this->getAgentCompanyId(),
			$keys[22] => $this->getCreatedAt(),
			$keys[23] => $this->getConfirmedAt(),
			$keys[24] => $this->getSimCardDispatchDate(),
			$keys[25] => $this->getPackageId(),
			$keys[26] => $this->getSendLetter(),
			$keys[27] => $this->getSendEmail(),
			$keys[28] => $this->getSendSpecification(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = TestPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setName($value);
				break;
			case 2:
				$this->setCvrNumber($value);
				break;
			case 3:
				$this->setEanNumber($value);
				break;
			case 4:
				$this->setAddress($value);
				break;
			case 5:
				$this->setPostCode($value);
				break;
			case 6:
				$this->setCountryId($value);
				break;
			case 7:
				$this->setCityId($value);
				break;
			case 8:
				$this->setContactName($value);
				break;
			case 9:
				$this->setEmail($value);
				break;
			case 10:
				$this->setHeadPhoneNumber($value);
				break;
			case 11:
				$this->setFaxNumber($value);
				break;
			case 12:
				$this->setWebsite($value);
				break;
			case 13:
				$this->setStatusId($value);
				break;
			case 14:
				$this->setCompanySizeId($value);
				break;
			case 15:
				$this->setCompanyTypeId($value);
				break;
			case 16:
				$this->setCustomerTypeId($value);
				break;
			case 17:
				$this->setCprNumber($value);
				break;
			case 18:
				$this->setApartmentFormId($value);
				break;
			case 19:
				$this->setInvoiceMethodId($value);
				break;
			case 20:
				$this->setAccountManagerId($value);
				break;
			case 21:
				$this->setAgentCompanyId($value);
				break;
			case 22:
				$this->setCreatedAt($value);
				break;
			case 23:
				$this->setConfirmedAt($value);
				break;
			case 24:
				$this->setSimCardDispatchDate($value);
				break;
			case 25:
				$this->setPackageId($value);
				break;
			case 26:
				$this->setSendLetter($value);
				break;
			case 27:
				$this->setSendEmail($value);
				break;
			case 28:
				$this->setSendSpecification($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = TestPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setName($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setCvrNumber($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setEanNumber($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setAddress($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setPostCode($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setCountryId($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setCityId($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setContactName($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setEmail($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setHeadPhoneNumber($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setFaxNumber($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setWebsite($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setStatusId($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setCompanySizeId($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setCompanyTypeId($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setCustomerTypeId($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setCprNumber($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setApartmentFormId($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setInvoiceMethodId($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setAccountManagerId($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setAgentCompanyId($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setCreatedAt($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setConfirmedAt($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setSimCardDispatchDate($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setPackageId($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setSendLetter($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setSendEmail($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setSendSpecification($arr[$keys[28]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(TestPeer::DATABASE_NAME);

		if ($this->isColumnModified(TestPeer::ID)) $criteria->add(TestPeer::ID, $this->id);
		if ($this->isColumnModified(TestPeer::NAME)) $criteria->add(TestPeer::NAME, $this->name);
		if ($this->isColumnModified(TestPeer::CVR_NUMBER)) $criteria->add(TestPeer::CVR_NUMBER, $this->cvr_number);
		if ($this->isColumnModified(TestPeer::EAN_NUMBER)) $criteria->add(TestPeer::EAN_NUMBER, $this->ean_number);
		if ($this->isColumnModified(TestPeer::ADDRESS)) $criteria->add(TestPeer::ADDRESS, $this->address);
		if ($this->isColumnModified(TestPeer::POST_CODE)) $criteria->add(TestPeer::POST_CODE, $this->post_code);
		if ($this->isColumnModified(TestPeer::COUNTRY_ID)) $criteria->add(TestPeer::COUNTRY_ID, $this->country_id);
		if ($this->isColumnModified(TestPeer::CITY_ID)) $criteria->add(TestPeer::CITY_ID, $this->city_id);
		if ($this->isColumnModified(TestPeer::CONTACT_NAME)) $criteria->add(TestPeer::CONTACT_NAME, $this->contact_name);
		if ($this->isColumnModified(TestPeer::EMAIL)) $criteria->add(TestPeer::EMAIL, $this->email);
		if ($this->isColumnModified(TestPeer::HEAD_PHONE_NUMBER)) $criteria->add(TestPeer::HEAD_PHONE_NUMBER, $this->head_phone_number);
		if ($this->isColumnModified(TestPeer::FAX_NUMBER)) $criteria->add(TestPeer::FAX_NUMBER, $this->fax_number);
		if ($this->isColumnModified(TestPeer::WEBSITE)) $criteria->add(TestPeer::WEBSITE, $this->website);
		if ($this->isColumnModified(TestPeer::STATUS_ID)) $criteria->add(TestPeer::STATUS_ID, $this->status_id);
		if ($this->isColumnModified(TestPeer::COMPANY_SIZE_ID)) $criteria->add(TestPeer::COMPANY_SIZE_ID, $this->company_size_id);
		if ($this->isColumnModified(TestPeer::COMPANY_TYPE_ID)) $criteria->add(TestPeer::COMPANY_TYPE_ID, $this->company_type_id);
		if ($this->isColumnModified(TestPeer::CUSTOMER_TYPE_ID)) $criteria->add(TestPeer::CUSTOMER_TYPE_ID, $this->customer_type_id);
		if ($this->isColumnModified(TestPeer::CPR_NUMBER)) $criteria->add(TestPeer::CPR_NUMBER, $this->cpr_number);
		if ($this->isColumnModified(TestPeer::APARTMENT_FORM_ID)) $criteria->add(TestPeer::APARTMENT_FORM_ID, $this->apartment_form_id);
		if ($this->isColumnModified(TestPeer::INVOICE_METHOD_ID)) $criteria->add(TestPeer::INVOICE_METHOD_ID, $this->invoice_method_id);
		if ($this->isColumnModified(TestPeer::ACCOUNT_MANAGER_ID)) $criteria->add(TestPeer::ACCOUNT_MANAGER_ID, $this->account_manager_id);
		if ($this->isColumnModified(TestPeer::AGENT_COMPANY_ID)) $criteria->add(TestPeer::AGENT_COMPANY_ID, $this->agent_company_id);
		if ($this->isColumnModified(TestPeer::CREATED_AT)) $criteria->add(TestPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(TestPeer::CONFIRMED_AT)) $criteria->add(TestPeer::CONFIRMED_AT, $this->confirmed_at);
		if ($this->isColumnModified(TestPeer::SIM_CARD_DISPATCH_DATE)) $criteria->add(TestPeer::SIM_CARD_DISPATCH_DATE, $this->sim_card_dispatch_date);
		if ($this->isColumnModified(TestPeer::PACKAGE_ID)) $criteria->add(TestPeer::PACKAGE_ID, $this->package_id);
		if ($this->isColumnModified(TestPeer::SEND_LETTER)) $criteria->add(TestPeer::SEND_LETTER, $this->send_letter);
		if ($this->isColumnModified(TestPeer::SEND_EMAIL)) $criteria->add(TestPeer::SEND_EMAIL, $this->send_email);
		if ($this->isColumnModified(TestPeer::SEND_SPECIFICATION)) $criteria->add(TestPeer::SEND_SPECIFICATION, $this->send_specification);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(TestPeer::DATABASE_NAME);

		$criteria->add(TestPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Test (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setName($this->name);

		$copyObj->setCvrNumber($this->cvr_number);

		$copyObj->setEanNumber($this->ean_number);

		$copyObj->setAddress($this->address);

		$copyObj->setPostCode($this->post_code);

		$copyObj->setCountryId($this->country_id);

		$copyObj->setCityId($this->city_id);

		$copyObj->setContactName($this->contact_name);

		$copyObj->setEmail($this->email);

		$copyObj->setHeadPhoneNumber($this->head_phone_number);

		$copyObj->setFaxNumber($this->fax_number);

		$copyObj->setWebsite($this->website);

		$copyObj->setStatusId($this->status_id);

		$copyObj->setCompanySizeId($this->company_size_id);

		$copyObj->setCompanyTypeId($this->company_type_id);

		$copyObj->setCustomerTypeId($this->customer_type_id);

		$copyObj->setCprNumber($this->cpr_number);

		$copyObj->setApartmentFormId($this->apartment_form_id);

		$copyObj->setInvoiceMethodId($this->invoice_method_id);

		$copyObj->setAccountManagerId($this->account_manager_id);

		$copyObj->setAgentCompanyId($this->agent_company_id);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setConfirmedAt($this->confirmed_at);

		$copyObj->setSimCardDispatchDate($this->sim_card_dispatch_date);

		$copyObj->setPackageId($this->package_id);

		$copyObj->setSendLetter($this->send_letter);

		$copyObj->setSendEmail($this->send_email);

		$copyObj->setSendSpecification($this->send_specification);


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Test Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     TestPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new TestPeer();
		}
		return self::$peer;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
		} // if ($deep)

	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseTest:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseTest::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseTest
