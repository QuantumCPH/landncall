<?php

/**
 * Base class that represents a row from the 'company' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.3.0-dev on:
 *
 * 01/03/12 09:22:02
 *
 * @package    lib.model.om
 */
abstract class BaseCompany extends BaseObject  implements Persistent {


  const PEER = 'CompanyPeer';

	/**
	 * The Peer class.
	 * Instance provides a convenient way of calling static methods on a class
	 * that calling code may not be able to identify.
	 * @var        CompanyPeer
	 */
	protected static $peer;

	/**
	 * The value for the id field.
	 * @var        int
	 */
	protected $id;

	/**
	 * The value for the name field.
	 * @var        string
	 */
	protected $name;

	/**
	 * The value for the vat_no field.
	 * @var        string
	 */
	protected $vat_no;

	/**
	 * The value for the ean_number field.
	 * @var        int
	 */
	protected $ean_number;

	/**
	 * The value for the address field.
	 * @var        string
	 */
	protected $address;

	/**
	 * The value for the post_code field.
	 * @var        string
	 */
	protected $post_code;

	/**
	 * The value for the country_id field.
	 * @var        int
	 */
	protected $country_id;

	/**
	 * The value for the city_id field.
	 * @var        int
	 */
	protected $city_id;

	/**
	 * The value for the contact_name field.
	 * @var        string
	 */
	protected $contact_name;

	/**
	 * The value for the email field.
	 * @var        string
	 */
	protected $email;

	/**
	 * The value for the head_phone_number field.
	 * @var        int
	 */
	protected $head_phone_number;

	/**
	 * The value for the fax_number field.
	 * @var        int
	 */
	protected $fax_number;

	/**
	 * The value for the website field.
	 * @var        string
	 */
	protected $website;

	/**
	 * The value for the status_id field.
	 * @var        int
	 */
	protected $status_id;

	/**
	 * The value for the company_size_id field.
	 * @var        int
	 */
	protected $company_size_id;

	/**
	 * The value for the company_type_id field.
	 * @var        int
	 */
	protected $company_type_id;

	/**
	 * The value for the customer_type_id field.
	 * @var        int
	 */
	protected $customer_type_id;

	/**
	 * The value for the cpr_number field.
	 * @var        int
	 */
	protected $cpr_number;

	/**
	 * The value for the apartment_form_id field.
	 * @var        int
	 */
	protected $apartment_form_id;

	/**
	 * The value for the invoice_method_id field.
	 * @var        int
	 */
	protected $invoice_method_id;

	/**
	 * The value for the account_manager_id field.
	 * @var        int
	 */
	protected $account_manager_id;

	/**
	 * The value for the agent_company_id field.
	 * @var        int
	 */
	protected $agent_company_id;

	/**
	 * The value for the confirmed_at field.
	 * @var        string
	 */
	protected $confirmed_at;

	/**
	 * The value for the cvr_number field.
	 * @var        int
	 */
	protected $cvr_number;

	/**
	 * The value for the sim_card_dispatch_date field.
	 * @var        string
	 */
	protected $sim_card_dispatch_date;

	/**
	 * The value for the usage_discount_pc field.
	 * @var        double
	 */
	protected $usage_discount_pc;

	/**
	 * The value for the registration_date field.
	 * @var        string
	 */
	protected $registration_date;

	/**
	 * The value for the created_at field.
	 * Note: this column has a database default value of: (expression) CURRENT_TIMESTAMP
	 * @var        string
	 */
	protected $created_at;

	/**
	 * The value for the updated_at field.
	 * @var        string
	 */
	protected $updated_at;

	/**
	 * The value for the file_path field.
	 * @var        string
	 */
	protected $file_path;

	/**
	 * The value for the rate_table_id field.
	 * Note: this column has a database default value of: 1
	 * @var        int
	 */
	protected $rate_table_id;

	/**
	 * @var        Country
	 */
	protected $aCountry;

	/**
	 * @var        City
	 */
	protected $aCity;

	/**
	 * @var        Status
	 */
	protected $aStatus;

	/**
	 * @var        CompanySize
	 */
	protected $aCompanySize;

	/**
	 * @var        CompanyType
	 */
	protected $aCompanyType;

	/**
	 * @var        CustomerType
	 */
	protected $aCustomerType;

	/**
	 * @var        ApartmentForm
	 */
	protected $aApartmentForm;

	/**
	 * @var        InvoiceMethod
	 */
	protected $aInvoiceMethod;

	/**
	 * @var        User
	 */
	protected $aUser;

	/**
	 * @var        AgentCompany
	 */
	protected $aAgentCompany;

	/**
	 * @var        array ActivationCode[] Collection to store aggregation of ActivationCode objects.
	 */
	protected $collActivationCodes;

	/**
	 * @var        Criteria The criteria used to select the current contents of collActivationCodes.
	 */
	private $lastActivationCodeCriteria = null;

	/**
	 * @var        array CompanyBank[] Collection to store aggregation of CompanyBank objects.
	 */
	protected $collCompanyBanks;

	/**
	 * @var        Criteria The criteria used to select the current contents of collCompanyBanks.
	 */
	private $lastCompanyBankCriteria = null;

	/**
	 * @var        array Employee[] Collection to store aggregation of Employee objects.
	 */
	protected $collEmployees;

	/**
	 * @var        Criteria The criteria used to select the current contents of collEmployees.
	 */
	private $lastEmployeeCriteria = null;

	/**
	 * @var        array Invoice[] Collection to store aggregation of Invoice objects.
	 */
	protected $collInvoices;

	/**
	 * @var        Criteria The criteria used to select the current contents of collInvoices.
	 */
	private $lastInvoiceCriteria = null;

	/**
	 * @var        array OtherCost[] Collection to store aggregation of OtherCost objects.
	 */
	protected $collOtherCosts;

	/**
	 * @var        Criteria The criteria used to select the current contents of collOtherCosts.
	 */
	private $lastOtherCostCriteria = null;

	/**
	 * @var        array SaleActivity[] Collection to store aggregation of SaleActivity objects.
	 */
	protected $collSaleActivitys;

	/**
	 * @var        Criteria The criteria used to select the current contents of collSaleActivitys.
	 */
	private $lastSaleActivityCriteria = null;

	/**
	 * Flag to prevent endless save loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInSave = false;

	/**
	 * Flag to prevent endless validation loop, if this object is referenced
	 * by another object which falls in this transaction.
	 * @var        boolean
	 */
	protected $alreadyInValidation = false;

	/**
	 * Initializes internal state of BaseCompany object.
	 * @see        applyDefaults()
	 */
	public function __construct()
	{
		parent::__construct();
		$this->applyDefaultValues();
	}

	/**
	 * Applies default values to this object.
	 * This method should be called from the object's constructor (or
	 * equivalent initialization method).
	 * @see        __construct()
	 */
	public function applyDefaultValues()
	{
		$this->rate_table_id = 1;
	}

	/**
	 * Get the [id] column value.
	 * 
	 * @return     int
	 */
	public function getId()
	{
		return $this->id;
	}

	/**
	 * Get the [name] column value.
	 * 
	 * @return     string
	 */
	public function getName()
	{
		return $this->name;
	}

	/**
	 * Get the [vat_no] column value.
	 * 
	 * @return     string
	 */
	public function getVatNo()
	{
		return $this->vat_no;
	}

	/**
	 * Get the [ean_number] column value.
	 * 
	 * @return     int
	 */
	public function getEanNumber()
	{
		return $this->ean_number;
	}

	/**
	 * Get the [address] column value.
	 * 
	 * @return     string
	 */
	public function getAddress()
	{
		return $this->address;
	}

	/**
	 * Get the [post_code] column value.
	 * 
	 * @return     string
	 */
	public function getPostCode()
	{
		return $this->post_code;
	}

	/**
	 * Get the [country_id] column value.
	 * 
	 * @return     int
	 */
	public function getCountryId()
	{
		return $this->country_id;
	}

	/**
	 * Get the [city_id] column value.
	 * 
	 * @return     int
	 */
	public function getCityId()
	{
		return $this->city_id;
	}

	/**
	 * Get the [contact_name] column value.
	 * 
	 * @return     string
	 */
	public function getContactName()
	{
		return $this->contact_name;
	}

	/**
	 * Get the [email] column value.
	 * 
	 * @return     string
	 */
	public function getEmail()
	{
		return $this->email;
	}

	/**
	 * Get the [head_phone_number] column value.
	 * 
	 * @return     int
	 */
	public function getHeadPhoneNumber()
	{
		return $this->head_phone_number;
	}

	/**
	 * Get the [fax_number] column value.
	 * 
	 * @return     int
	 */
	public function getFaxNumber()
	{
		return $this->fax_number;
	}

	/**
	 * Get the [website] column value.
	 * 
	 * @return     string
	 */
	public function getWebsite()
	{
		return $this->website;
	}

	/**
	 * Get the [status_id] column value.
	 * 
	 * @return     int
	 */
	public function getStatusId()
	{
		return $this->status_id;
	}

	/**
	 * Get the [company_size_id] column value.
	 * 
	 * @return     int
	 */
	public function getCompanySizeId()
	{
		return $this->company_size_id;
	}

	/**
	 * Get the [company_type_id] column value.
	 * 
	 * @return     int
	 */
	public function getCompanyTypeId()
	{
		return $this->company_type_id;
	}

	/**
	 * Get the [customer_type_id] column value.
	 * 
	 * @return     int
	 */
	public function getCustomerTypeId()
	{
		return $this->customer_type_id;
	}

	/**
	 * Get the [cpr_number] column value.
	 * 
	 * @return     int
	 */
	public function getCprNumber()
	{
		return $this->cpr_number;
	}

	/**
	 * Get the [apartment_form_id] column value.
	 * 
	 * @return     int
	 */
	public function getApartmentFormId()
	{
		return $this->apartment_form_id;
	}

	/**
	 * Get the [invoice_method_id] column value.
	 * 
	 * @return     int
	 */
	public function getInvoiceMethodId()
	{
		return $this->invoice_method_id;
	}

	/**
	 * Get the [account_manager_id] column value.
	 * 
	 * @return     int
	 */
	public function getAccountManagerId()
	{
		return $this->account_manager_id;
	}

	/**
	 * Get the [agent_company_id] column value.
	 * 
	 * @return     int
	 */
	public function getAgentCompanyId()
	{
		return $this->agent_company_id;
	}

	/**
	 * Get the [optionally formatted] temporal [confirmed_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getConfirmedAt($format = 'Y-m-d')
	{
		if ($this->confirmed_at === null) {
			return null;
		}


		if ($this->confirmed_at === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->confirmed_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->confirmed_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [cvr_number] column value.
	 * 
	 * @return     int
	 */
	public function getCvrNumber()
	{
		return $this->cvr_number;
	}

	/**
	 * Get the [optionally formatted] temporal [sim_card_dispatch_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getSimCardDispatchDate($format = 'Y-m-d')
	{
		if ($this->sim_card_dispatch_date === null) {
			return null;
		}


		if ($this->sim_card_dispatch_date === '0000-00-00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->sim_card_dispatch_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->sim_card_dispatch_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [usage_discount_pc] column value.
	 * 
	 * @return     double
	 */
	public function getUsageDiscountPc()
	{
		return $this->usage_discount_pc;
	}

	/**
	 * Get the [optionally formatted] temporal [registration_date] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getRegistrationDate($format = 'Y-m-d H:i:s')
	{
		if ($this->registration_date === null) {
			return null;
		}


		if ($this->registration_date === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->registration_date);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->registration_date, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [created_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getCreatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->created_at === null) {
			return null;
		}


		if ($this->created_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->created_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->created_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [optionally formatted] temporal [updated_at] column value.
	 * 
	 *
	 * @param      string $format The date/time format string (either date()-style or strftime()-style).
	 *							If format is NULL, then the raw DateTime object will be returned.
	 * @return     mixed Formatted date/time value as string or DateTime object (if format is NULL), NULL if column is NULL, and 0 if column value is 0000-00-00 00:00:00
	 * @throws     PropelException - if unable to parse/validate the date/time value.
	 */
	public function getUpdatedAt($format = 'Y-m-d H:i:s')
	{
		if ($this->updated_at === null) {
			return null;
		}


		if ($this->updated_at === '0000-00-00 00:00:00') {
			// while technically this is not a default value of NULL,
			// this seems to be closest in meaning.
			return null;
		} else {
			try {
				$dt = new DateTime($this->updated_at);
			} catch (Exception $x) {
				throw new PropelException("Internally stored date/time/timestamp value could not be converted to DateTime: " . var_export($this->updated_at, true), $x);
			}
		}

		if ($format === null) {
			// Because propel.useDateTimeClass is TRUE, we return a DateTime object.
			return $dt;
		} elseif (strpos($format, '%') !== false) {
			return strftime($format, $dt->format('U'));
		} else {
			return $dt->format($format);
		}
	}

	/**
	 * Get the [file_path] column value.
	 * 
	 * @return     string
	 */
	public function getFilePath()
	{
		return $this->file_path;
	}

	/**
	 * Get the [rate_table_id] column value.
	 * 
	 * @return     int
	 */
	public function getRateTableId()
	{
		return $this->rate_table_id;
	}

	/**
	 * Set the value of [id] column.
	 * 
	 * @param      int $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->id !== $v) {
			$this->id = $v;
			$this->modifiedColumns[] = CompanyPeer::ID;
		}

		return $this;
	} // setId()

	/**
	 * Set the value of [name] column.
	 * 
	 * @param      string $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->name !== $v) {
			$this->name = $v;
			$this->modifiedColumns[] = CompanyPeer::NAME;
		}

		return $this;
	} // setName()

	/**
	 * Set the value of [vat_no] column.
	 * 
	 * @param      string $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setVatNo($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->vat_no !== $v) {
			$this->vat_no = $v;
			$this->modifiedColumns[] = CompanyPeer::VAT_NO;
		}

		return $this;
	} // setVatNo()

	/**
	 * Set the value of [ean_number] column.
	 * 
	 * @param      int $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setEanNumber($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->ean_number !== $v) {
			$this->ean_number = $v;
			$this->modifiedColumns[] = CompanyPeer::EAN_NUMBER;
		}

		return $this;
	} // setEanNumber()

	/**
	 * Set the value of [address] column.
	 * 
	 * @param      string $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setAddress($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->address !== $v) {
			$this->address = $v;
			$this->modifiedColumns[] = CompanyPeer::ADDRESS;
		}

		return $this;
	} // setAddress()

	/**
	 * Set the value of [post_code] column.
	 * 
	 * @param      string $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setPostCode($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->post_code !== $v) {
			$this->post_code = $v;
			$this->modifiedColumns[] = CompanyPeer::POST_CODE;
		}

		return $this;
	} // setPostCode()

	/**
	 * Set the value of [country_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setCountryId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->country_id !== $v) {
			$this->country_id = $v;
			$this->modifiedColumns[] = CompanyPeer::COUNTRY_ID;
		}

		if ($this->aCountry !== null && $this->aCountry->getId() !== $v) {
			$this->aCountry = null;
		}

		return $this;
	} // setCountryId()

	/**
	 * Set the value of [city_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setCityId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->city_id !== $v) {
			$this->city_id = $v;
			$this->modifiedColumns[] = CompanyPeer::CITY_ID;
		}

		if ($this->aCity !== null && $this->aCity->getId() !== $v) {
			$this->aCity = null;
		}

		return $this;
	} // setCityId()

	/**
	 * Set the value of [contact_name] column.
	 * 
	 * @param      string $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setContactName($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->contact_name !== $v) {
			$this->contact_name = $v;
			$this->modifiedColumns[] = CompanyPeer::CONTACT_NAME;
		}

		return $this;
	} // setContactName()

	/**
	 * Set the value of [email] column.
	 * 
	 * @param      string $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setEmail($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->email !== $v) {
			$this->email = $v;
			$this->modifiedColumns[] = CompanyPeer::EMAIL;
		}

		return $this;
	} // setEmail()

	/**
	 * Set the value of [head_phone_number] column.
	 * 
	 * @param      int $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setHeadPhoneNumber($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->head_phone_number !== $v) {
			$this->head_phone_number = $v;
			$this->modifiedColumns[] = CompanyPeer::HEAD_PHONE_NUMBER;
		}

		return $this;
	} // setHeadPhoneNumber()

	/**
	 * Set the value of [fax_number] column.
	 * 
	 * @param      int $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setFaxNumber($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->fax_number !== $v) {
			$this->fax_number = $v;
			$this->modifiedColumns[] = CompanyPeer::FAX_NUMBER;
		}

		return $this;
	} // setFaxNumber()

	/**
	 * Set the value of [website] column.
	 * 
	 * @param      string $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setWebsite($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->website !== $v) {
			$this->website = $v;
			$this->modifiedColumns[] = CompanyPeer::WEBSITE;
		}

		return $this;
	} // setWebsite()

	/**
	 * Set the value of [status_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setStatusId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->status_id !== $v) {
			$this->status_id = $v;
			$this->modifiedColumns[] = CompanyPeer::STATUS_ID;
		}

		if ($this->aStatus !== null && $this->aStatus->getId() !== $v) {
			$this->aStatus = null;
		}

		return $this;
	} // setStatusId()

	/**
	 * Set the value of [company_size_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setCompanySizeId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->company_size_id !== $v) {
			$this->company_size_id = $v;
			$this->modifiedColumns[] = CompanyPeer::COMPANY_SIZE_ID;
		}

		if ($this->aCompanySize !== null && $this->aCompanySize->getId() !== $v) {
			$this->aCompanySize = null;
		}

		return $this;
	} // setCompanySizeId()

	/**
	 * Set the value of [company_type_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setCompanyTypeId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->company_type_id !== $v) {
			$this->company_type_id = $v;
			$this->modifiedColumns[] = CompanyPeer::COMPANY_TYPE_ID;
		}

		if ($this->aCompanyType !== null && $this->aCompanyType->getId() !== $v) {
			$this->aCompanyType = null;
		}

		return $this;
	} // setCompanyTypeId()

	/**
	 * Set the value of [customer_type_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setCustomerTypeId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->customer_type_id !== $v) {
			$this->customer_type_id = $v;
			$this->modifiedColumns[] = CompanyPeer::CUSTOMER_TYPE_ID;
		}

		if ($this->aCustomerType !== null && $this->aCustomerType->getId() !== $v) {
			$this->aCustomerType = null;
		}

		return $this;
	} // setCustomerTypeId()

	/**
	 * Set the value of [cpr_number] column.
	 * 
	 * @param      int $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setCprNumber($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cpr_number !== $v) {
			$this->cpr_number = $v;
			$this->modifiedColumns[] = CompanyPeer::CPR_NUMBER;
		}

		return $this;
	} // setCprNumber()

	/**
	 * Set the value of [apartment_form_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setApartmentFormId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->apartment_form_id !== $v) {
			$this->apartment_form_id = $v;
			$this->modifiedColumns[] = CompanyPeer::APARTMENT_FORM_ID;
		}

		if ($this->aApartmentForm !== null && $this->aApartmentForm->getId() !== $v) {
			$this->aApartmentForm = null;
		}

		return $this;
	} // setApartmentFormId()

	/**
	 * Set the value of [invoice_method_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setInvoiceMethodId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->invoice_method_id !== $v) {
			$this->invoice_method_id = $v;
			$this->modifiedColumns[] = CompanyPeer::INVOICE_METHOD_ID;
		}

		if ($this->aInvoiceMethod !== null && $this->aInvoiceMethod->getId() !== $v) {
			$this->aInvoiceMethod = null;
		}

		return $this;
	} // setInvoiceMethodId()

	/**
	 * Set the value of [account_manager_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setAccountManagerId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->account_manager_id !== $v) {
			$this->account_manager_id = $v;
			$this->modifiedColumns[] = CompanyPeer::ACCOUNT_MANAGER_ID;
		}

		if ($this->aUser !== null && $this->aUser->getId() !== $v) {
			$this->aUser = null;
		}

		return $this;
	} // setAccountManagerId()

	/**
	 * Set the value of [agent_company_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setAgentCompanyId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->agent_company_id !== $v) {
			$this->agent_company_id = $v;
			$this->modifiedColumns[] = CompanyPeer::AGENT_COMPANY_ID;
		}

		if ($this->aAgentCompany !== null && $this->aAgentCompany->getId() !== $v) {
			$this->aAgentCompany = null;
		}

		return $this;
	} // setAgentCompanyId()

	/**
	 * Sets the value of [confirmed_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Company The current object (for fluent API support)
	 */
	public function setConfirmedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->confirmed_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->confirmed_at !== null && $tmpDt = new DateTime($this->confirmed_at)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->confirmed_at = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = CompanyPeer::CONFIRMED_AT;
			}
		} // if either are not null

		return $this;
	} // setConfirmedAt()

	/**
	 * Set the value of [cvr_number] column.
	 * 
	 * @param      int $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setCvrNumber($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->cvr_number !== $v) {
			$this->cvr_number = $v;
			$this->modifiedColumns[] = CompanyPeer::CVR_NUMBER;
		}

		return $this;
	} // setCvrNumber()

	/**
	 * Sets the value of [sim_card_dispatch_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Company The current object (for fluent API support)
	 */
	public function setSimCardDispatchDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->sim_card_dispatch_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->sim_card_dispatch_date !== null && $tmpDt = new DateTime($this->sim_card_dispatch_date)) ? $tmpDt->format('Y-m-d') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->sim_card_dispatch_date = ($dt ? $dt->format('Y-m-d') : null);
				$this->modifiedColumns[] = CompanyPeer::SIM_CARD_DISPATCH_DATE;
			}
		} // if either are not null

		return $this;
	} // setSimCardDispatchDate()

	/**
	 * Set the value of [usage_discount_pc] column.
	 * 
	 * @param      double $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setUsageDiscountPc($v)
	{
		if ($v !== null) {
			$v = (double) $v;
		}

		if ($this->usage_discount_pc !== $v) {
			$this->usage_discount_pc = $v;
			$this->modifiedColumns[] = CompanyPeer::USAGE_DISCOUNT_PC;
		}

		return $this;
	} // setUsageDiscountPc()

	/**
	 * Sets the value of [registration_date] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Company The current object (for fluent API support)
	 */
	public function setRegistrationDate($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->registration_date !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->registration_date !== null && $tmpDt = new DateTime($this->registration_date)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->registration_date = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = CompanyPeer::REGISTRATION_DATE;
			}
		} // if either are not null

		return $this;
	} // setRegistrationDate()

	/**
	 * Sets the value of [created_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Company The current object (for fluent API support)
	 */
	public function setCreatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->created_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->created_at !== null && $tmpDt = new DateTime($this->created_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->created_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = CompanyPeer::CREATED_AT;
			}
		} // if either are not null

		return $this;
	} // setCreatedAt()

	/**
	 * Sets the value of [updated_at] column to a normalized version of the date/time value specified.
	 * 
	 * @param      mixed $v string, integer (timestamp), or DateTime value.  Empty string will
	 *						be treated as NULL for temporal objects.
	 * @return     Company The current object (for fluent API support)
	 */
	public function setUpdatedAt($v)
	{
		// we treat '' as NULL for temporal objects because DateTime('') == DateTime('now')
		// -- which is unexpected, to say the least.
		if ($v === null || $v === '') {
			$dt = null;
		} elseif ($v instanceof DateTime) {
			$dt = $v;
		} else {
			// some string/numeric value passed; we normalize that so that we can
			// validate it.
			try {
				if (is_numeric($v)) { // if it's a unix timestamp
					$dt = new DateTime('@'.$v, new DateTimeZone('UTC'));
					// We have to explicitly specify and then change the time zone because of a
					// DateTime bug: http://bugs.php.net/bug.php?id=43003
					$dt->setTimeZone(new DateTimeZone(date_default_timezone_get()));
				} else {
					$dt = new DateTime($v);
				}
			} catch (Exception $x) {
				throw new PropelException('Error parsing date/time value: ' . var_export($v, true), $x);
			}
		}

		if ( $this->updated_at !== null || $dt !== null ) {
			// (nested ifs are a little easier to read in this case)

			$currNorm = ($this->updated_at !== null && $tmpDt = new DateTime($this->updated_at)) ? $tmpDt->format('Y-m-d H:i:s') : null;
			$newNorm = ($dt !== null) ? $dt->format('Y-m-d H:i:s') : null;

			if ( ($currNorm !== $newNorm) // normalized values don't match 
					)
			{
				$this->updated_at = ($dt ? $dt->format('Y-m-d H:i:s') : null);
				$this->modifiedColumns[] = CompanyPeer::UPDATED_AT;
			}
		} // if either are not null

		return $this;
	} // setUpdatedAt()

	/**
	 * Set the value of [file_path] column.
	 * 
	 * @param      string $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setFilePath($v)
	{
		if ($v !== null) {
			$v = (string) $v;
		}

		if ($this->file_path !== $v) {
			$this->file_path = $v;
			$this->modifiedColumns[] = CompanyPeer::FILE_PATH;
		}

		return $this;
	} // setFilePath()

	/**
	 * Set the value of [rate_table_id] column.
	 * 
	 * @param      int $v new value
	 * @return     Company The current object (for fluent API support)
	 */
	public function setRateTableId($v)
	{
		if ($v !== null) {
			$v = (int) $v;
		}

		if ($this->rate_table_id !== $v || $v === 1) {
			$this->rate_table_id = $v;
			$this->modifiedColumns[] = CompanyPeer::RATE_TABLE_ID;
		}

		return $this;
	} // setRateTableId()

	/**
	 * Indicates whether the columns in this object are only set to default values.
	 *
	 * This method can be used in conjunction with isModified() to indicate whether an object is both
	 * modified _and_ has some values set which are non-default.
	 *
	 * @return     boolean Whether the columns in this object are only been set with default values.
	 */
	public function hasOnlyDefaultValues()
	{
			// First, ensure that we don't have any columns that have been modified which aren't default columns.
			if (array_diff($this->modifiedColumns, array(CompanyPeer::RATE_TABLE_ID))) {
				return false;
			}

			if ($this->rate_table_id !== 1) {
				return false;
			}

		// otherwise, everything was equal, so return TRUE
		return true;
	} // hasOnlyDefaultValues()

	/**
	 * Hydrates (populates) the object variables with values from the database resultset.
	 *
	 * An offset (0-based "start column") is specified so that objects can be hydrated
	 * with a subset of the columns in the resultset rows.  This is needed, for example,
	 * for results of JOIN queries where the resultset row includes columns from two or
	 * more tables.
	 *
	 * @param      array $row The row returned by PDOStatement->fetch(PDO::FETCH_NUM)
	 * @param      int $startcol 0-based offset column which indicates which restultset column to start with.
	 * @param      boolean $rehydrate Whether this object is being re-hydrated from the database.
	 * @return     int next starting column
	 * @throws     PropelException  - Any caught Exception will be rewrapped as a PropelException.
	 */
	public function hydrate($row, $startcol = 0, $rehydrate = false)
	{
		try {

			$this->id = ($row[$startcol + 0] !== null) ? (int) $row[$startcol + 0] : null;
			$this->name = ($row[$startcol + 1] !== null) ? (string) $row[$startcol + 1] : null;
			$this->vat_no = ($row[$startcol + 2] !== null) ? (string) $row[$startcol + 2] : null;
			$this->ean_number = ($row[$startcol + 3] !== null) ? (int) $row[$startcol + 3] : null;
			$this->address = ($row[$startcol + 4] !== null) ? (string) $row[$startcol + 4] : null;
			$this->post_code = ($row[$startcol + 5] !== null) ? (string) $row[$startcol + 5] : null;
			$this->country_id = ($row[$startcol + 6] !== null) ? (int) $row[$startcol + 6] : null;
			$this->city_id = ($row[$startcol + 7] !== null) ? (int) $row[$startcol + 7] : null;
			$this->contact_name = ($row[$startcol + 8] !== null) ? (string) $row[$startcol + 8] : null;
			$this->email = ($row[$startcol + 9] !== null) ? (string) $row[$startcol + 9] : null;
			$this->head_phone_number = ($row[$startcol + 10] !== null) ? (int) $row[$startcol + 10] : null;
			$this->fax_number = ($row[$startcol + 11] !== null) ? (int) $row[$startcol + 11] : null;
			$this->website = ($row[$startcol + 12] !== null) ? (string) $row[$startcol + 12] : null;
			$this->status_id = ($row[$startcol + 13] !== null) ? (int) $row[$startcol + 13] : null;
			$this->company_size_id = ($row[$startcol + 14] !== null) ? (int) $row[$startcol + 14] : null;
			$this->company_type_id = ($row[$startcol + 15] !== null) ? (int) $row[$startcol + 15] : null;
			$this->customer_type_id = ($row[$startcol + 16] !== null) ? (int) $row[$startcol + 16] : null;
			$this->cpr_number = ($row[$startcol + 17] !== null) ? (int) $row[$startcol + 17] : null;
			$this->apartment_form_id = ($row[$startcol + 18] !== null) ? (int) $row[$startcol + 18] : null;
			$this->invoice_method_id = ($row[$startcol + 19] !== null) ? (int) $row[$startcol + 19] : null;
			$this->account_manager_id = ($row[$startcol + 20] !== null) ? (int) $row[$startcol + 20] : null;
			$this->agent_company_id = ($row[$startcol + 21] !== null) ? (int) $row[$startcol + 21] : null;
			$this->confirmed_at = ($row[$startcol + 22] !== null) ? (string) $row[$startcol + 22] : null;
			$this->cvr_number = ($row[$startcol + 23] !== null) ? (int) $row[$startcol + 23] : null;
			$this->sim_card_dispatch_date = ($row[$startcol + 24] !== null) ? (string) $row[$startcol + 24] : null;
			$this->usage_discount_pc = ($row[$startcol + 25] !== null) ? (double) $row[$startcol + 25] : null;
			$this->registration_date = ($row[$startcol + 26] !== null) ? (string) $row[$startcol + 26] : null;
			$this->created_at = ($row[$startcol + 27] !== null) ? (string) $row[$startcol + 27] : null;
			$this->updated_at = ($row[$startcol + 28] !== null) ? (string) $row[$startcol + 28] : null;
			$this->file_path = ($row[$startcol + 29] !== null) ? (string) $row[$startcol + 29] : null;
			$this->rate_table_id = ($row[$startcol + 30] !== null) ? (int) $row[$startcol + 30] : null;
			$this->resetModified();

			$this->setNew(false);

			if ($rehydrate) {
				$this->ensureConsistency();
			}

			// FIXME - using NUM_COLUMNS may be clearer.
			return $startcol + 31; // 31 = CompanyPeer::NUM_COLUMNS - CompanyPeer::NUM_LAZY_LOAD_COLUMNS).

		} catch (Exception $e) {
			throw new PropelException("Error populating Company object", $e);
		}
	}

	/**
	 * Checks and repairs the internal consistency of the object.
	 *
	 * This method is executed after an already-instantiated object is re-hydrated
	 * from the database.  It exists to check any foreign keys to make sure that
	 * the objects related to the current object are correct based on foreign key.
	 *
	 * You can override this method in the stub class, but you should always invoke
	 * the base method from the overridden method (i.e. parent::ensureConsistency()),
	 * in case your model changes.
	 *
	 * @throws     PropelException
	 */
	public function ensureConsistency()
	{

		if ($this->aCountry !== null && $this->country_id !== $this->aCountry->getId()) {
			$this->aCountry = null;
		}
		if ($this->aCity !== null && $this->city_id !== $this->aCity->getId()) {
			$this->aCity = null;
		}
		if ($this->aStatus !== null && $this->status_id !== $this->aStatus->getId()) {
			$this->aStatus = null;
		}
		if ($this->aCompanySize !== null && $this->company_size_id !== $this->aCompanySize->getId()) {
			$this->aCompanySize = null;
		}
		if ($this->aCompanyType !== null && $this->company_type_id !== $this->aCompanyType->getId()) {
			$this->aCompanyType = null;
		}
		if ($this->aCustomerType !== null && $this->customer_type_id !== $this->aCustomerType->getId()) {
			$this->aCustomerType = null;
		}
		if ($this->aApartmentForm !== null && $this->apartment_form_id !== $this->aApartmentForm->getId()) {
			$this->aApartmentForm = null;
		}
		if ($this->aInvoiceMethod !== null && $this->invoice_method_id !== $this->aInvoiceMethod->getId()) {
			$this->aInvoiceMethod = null;
		}
		if ($this->aUser !== null && $this->account_manager_id !== $this->aUser->getId()) {
			$this->aUser = null;
		}
		if ($this->aAgentCompany !== null && $this->agent_company_id !== $this->aAgentCompany->getId()) {
			$this->aAgentCompany = null;
		}
	} // ensureConsistency

	/**
	 * Reloads this object from datastore based on primary key and (optionally) resets all associated objects.
	 *
	 * This will only work if the object has been saved and has a valid primary key set.
	 *
	 * @param      boolean $deep (optional) Whether to also de-associated any related objects.
	 * @param      PropelPDO $con (optional) The PropelPDO connection to use.
	 * @return     void
	 * @throws     PropelException - if this object is deleted, unsaved or doesn't have pk match in db
	 */
	public function reload($deep = false, PropelPDO $con = null)
	{
		if ($this->isDeleted()) {
			throw new PropelException("Cannot reload a deleted object.");
		}

		if ($this->isNew()) {
			throw new PropelException("Cannot reload an unsaved object.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CompanyPeer::DATABASE_NAME, Propel::CONNECTION_READ);
		}

		// We don't need to alter the object instance pool; we're just modifying this instance
		// already in the pool.

		$stmt = CompanyPeer::doSelectStmt($this->buildPkeyCriteria(), $con);
		$row = $stmt->fetch(PDO::FETCH_NUM);
		$stmt->closeCursor();
		if (!$row) {
			throw new PropelException('Cannot find matching row in the database to reload object values.');
		}
		$this->hydrate($row, 0, true); // rehydrate

		if ($deep) {  // also de-associate any related objects?

			$this->aCountry = null;
			$this->aCity = null;
			$this->aStatus = null;
			$this->aCompanySize = null;
			$this->aCompanyType = null;
			$this->aCustomerType = null;
			$this->aApartmentForm = null;
			$this->aInvoiceMethod = null;
			$this->aUser = null;
			$this->aAgentCompany = null;
			$this->collActivationCodes = null;
			$this->lastActivationCodeCriteria = null;

			$this->collCompanyBanks = null;
			$this->lastCompanyBankCriteria = null;

			$this->collEmployees = null;
			$this->lastEmployeeCriteria = null;

			$this->collInvoices = null;
			$this->lastInvoiceCriteria = null;

			$this->collOtherCosts = null;
			$this->lastOtherCostCriteria = null;

			$this->collSaleActivitys = null;
			$this->lastSaleActivityCriteria = null;

		} // if (deep)
	}

	/**
	 * Removes this object from datastore and sets delete attribute.
	 *
	 * @param      PropelPDO $con
	 * @return     void
	 * @throws     PropelException
	 * @see        BaseObject::setDeleted()
	 * @see        BaseObject::isDeleted()
	 */
	public function delete(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseCompany:delete:pre') as $callable)
    {
      $ret = call_user_func($callable, $this, $con);
      if ($ret)
      {
        return;
      }
    }


		if ($this->isDeleted()) {
			throw new PropelException("This object has already been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CompanyPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			CompanyPeer::doDelete($this, $con);
			$this->setDeleted(true);
			$con->commit();
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	

    foreach (sfMixer::getCallables('BaseCompany:delete:post') as $callable)
    {
      call_user_func($callable, $this, $con);
    }

  }
	/**
	 * Persists this object to the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All modified related objects will also be persisted in the doSave()
	 * method.  This method wraps all precipitate database operations in a
	 * single transaction.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        doSave()
	 */
	public function save(PropelPDO $con = null)
	{

    foreach (sfMixer::getCallables('BaseCompany:save:pre') as $callable)
    {
      $affectedRows = call_user_func($callable, $this, $con);
      if (is_int($affectedRows))
      {
        return $affectedRows;
      }
    }


    if ($this->isNew() && !$this->isColumnModified(CompanyPeer::CREATED_AT))
    {
      $this->setCreatedAt(time());
    }

    if ($this->isModified() && !$this->isColumnModified(CompanyPeer::UPDATED_AT))
    {
      $this->setUpdatedAt(time());
    }

		if ($this->isDeleted()) {
			throw new PropelException("You cannot save an object that has been deleted.");
		}

		if ($con === null) {
			$con = Propel::getConnection(CompanyPeer::DATABASE_NAME, Propel::CONNECTION_WRITE);
		}
		
		$con->beginTransaction();
		try {
			$affectedRows = $this->doSave($con);
			$con->commit();
    foreach (sfMixer::getCallables('BaseCompany:save:post') as $callable)
    {
      call_user_func($callable, $this, $con, $affectedRows);
    }

			CompanyPeer::addInstanceToPool($this);
			return $affectedRows;
		} catch (PropelException $e) {
			$con->rollBack();
			throw $e;
		}
	}

	/**
	 * Performs the work of inserting or updating the row in the database.
	 *
	 * If the object is new, it inserts it; otherwise an update is performed.
	 * All related objects are also updated in this method.
	 *
	 * @param      PropelPDO $con
	 * @return     int The number of rows affected by this insert/update and any referring fk objects' save() operations.
	 * @throws     PropelException
	 * @see        save()
	 */
	protected function doSave(PropelPDO $con)
	{
		$affectedRows = 0; // initialize var to track total num of affected rows
		if (!$this->alreadyInSave) {
			$this->alreadyInSave = true;

			// We call the save method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aCountry !== null) {
				if ($this->aCountry->isModified() || $this->aCountry->isNew()) {
					$affectedRows += $this->aCountry->save($con);
				}
				$this->setCountry($this->aCountry);
			}

			if ($this->aCity !== null) {
				if ($this->aCity->isModified() || $this->aCity->isNew()) {
					$affectedRows += $this->aCity->save($con);
				}
				$this->setCity($this->aCity);
			}

			if ($this->aStatus !== null) {
				if ($this->aStatus->isModified() || $this->aStatus->isNew()) {
					$affectedRows += $this->aStatus->save($con);
				}
				$this->setStatus($this->aStatus);
			}

			if ($this->aCompanySize !== null) {
				if ($this->aCompanySize->isModified() || $this->aCompanySize->isNew()) {
					$affectedRows += $this->aCompanySize->save($con);
				}
				$this->setCompanySize($this->aCompanySize);
			}

			if ($this->aCompanyType !== null) {
				if ($this->aCompanyType->isModified() || $this->aCompanyType->isNew()) {
					$affectedRows += $this->aCompanyType->save($con);
				}
				$this->setCompanyType($this->aCompanyType);
			}

			if ($this->aCustomerType !== null) {
				if ($this->aCustomerType->isModified() || $this->aCustomerType->isNew()) {
					$affectedRows += $this->aCustomerType->save($con);
				}
				$this->setCustomerType($this->aCustomerType);
			}

			if ($this->aApartmentForm !== null) {
				if ($this->aApartmentForm->isModified() || $this->aApartmentForm->isNew()) {
					$affectedRows += $this->aApartmentForm->save($con);
				}
				$this->setApartmentForm($this->aApartmentForm);
			}

			if ($this->aInvoiceMethod !== null) {
				if ($this->aInvoiceMethod->isModified() || $this->aInvoiceMethod->isNew()) {
					$affectedRows += $this->aInvoiceMethod->save($con);
				}
				$this->setInvoiceMethod($this->aInvoiceMethod);
			}

			if ($this->aUser !== null) {
				if ($this->aUser->isModified() || $this->aUser->isNew()) {
					$affectedRows += $this->aUser->save($con);
				}
				$this->setUser($this->aUser);
			}

			if ($this->aAgentCompany !== null) {
				if ($this->aAgentCompany->isModified() || $this->aAgentCompany->isNew()) {
					$affectedRows += $this->aAgentCompany->save($con);
				}
				$this->setAgentCompany($this->aAgentCompany);
			}

			if ($this->isNew() ) {
				$this->modifiedColumns[] = CompanyPeer::ID;
			}

			// If this object has been modified, then save it to the database.
			if ($this->isModified()) {
				if ($this->isNew()) {
					$pk = CompanyPeer::doInsert($this, $con);
					$affectedRows += 1; // we are assuming that there is only 1 row per doInsert() which
										 // should always be true here (even though technically
										 // BasePeer::doInsert() can insert multiple rows).

					$this->setId($pk);  //[IMV] update autoincrement primary key

					$this->setNew(false);
				} else {
					$affectedRows += CompanyPeer::doUpdate($this, $con);
				}

				$this->resetModified(); // [HL] After being saved an object is no longer 'modified'
			}

			if ($this->collActivationCodes !== null) {
				foreach ($this->collActivationCodes as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collCompanyBanks !== null) {
				foreach ($this->collCompanyBanks as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collEmployees !== null) {
				foreach ($this->collEmployees as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collInvoices !== null) {
				foreach ($this->collInvoices as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collOtherCosts !== null) {
				foreach ($this->collOtherCosts as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			if ($this->collSaleActivitys !== null) {
				foreach ($this->collSaleActivitys as $referrerFK) {
					if (!$referrerFK->isDeleted()) {
						$affectedRows += $referrerFK->save($con);
					}
				}
			}

			$this->alreadyInSave = false;

		}
		return $affectedRows;
	} // doSave()

	/**
	 * Array of ValidationFailed objects.
	 * @var        array ValidationFailed[]
	 */
	protected $validationFailures = array();

	/**
	 * Gets any ValidationFailed objects that resulted from last call to validate().
	 *
	 *
	 * @return     array ValidationFailed[]
	 * @see        validate()
	 */
	public function getValidationFailures()
	{
		return $this->validationFailures;
	}

	/**
	 * Validates the objects modified field values and all objects related to this table.
	 *
	 * If $columns is either a column name or an array of column names
	 * only those columns are validated.
	 *
	 * @param      mixed $columns Column name or an array of column names.
	 * @return     boolean Whether all columns pass validation.
	 * @see        doValidate()
	 * @see        getValidationFailures()
	 */
	public function validate($columns = null)
	{
		$res = $this->doValidate($columns);
		if ($res === true) {
			$this->validationFailures = array();
			return true;
		} else {
			$this->validationFailures = $res;
			return false;
		}
	}

	/**
	 * This function performs the validation work for complex object models.
	 *
	 * In addition to checking the current object, all related objects will
	 * also be validated.  If all pass then <code>true</code> is returned; otherwise
	 * an aggreagated array of ValidationFailed objects will be returned.
	 *
	 * @param      array $columns Array of column names to validate.
	 * @return     mixed <code>true</code> if all validations pass; array of <code>ValidationFailed</code> objets otherwise.
	 */
	protected function doValidate($columns = null)
	{
		if (!$this->alreadyInValidation) {
			$this->alreadyInValidation = true;
			$retval = null;

			$failureMap = array();


			// We call the validate method on the following object(s) if they
			// were passed to this object by their coresponding set
			// method.  This object relates to these object(s) by a
			// foreign key reference.

			if ($this->aCountry !== null) {
				if (!$this->aCountry->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCountry->getValidationFailures());
				}
			}

			if ($this->aCity !== null) {
				if (!$this->aCity->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCity->getValidationFailures());
				}
			}

			if ($this->aStatus !== null) {
				if (!$this->aStatus->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aStatus->getValidationFailures());
				}
			}

			if ($this->aCompanySize !== null) {
				if (!$this->aCompanySize->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCompanySize->getValidationFailures());
				}
			}

			if ($this->aCompanyType !== null) {
				if (!$this->aCompanyType->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCompanyType->getValidationFailures());
				}
			}

			if ($this->aCustomerType !== null) {
				if (!$this->aCustomerType->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aCustomerType->getValidationFailures());
				}
			}

			if ($this->aApartmentForm !== null) {
				if (!$this->aApartmentForm->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aApartmentForm->getValidationFailures());
				}
			}

			if ($this->aInvoiceMethod !== null) {
				if (!$this->aInvoiceMethod->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aInvoiceMethod->getValidationFailures());
				}
			}

			if ($this->aUser !== null) {
				if (!$this->aUser->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aUser->getValidationFailures());
				}
			}

			if ($this->aAgentCompany !== null) {
				if (!$this->aAgentCompany->validate($columns)) {
					$failureMap = array_merge($failureMap, $this->aAgentCompany->getValidationFailures());
				}
			}


			if (($retval = CompanyPeer::doValidate($this, $columns)) !== true) {
				$failureMap = array_merge($failureMap, $retval);
			}


				if ($this->collActivationCodes !== null) {
					foreach ($this->collActivationCodes as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collCompanyBanks !== null) {
					foreach ($this->collCompanyBanks as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collEmployees !== null) {
					foreach ($this->collEmployees as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collInvoices !== null) {
					foreach ($this->collInvoices as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collOtherCosts !== null) {
					foreach ($this->collOtherCosts as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}

				if ($this->collSaleActivitys !== null) {
					foreach ($this->collSaleActivitys as $referrerFK) {
						if (!$referrerFK->validate($columns)) {
							$failureMap = array_merge($failureMap, $referrerFK->getValidationFailures());
						}
					}
				}


			$this->alreadyInValidation = false;
		}

		return (!empty($failureMap) ? $failureMap : true);
	}

	/**
	 * Retrieves a field from the object by name passed in as a string.
	 *
	 * @param      string $name name
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     mixed Value of field.
	 */
	public function getByName($name, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CompanyPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		$field = $this->getByPosition($pos);
		return $field;
	}

	/**
	 * Retrieves a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @return     mixed Value of field at $pos
	 */
	public function getByPosition($pos)
	{
		switch($pos) {
			case 0:
				return $this->getId();
				break;
			case 1:
				return $this->getName();
				break;
			case 2:
				return $this->getVatNo();
				break;
			case 3:
				return $this->getEanNumber();
				break;
			case 4:
				return $this->getAddress();
				break;
			case 5:
				return $this->getPostCode();
				break;
			case 6:
				return $this->getCountryId();
				break;
			case 7:
				return $this->getCityId();
				break;
			case 8:
				return $this->getContactName();
				break;
			case 9:
				return $this->getEmail();
				break;
			case 10:
				return $this->getHeadPhoneNumber();
				break;
			case 11:
				return $this->getFaxNumber();
				break;
			case 12:
				return $this->getWebsite();
				break;
			case 13:
				return $this->getStatusId();
				break;
			case 14:
				return $this->getCompanySizeId();
				break;
			case 15:
				return $this->getCompanyTypeId();
				break;
			case 16:
				return $this->getCustomerTypeId();
				break;
			case 17:
				return $this->getCprNumber();
				break;
			case 18:
				return $this->getApartmentFormId();
				break;
			case 19:
				return $this->getInvoiceMethodId();
				break;
			case 20:
				return $this->getAccountManagerId();
				break;
			case 21:
				return $this->getAgentCompanyId();
				break;
			case 22:
				return $this->getConfirmedAt();
				break;
			case 23:
				return $this->getCvrNumber();
				break;
			case 24:
				return $this->getSimCardDispatchDate();
				break;
			case 25:
				return $this->getUsageDiscountPc();
				break;
			case 26:
				return $this->getRegistrationDate();
				break;
			case 27:
				return $this->getCreatedAt();
				break;
			case 28:
				return $this->getUpdatedAt();
				break;
			case 29:
				return $this->getFilePath();
				break;
			case 30:
				return $this->getRateTableId();
				break;
			default:
				return null;
				break;
		} // switch()
	}

	/**
	 * Exports the object as an array.
	 *
	 * You can specify the key type of the array by passing one of the class
	 * type constants.
	 *
	 * @param      string $keyType (optional) One of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                        BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM. Defaults to BasePeer::TYPE_PHPNAME.
	 * @param      boolean $includeLazyLoadColumns (optional) Whether to include lazy loaded columns.  Defaults to TRUE.
	 * @return     an associative array containing the field names (as keys) and field values
	 */
	public function toArray($keyType = BasePeer::TYPE_PHPNAME, $includeLazyLoadColumns = true)
	{
		$keys = CompanyPeer::getFieldNames($keyType);
		$result = array(
			$keys[0] => $this->getId(),
			$keys[1] => $this->getName(),
			$keys[2] => $this->getVatNo(),
			$keys[3] => $this->getEanNumber(),
			$keys[4] => $this->getAddress(),
			$keys[5] => $this->getPostCode(),
			$keys[6] => $this->getCountryId(),
			$keys[7] => $this->getCityId(),
			$keys[8] => $this->getContactName(),
			$keys[9] => $this->getEmail(),
			$keys[10] => $this->getHeadPhoneNumber(),
			$keys[11] => $this->getFaxNumber(),
			$keys[12] => $this->getWebsite(),
			$keys[13] => $this->getStatusId(),
			$keys[14] => $this->getCompanySizeId(),
			$keys[15] => $this->getCompanyTypeId(),
			$keys[16] => $this->getCustomerTypeId(),
			$keys[17] => $this->getCprNumber(),
			$keys[18] => $this->getApartmentFormId(),
			$keys[19] => $this->getInvoiceMethodId(),
			$keys[20] => $this->getAccountManagerId(),
			$keys[21] => $this->getAgentCompanyId(),
			$keys[22] => $this->getConfirmedAt(),
			$keys[23] => $this->getCvrNumber(),
			$keys[24] => $this->getSimCardDispatchDate(),
			$keys[25] => $this->getUsageDiscountPc(),
			$keys[26] => $this->getRegistrationDate(),
			$keys[27] => $this->getCreatedAt(),
			$keys[28] => $this->getUpdatedAt(),
			$keys[29] => $this->getFilePath(),
			$keys[30] => $this->getRateTableId(),
		);
		return $result;
	}

	/**
	 * Sets a field from the object by name passed in as a string.
	 *
	 * @param      string $name peer name
	 * @param      mixed $value field value
	 * @param      string $type The type of fieldname the $name is of:
	 *                     one of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME
	 *                     BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM
	 * @return     void
	 */
	public function setByName($name, $value, $type = BasePeer::TYPE_PHPNAME)
	{
		$pos = CompanyPeer::translateFieldName($name, $type, BasePeer::TYPE_NUM);
		return $this->setByPosition($pos, $value);
	}

	/**
	 * Sets a field from the object by Position as specified in the xml schema.
	 * Zero-based.
	 *
	 * @param      int $pos position in xml schema
	 * @param      mixed $value field value
	 * @return     void
	 */
	public function setByPosition($pos, $value)
	{
		switch($pos) {
			case 0:
				$this->setId($value);
				break;
			case 1:
				$this->setName($value);
				break;
			case 2:
				$this->setVatNo($value);
				break;
			case 3:
				$this->setEanNumber($value);
				break;
			case 4:
				$this->setAddress($value);
				break;
			case 5:
				$this->setPostCode($value);
				break;
			case 6:
				$this->setCountryId($value);
				break;
			case 7:
				$this->setCityId($value);
				break;
			case 8:
				$this->setContactName($value);
				break;
			case 9:
				$this->setEmail($value);
				break;
			case 10:
				$this->setHeadPhoneNumber($value);
				break;
			case 11:
				$this->setFaxNumber($value);
				break;
			case 12:
				$this->setWebsite($value);
				break;
			case 13:
				$this->setStatusId($value);
				break;
			case 14:
				$this->setCompanySizeId($value);
				break;
			case 15:
				$this->setCompanyTypeId($value);
				break;
			case 16:
				$this->setCustomerTypeId($value);
				break;
			case 17:
				$this->setCprNumber($value);
				break;
			case 18:
				$this->setApartmentFormId($value);
				break;
			case 19:
				$this->setInvoiceMethodId($value);
				break;
			case 20:
				$this->setAccountManagerId($value);
				break;
			case 21:
				$this->setAgentCompanyId($value);
				break;
			case 22:
				$this->setConfirmedAt($value);
				break;
			case 23:
				$this->setCvrNumber($value);
				break;
			case 24:
				$this->setSimCardDispatchDate($value);
				break;
			case 25:
				$this->setUsageDiscountPc($value);
				break;
			case 26:
				$this->setRegistrationDate($value);
				break;
			case 27:
				$this->setCreatedAt($value);
				break;
			case 28:
				$this->setUpdatedAt($value);
				break;
			case 29:
				$this->setFilePath($value);
				break;
			case 30:
				$this->setRateTableId($value);
				break;
		} // switch()
	}

	/**
	 * Populates the object using an array.
	 *
	 * This is particularly useful when populating an object from one of the
	 * request arrays (e.g. $_POST).  This method goes through the column
	 * names, checking to see whether a matching key exists in populated
	 * array. If so the setByName() method is called for that column.
	 *
	 * You can specify the key type of the array by additionally passing one
	 * of the class type constants BasePeer::TYPE_PHPNAME, BasePeer::TYPE_STUDLYPHPNAME,
	 * BasePeer::TYPE_COLNAME, BasePeer::TYPE_FIELDNAME, BasePeer::TYPE_NUM.
	 * The default key type is the column's phpname (e.g. 'AuthorId')
	 *
	 * @param      array  $arr     An array to populate the object from.
	 * @param      string $keyType The type of keys the array uses.
	 * @return     void
	 */
	public function fromArray($arr, $keyType = BasePeer::TYPE_PHPNAME)
	{
		$keys = CompanyPeer::getFieldNames($keyType);

		if (array_key_exists($keys[0], $arr)) $this->setId($arr[$keys[0]]);
		if (array_key_exists($keys[1], $arr)) $this->setName($arr[$keys[1]]);
		if (array_key_exists($keys[2], $arr)) $this->setVatNo($arr[$keys[2]]);
		if (array_key_exists($keys[3], $arr)) $this->setEanNumber($arr[$keys[3]]);
		if (array_key_exists($keys[4], $arr)) $this->setAddress($arr[$keys[4]]);
		if (array_key_exists($keys[5], $arr)) $this->setPostCode($arr[$keys[5]]);
		if (array_key_exists($keys[6], $arr)) $this->setCountryId($arr[$keys[6]]);
		if (array_key_exists($keys[7], $arr)) $this->setCityId($arr[$keys[7]]);
		if (array_key_exists($keys[8], $arr)) $this->setContactName($arr[$keys[8]]);
		if (array_key_exists($keys[9], $arr)) $this->setEmail($arr[$keys[9]]);
		if (array_key_exists($keys[10], $arr)) $this->setHeadPhoneNumber($arr[$keys[10]]);
		if (array_key_exists($keys[11], $arr)) $this->setFaxNumber($arr[$keys[11]]);
		if (array_key_exists($keys[12], $arr)) $this->setWebsite($arr[$keys[12]]);
		if (array_key_exists($keys[13], $arr)) $this->setStatusId($arr[$keys[13]]);
		if (array_key_exists($keys[14], $arr)) $this->setCompanySizeId($arr[$keys[14]]);
		if (array_key_exists($keys[15], $arr)) $this->setCompanyTypeId($arr[$keys[15]]);
		if (array_key_exists($keys[16], $arr)) $this->setCustomerTypeId($arr[$keys[16]]);
		if (array_key_exists($keys[17], $arr)) $this->setCprNumber($arr[$keys[17]]);
		if (array_key_exists($keys[18], $arr)) $this->setApartmentFormId($arr[$keys[18]]);
		if (array_key_exists($keys[19], $arr)) $this->setInvoiceMethodId($arr[$keys[19]]);
		if (array_key_exists($keys[20], $arr)) $this->setAccountManagerId($arr[$keys[20]]);
		if (array_key_exists($keys[21], $arr)) $this->setAgentCompanyId($arr[$keys[21]]);
		if (array_key_exists($keys[22], $arr)) $this->setConfirmedAt($arr[$keys[22]]);
		if (array_key_exists($keys[23], $arr)) $this->setCvrNumber($arr[$keys[23]]);
		if (array_key_exists($keys[24], $arr)) $this->setSimCardDispatchDate($arr[$keys[24]]);
		if (array_key_exists($keys[25], $arr)) $this->setUsageDiscountPc($arr[$keys[25]]);
		if (array_key_exists($keys[26], $arr)) $this->setRegistrationDate($arr[$keys[26]]);
		if (array_key_exists($keys[27], $arr)) $this->setCreatedAt($arr[$keys[27]]);
		if (array_key_exists($keys[28], $arr)) $this->setUpdatedAt($arr[$keys[28]]);
		if (array_key_exists($keys[29], $arr)) $this->setFilePath($arr[$keys[29]]);
		if (array_key_exists($keys[30], $arr)) $this->setRateTableId($arr[$keys[30]]);
	}

	/**
	 * Build a Criteria object containing the values of all modified columns in this object.
	 *
	 * @return     Criteria The Criteria object containing all modified values.
	 */
	public function buildCriteria()
	{
		$criteria = new Criteria(CompanyPeer::DATABASE_NAME);

		if ($this->isColumnModified(CompanyPeer::ID)) $criteria->add(CompanyPeer::ID, $this->id);
		if ($this->isColumnModified(CompanyPeer::NAME)) $criteria->add(CompanyPeer::NAME, $this->name);
		if ($this->isColumnModified(CompanyPeer::VAT_NO)) $criteria->add(CompanyPeer::VAT_NO, $this->vat_no);
		if ($this->isColumnModified(CompanyPeer::EAN_NUMBER)) $criteria->add(CompanyPeer::EAN_NUMBER, $this->ean_number);
		if ($this->isColumnModified(CompanyPeer::ADDRESS)) $criteria->add(CompanyPeer::ADDRESS, $this->address);
		if ($this->isColumnModified(CompanyPeer::POST_CODE)) $criteria->add(CompanyPeer::POST_CODE, $this->post_code);
		if ($this->isColumnModified(CompanyPeer::COUNTRY_ID)) $criteria->add(CompanyPeer::COUNTRY_ID, $this->country_id);
		if ($this->isColumnModified(CompanyPeer::CITY_ID)) $criteria->add(CompanyPeer::CITY_ID, $this->city_id);
		if ($this->isColumnModified(CompanyPeer::CONTACT_NAME)) $criteria->add(CompanyPeer::CONTACT_NAME, $this->contact_name);
		if ($this->isColumnModified(CompanyPeer::EMAIL)) $criteria->add(CompanyPeer::EMAIL, $this->email);
		if ($this->isColumnModified(CompanyPeer::HEAD_PHONE_NUMBER)) $criteria->add(CompanyPeer::HEAD_PHONE_NUMBER, $this->head_phone_number);
		if ($this->isColumnModified(CompanyPeer::FAX_NUMBER)) $criteria->add(CompanyPeer::FAX_NUMBER, $this->fax_number);
		if ($this->isColumnModified(CompanyPeer::WEBSITE)) $criteria->add(CompanyPeer::WEBSITE, $this->website);
		if ($this->isColumnModified(CompanyPeer::STATUS_ID)) $criteria->add(CompanyPeer::STATUS_ID, $this->status_id);
		if ($this->isColumnModified(CompanyPeer::COMPANY_SIZE_ID)) $criteria->add(CompanyPeer::COMPANY_SIZE_ID, $this->company_size_id);
		if ($this->isColumnModified(CompanyPeer::COMPANY_TYPE_ID)) $criteria->add(CompanyPeer::COMPANY_TYPE_ID, $this->company_type_id);
		if ($this->isColumnModified(CompanyPeer::CUSTOMER_TYPE_ID)) $criteria->add(CompanyPeer::CUSTOMER_TYPE_ID, $this->customer_type_id);
		if ($this->isColumnModified(CompanyPeer::CPR_NUMBER)) $criteria->add(CompanyPeer::CPR_NUMBER, $this->cpr_number);
		if ($this->isColumnModified(CompanyPeer::APARTMENT_FORM_ID)) $criteria->add(CompanyPeer::APARTMENT_FORM_ID, $this->apartment_form_id);
		if ($this->isColumnModified(CompanyPeer::INVOICE_METHOD_ID)) $criteria->add(CompanyPeer::INVOICE_METHOD_ID, $this->invoice_method_id);
		if ($this->isColumnModified(CompanyPeer::ACCOUNT_MANAGER_ID)) $criteria->add(CompanyPeer::ACCOUNT_MANAGER_ID, $this->account_manager_id);
		if ($this->isColumnModified(CompanyPeer::AGENT_COMPANY_ID)) $criteria->add(CompanyPeer::AGENT_COMPANY_ID, $this->agent_company_id);
		if ($this->isColumnModified(CompanyPeer::CONFIRMED_AT)) $criteria->add(CompanyPeer::CONFIRMED_AT, $this->confirmed_at);
		if ($this->isColumnModified(CompanyPeer::CVR_NUMBER)) $criteria->add(CompanyPeer::CVR_NUMBER, $this->cvr_number);
		if ($this->isColumnModified(CompanyPeer::SIM_CARD_DISPATCH_DATE)) $criteria->add(CompanyPeer::SIM_CARD_DISPATCH_DATE, $this->sim_card_dispatch_date);
		if ($this->isColumnModified(CompanyPeer::USAGE_DISCOUNT_PC)) $criteria->add(CompanyPeer::USAGE_DISCOUNT_PC, $this->usage_discount_pc);
		if ($this->isColumnModified(CompanyPeer::REGISTRATION_DATE)) $criteria->add(CompanyPeer::REGISTRATION_DATE, $this->registration_date);
		if ($this->isColumnModified(CompanyPeer::CREATED_AT)) $criteria->add(CompanyPeer::CREATED_AT, $this->created_at);
		if ($this->isColumnModified(CompanyPeer::UPDATED_AT)) $criteria->add(CompanyPeer::UPDATED_AT, $this->updated_at);
		if ($this->isColumnModified(CompanyPeer::FILE_PATH)) $criteria->add(CompanyPeer::FILE_PATH, $this->file_path);
		if ($this->isColumnModified(CompanyPeer::RATE_TABLE_ID)) $criteria->add(CompanyPeer::RATE_TABLE_ID, $this->rate_table_id);

		return $criteria;
	}

	/**
	 * Builds a Criteria object containing the primary key for this object.
	 *
	 * Unlike buildCriteria() this method includes the primary key values regardless
	 * of whether or not they have been modified.
	 *
	 * @return     Criteria The Criteria object containing value(s) for primary key(s).
	 */
	public function buildPkeyCriteria()
	{
		$criteria = new Criteria(CompanyPeer::DATABASE_NAME);

		$criteria->add(CompanyPeer::ID, $this->id);

		return $criteria;
	}

	/**
	 * Returns the primary key for this object (row).
	 * @return     int
	 */
	public function getPrimaryKey()
	{
		return $this->getId();
	}

	/**
	 * Generic method to set the primary key (id column).
	 *
	 * @param      int $key Primary key.
	 * @return     void
	 */
	public function setPrimaryKey($key)
	{
		$this->setId($key);
	}

	/**
	 * Sets contents of passed object to values from current object.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      object $copyObj An object of Company (or compatible) type.
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @throws     PropelException
	 */
	public function copyInto($copyObj, $deepCopy = false)
	{

		$copyObj->setName($this->name);

		$copyObj->setVatNo($this->vat_no);

		$copyObj->setEanNumber($this->ean_number);

		$copyObj->setAddress($this->address);

		$copyObj->setPostCode($this->post_code);

		$copyObj->setCountryId($this->country_id);

		$copyObj->setCityId($this->city_id);

		$copyObj->setContactName($this->contact_name);

		$copyObj->setEmail($this->email);

		$copyObj->setHeadPhoneNumber($this->head_phone_number);

		$copyObj->setFaxNumber($this->fax_number);

		$copyObj->setWebsite($this->website);

		$copyObj->setStatusId($this->status_id);

		$copyObj->setCompanySizeId($this->company_size_id);

		$copyObj->setCompanyTypeId($this->company_type_id);

		$copyObj->setCustomerTypeId($this->customer_type_id);

		$copyObj->setCprNumber($this->cpr_number);

		$copyObj->setApartmentFormId($this->apartment_form_id);

		$copyObj->setInvoiceMethodId($this->invoice_method_id);

		$copyObj->setAccountManagerId($this->account_manager_id);

		$copyObj->setAgentCompanyId($this->agent_company_id);

		$copyObj->setConfirmedAt($this->confirmed_at);

		$copyObj->setCvrNumber($this->cvr_number);

		$copyObj->setSimCardDispatchDate($this->sim_card_dispatch_date);

		$copyObj->setUsageDiscountPc($this->usage_discount_pc);

		$copyObj->setRegistrationDate($this->registration_date);

		$copyObj->setCreatedAt($this->created_at);

		$copyObj->setUpdatedAt($this->updated_at);

		$copyObj->setFilePath($this->file_path);

		$copyObj->setRateTableId($this->rate_table_id);


		if ($deepCopy) {
			// important: temporarily setNew(false) because this affects the behavior of
			// the getter/setter methods for fkey referrer objects.
			$copyObj->setNew(false);

			foreach ($this->getActivationCodes() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addActivationCode($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getCompanyBanks() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addCompanyBank($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getEmployees() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addEmployee($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getInvoices() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addInvoice($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getOtherCosts() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addOtherCost($relObj->copy($deepCopy));
				}
			}

			foreach ($this->getSaleActivitys() as $relObj) {
				if ($relObj !== $this) {  // ensure that we don't try to copy a reference to ourselves
					$copyObj->addSaleActivity($relObj->copy($deepCopy));
				}
			}

		} // if ($deepCopy)


		$copyObj->setNew(true);

		$copyObj->setId(NULL); // this is a auto-increment column, so set to default value

	}

	/**
	 * Makes a copy of this object that will be inserted as a new row in table when saved.
	 * It creates a new object filling in the simple attributes, but skipping any primary
	 * keys that are defined for the table.
	 *
	 * If desired, this method can also make copies of all associated (fkey referrers)
	 * objects.
	 *
	 * @param      boolean $deepCopy Whether to also copy all rows that refer (by fkey) to the current row.
	 * @return     Company Clone of current object.
	 * @throws     PropelException
	 */
	public function copy($deepCopy = false)
	{
		// we use get_class(), because this might be a subclass
		$clazz = get_class($this);
		$copyObj = new $clazz();
		$this->copyInto($copyObj, $deepCopy);
		return $copyObj;
	}

	/**
	 * Returns a peer instance associated with this om.
	 *
	 * Since Peer classes are not to have any instance attributes, this method returns the
	 * same instance for all member of this class. The method could therefore
	 * be static, but this would prevent one from overriding the behavior.
	 *
	 * @return     CompanyPeer
	 */
	public function getPeer()
	{
		if (self::$peer === null) {
			self::$peer = new CompanyPeer();
		}
		return self::$peer;
	}

	/**
	 * Declares an association between this object and a Country object.
	 *
	 * @param      Country $v
	 * @return     Company The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCountry(Country $v = null)
	{
		if ($v === null) {
			$this->setCountryId(NULL);
		} else {
			$this->setCountryId($v->getId());
		}

		$this->aCountry = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Country object, it will not be re-added.
		if ($v !== null) {
			$v->addCompany($this);
		}

		return $this;
	}


	/**
	 * Get the associated Country object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Country The associated Country object.
	 * @throws     PropelException
	 */
	public function getCountry(PropelPDO $con = null)
	{
		if ($this->aCountry === null && ($this->country_id !== null)) {
			$c = new Criteria(CountryPeer::DATABASE_NAME);
			$c->add(CountryPeer::ID, $this->country_id);
			$this->aCountry = CountryPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCountry->addCompanys($this);
			 */
		}
		return $this->aCountry;
	}

	/**
	 * Declares an association between this object and a City object.
	 *
	 * @param      City $v
	 * @return     Company The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCity(City $v = null)
	{
		if ($v === null) {
			$this->setCityId(NULL);
		} else {
			$this->setCityId($v->getId());
		}

		$this->aCity = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the City object, it will not be re-added.
		if ($v !== null) {
			$v->addCompany($this);
		}

		return $this;
	}


	/**
	 * Get the associated City object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     City The associated City object.
	 * @throws     PropelException
	 */
	public function getCity(PropelPDO $con = null)
	{
		if ($this->aCity === null && ($this->city_id !== null)) {
			$c = new Criteria(CityPeer::DATABASE_NAME);
			$c->add(CityPeer::ID, $this->city_id);
			$this->aCity = CityPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCity->addCompanys($this);
			 */
		}
		return $this->aCity;
	}

	/**
	 * Declares an association between this object and a Status object.
	 *
	 * @param      Status $v
	 * @return     Company The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setStatus(Status $v = null)
	{
		if ($v === null) {
			$this->setStatusId(NULL);
		} else {
			$this->setStatusId($v->getId());
		}

		$this->aStatus = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the Status object, it will not be re-added.
		if ($v !== null) {
			$v->addCompany($this);
		}

		return $this;
	}


	/**
	 * Get the associated Status object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     Status The associated Status object.
	 * @throws     PropelException
	 */
	public function getStatus(PropelPDO $con = null)
	{
		if ($this->aStatus === null && ($this->status_id !== null)) {
			$c = new Criteria(StatusPeer::DATABASE_NAME);
			$c->add(StatusPeer::ID, $this->status_id);
			$this->aStatus = StatusPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aStatus->addCompanys($this);
			 */
		}
		return $this->aStatus;
	}

	/**
	 * Declares an association between this object and a CompanySize object.
	 *
	 * @param      CompanySize $v
	 * @return     Company The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCompanySize(CompanySize $v = null)
	{
		if ($v === null) {
			$this->setCompanySizeId(NULL);
		} else {
			$this->setCompanySizeId($v->getId());
		}

		$this->aCompanySize = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the CompanySize object, it will not be re-added.
		if ($v !== null) {
			$v->addCompany($this);
		}

		return $this;
	}


	/**
	 * Get the associated CompanySize object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     CompanySize The associated CompanySize object.
	 * @throws     PropelException
	 */
	public function getCompanySize(PropelPDO $con = null)
	{
		if ($this->aCompanySize === null && ($this->company_size_id !== null)) {
			$c = new Criteria(CompanySizePeer::DATABASE_NAME);
			$c->add(CompanySizePeer::ID, $this->company_size_id);
			$this->aCompanySize = CompanySizePeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCompanySize->addCompanys($this);
			 */
		}
		return $this->aCompanySize;
	}

	/**
	 * Declares an association between this object and a CompanyType object.
	 *
	 * @param      CompanyType $v
	 * @return     Company The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCompanyType(CompanyType $v = null)
	{
		if ($v === null) {
			$this->setCompanyTypeId(NULL);
		} else {
			$this->setCompanyTypeId($v->getId());
		}

		$this->aCompanyType = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the CompanyType object, it will not be re-added.
		if ($v !== null) {
			$v->addCompany($this);
		}

		return $this;
	}


	/**
	 * Get the associated CompanyType object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     CompanyType The associated CompanyType object.
	 * @throws     PropelException
	 */
	public function getCompanyType(PropelPDO $con = null)
	{
		if ($this->aCompanyType === null && ($this->company_type_id !== null)) {
			$c = new Criteria(CompanyTypePeer::DATABASE_NAME);
			$c->add(CompanyTypePeer::ID, $this->company_type_id);
			$this->aCompanyType = CompanyTypePeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCompanyType->addCompanys($this);
			 */
		}
		return $this->aCompanyType;
	}

	/**
	 * Declares an association between this object and a CustomerType object.
	 *
	 * @param      CustomerType $v
	 * @return     Company The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setCustomerType(CustomerType $v = null)
	{
		if ($v === null) {
			$this->setCustomerTypeId(NULL);
		} else {
			$this->setCustomerTypeId($v->getId());
		}

		$this->aCustomerType = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the CustomerType object, it will not be re-added.
		if ($v !== null) {
			$v->addCompany($this);
		}

		return $this;
	}


	/**
	 * Get the associated CustomerType object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     CustomerType The associated CustomerType object.
	 * @throws     PropelException
	 */
	public function getCustomerType(PropelPDO $con = null)
	{
		if ($this->aCustomerType === null && ($this->customer_type_id !== null)) {
			$c = new Criteria(CustomerTypePeer::DATABASE_NAME);
			$c->add(CustomerTypePeer::ID, $this->customer_type_id);
			$this->aCustomerType = CustomerTypePeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aCustomerType->addCompanys($this);
			 */
		}
		return $this->aCustomerType;
	}

	/**
	 * Declares an association between this object and a ApartmentForm object.
	 *
	 * @param      ApartmentForm $v
	 * @return     Company The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setApartmentForm(ApartmentForm $v = null)
	{
		if ($v === null) {
			$this->setApartmentFormId(NULL);
		} else {
			$this->setApartmentFormId($v->getId());
		}

		$this->aApartmentForm = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the ApartmentForm object, it will not be re-added.
		if ($v !== null) {
			$v->addCompany($this);
		}

		return $this;
	}


	/**
	 * Get the associated ApartmentForm object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     ApartmentForm The associated ApartmentForm object.
	 * @throws     PropelException
	 */
	public function getApartmentForm(PropelPDO $con = null)
	{
		if ($this->aApartmentForm === null && ($this->apartment_form_id !== null)) {
			$c = new Criteria(ApartmentFormPeer::DATABASE_NAME);
			$c->add(ApartmentFormPeer::ID, $this->apartment_form_id);
			$this->aApartmentForm = ApartmentFormPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aApartmentForm->addCompanys($this);
			 */
		}
		return $this->aApartmentForm;
	}

	/**
	 * Declares an association between this object and a InvoiceMethod object.
	 *
	 * @param      InvoiceMethod $v
	 * @return     Company The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setInvoiceMethod(InvoiceMethod $v = null)
	{
		if ($v === null) {
			$this->setInvoiceMethodId(NULL);
		} else {
			$this->setInvoiceMethodId($v->getId());
		}

		$this->aInvoiceMethod = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the InvoiceMethod object, it will not be re-added.
		if ($v !== null) {
			$v->addCompany($this);
		}

		return $this;
	}


	/**
	 * Get the associated InvoiceMethod object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     InvoiceMethod The associated InvoiceMethod object.
	 * @throws     PropelException
	 */
	public function getInvoiceMethod(PropelPDO $con = null)
	{
		if ($this->aInvoiceMethod === null && ($this->invoice_method_id !== null)) {
			$c = new Criteria(InvoiceMethodPeer::DATABASE_NAME);
			$c->add(InvoiceMethodPeer::ID, $this->invoice_method_id);
			$this->aInvoiceMethod = InvoiceMethodPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aInvoiceMethod->addCompanys($this);
			 */
		}
		return $this->aInvoiceMethod;
	}

	/**
	 * Declares an association between this object and a User object.
	 *
	 * @param      User $v
	 * @return     Company The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setUser(User $v = null)
	{
		if ($v === null) {
			$this->setAccountManagerId(NULL);
		} else {
			$this->setAccountManagerId($v->getId());
		}

		$this->aUser = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the User object, it will not be re-added.
		if ($v !== null) {
			$v->addCompany($this);
		}

		return $this;
	}


	/**
	 * Get the associated User object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     User The associated User object.
	 * @throws     PropelException
	 */
	public function getUser(PropelPDO $con = null)
	{
		if ($this->aUser === null && ($this->account_manager_id !== null)) {
			$c = new Criteria(UserPeer::DATABASE_NAME);
			$c->add(UserPeer::ID, $this->account_manager_id);
			$this->aUser = UserPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aUser->addCompanys($this);
			 */
		}
		return $this->aUser;
	}

	/**
	 * Declares an association between this object and a AgentCompany object.
	 *
	 * @param      AgentCompany $v
	 * @return     Company The current object (for fluent API support)
	 * @throws     PropelException
	 */
	public function setAgentCompany(AgentCompany $v = null)
	{
		if ($v === null) {
			$this->setAgentCompanyId(NULL);
		} else {
			$this->setAgentCompanyId($v->getId());
		}

		$this->aAgentCompany = $v;

		// Add binding for other direction of this n:n relationship.
		// If this object has already been added to the AgentCompany object, it will not be re-added.
		if ($v !== null) {
			$v->addCompany($this);
		}

		return $this;
	}


	/**
	 * Get the associated AgentCompany object
	 *
	 * @param      PropelPDO Optional Connection object.
	 * @return     AgentCompany The associated AgentCompany object.
	 * @throws     PropelException
	 */
	public function getAgentCompany(PropelPDO $con = null)
	{
		if ($this->aAgentCompany === null && ($this->agent_company_id !== null)) {
			$c = new Criteria(AgentCompanyPeer::DATABASE_NAME);
			$c->add(AgentCompanyPeer::ID, $this->agent_company_id);
			$this->aAgentCompany = AgentCompanyPeer::doSelectOne($c, $con);
			/* The following can be used additionally to
			   guarantee the related object contains a reference
			   to this object.  This level of coupling may, however, be
			   undesirable since it could result in an only partially populated collection
			   in the referenced object.
			   $this->aAgentCompany->addCompanys($this);
			 */
		}
		return $this->aAgentCompany;
	}

	/**
	 * Clears out the collActivationCodes collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addActivationCodes()
	 */
	public function clearActivationCodes()
	{
		$this->collActivationCodes = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collActivationCodes collection (array).
	 *
	 * By default this just sets the collActivationCodes collection to an empty array (like clearcollActivationCodes());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initActivationCodes()
	{
		$this->collActivationCodes = array();
	}

	/**
	 * Gets an array of ActivationCode objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Company has previously been saved, it will retrieve
	 * related ActivationCodes from storage. If this Company is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array ActivationCode[]
	 * @throws     PropelException
	 */
	public function getActivationCodes($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collActivationCodes === null) {
			if ($this->isNew()) {
			   $this->collActivationCodes = array();
			} else {

				$criteria->add(ActivationCodePeer::COMPANY_ID, $this->id);

				ActivationCodePeer::addSelectColumns($criteria);
				$this->collActivationCodes = ActivationCodePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(ActivationCodePeer::COMPANY_ID, $this->id);

				ActivationCodePeer::addSelectColumns($criteria);
				if (!isset($this->lastActivationCodeCriteria) || !$this->lastActivationCodeCriteria->equals($criteria)) {
					$this->collActivationCodes = ActivationCodePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastActivationCodeCriteria = $criteria;
		return $this->collActivationCodes;
	}

	/**
	 * Returns the number of related ActivationCode objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related ActivationCode objects.
	 * @throws     PropelException
	 */
	public function countActivationCodes(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collActivationCodes === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(ActivationCodePeer::COMPANY_ID, $this->id);

				$count = ActivationCodePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(ActivationCodePeer::COMPANY_ID, $this->id);

				if (!isset($this->lastActivationCodeCriteria) || !$this->lastActivationCodeCriteria->equals($criteria)) {
					$count = ActivationCodePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collActivationCodes);
				}
			} else {
				$count = count($this->collActivationCodes);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a ActivationCode object to this object
	 * through the ActivationCode foreign key attribute.
	 *
	 * @param      ActivationCode $l ActivationCode
	 * @return     void
	 * @throws     PropelException
	 */
	public function addActivationCode(ActivationCode $l)
	{
		if ($this->collActivationCodes === null) {
			$this->initActivationCodes();
		}
		if (!in_array($l, $this->collActivationCodes, true)) { // only add it if the **same** object is not already associated
			array_push($this->collActivationCodes, $l);
			$l->setCompany($this);
		}
	}

	/**
	 * Clears out the collCompanyBanks collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addCompanyBanks()
	 */
	public function clearCompanyBanks()
	{
		$this->collCompanyBanks = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collCompanyBanks collection (array).
	 *
	 * By default this just sets the collCompanyBanks collection to an empty array (like clearcollCompanyBanks());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initCompanyBanks()
	{
		$this->collCompanyBanks = array();
	}

	/**
	 * Gets an array of CompanyBank objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Company has previously been saved, it will retrieve
	 * related CompanyBanks from storage. If this Company is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array CompanyBank[]
	 * @throws     PropelException
	 */
	public function getCompanyBanks($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collCompanyBanks === null) {
			if ($this->isNew()) {
			   $this->collCompanyBanks = array();
			} else {

				$criteria->add(CompanyBankPeer::COMPANY_ID, $this->id);

				CompanyBankPeer::addSelectColumns($criteria);
				$this->collCompanyBanks = CompanyBankPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(CompanyBankPeer::COMPANY_ID, $this->id);

				CompanyBankPeer::addSelectColumns($criteria);
				if (!isset($this->lastCompanyBankCriteria) || !$this->lastCompanyBankCriteria->equals($criteria)) {
					$this->collCompanyBanks = CompanyBankPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastCompanyBankCriteria = $criteria;
		return $this->collCompanyBanks;
	}

	/**
	 * Returns the number of related CompanyBank objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related CompanyBank objects.
	 * @throws     PropelException
	 */
	public function countCompanyBanks(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collCompanyBanks === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(CompanyBankPeer::COMPANY_ID, $this->id);

				$count = CompanyBankPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(CompanyBankPeer::COMPANY_ID, $this->id);

				if (!isset($this->lastCompanyBankCriteria) || !$this->lastCompanyBankCriteria->equals($criteria)) {
					$count = CompanyBankPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collCompanyBanks);
				}
			} else {
				$count = count($this->collCompanyBanks);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a CompanyBank object to this object
	 * through the CompanyBank foreign key attribute.
	 *
	 * @param      CompanyBank $l CompanyBank
	 * @return     void
	 * @throws     PropelException
	 */
	public function addCompanyBank(CompanyBank $l)
	{
		if ($this->collCompanyBanks === null) {
			$this->initCompanyBanks();
		}
		if (!in_array($l, $this->collCompanyBanks, true)) { // only add it if the **same** object is not already associated
			array_push($this->collCompanyBanks, $l);
			$l->setCompany($this);
		}
	}

	/**
	 * Clears out the collEmployees collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addEmployees()
	 */
	public function clearEmployees()
	{
		$this->collEmployees = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collEmployees collection (array).
	 *
	 * By default this just sets the collEmployees collection to an empty array (like clearcollEmployees());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initEmployees()
	{
		$this->collEmployees = array();
	}

	/**
	 * Gets an array of Employee objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Company has previously been saved, it will retrieve
	 * related Employees from storage. If this Company is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Employee[]
	 * @throws     PropelException
	 */
	public function getEmployees($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collEmployees === null) {
			if ($this->isNew()) {
			   $this->collEmployees = array();
			} else {

				$criteria->add(EmployeePeer::COMPANY_ID, $this->id);

				EmployeePeer::addSelectColumns($criteria);
				$this->collEmployees = EmployeePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(EmployeePeer::COMPANY_ID, $this->id);

				EmployeePeer::addSelectColumns($criteria);
				if (!isset($this->lastEmployeeCriteria) || !$this->lastEmployeeCriteria->equals($criteria)) {
					$this->collEmployees = EmployeePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastEmployeeCriteria = $criteria;
		return $this->collEmployees;
	}

	/**
	 * Returns the number of related Employee objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Employee objects.
	 * @throws     PropelException
	 */
	public function countEmployees(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collEmployees === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(EmployeePeer::COMPANY_ID, $this->id);

				$count = EmployeePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(EmployeePeer::COMPANY_ID, $this->id);

				if (!isset($this->lastEmployeeCriteria) || !$this->lastEmployeeCriteria->equals($criteria)) {
					$count = EmployeePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collEmployees);
				}
			} else {
				$count = count($this->collEmployees);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Employee object to this object
	 * through the Employee foreign key attribute.
	 *
	 * @param      Employee $l Employee
	 * @return     void
	 * @throws     PropelException
	 */
	public function addEmployee(Employee $l)
	{
		if ($this->collEmployees === null) {
			$this->initEmployees();
		}
		if (!in_array($l, $this->collEmployees, true)) { // only add it if the **same** object is not already associated
			array_push($this->collEmployees, $l);
			$l->setCompany($this);
		}
	}

	/**
	 * Clears out the collInvoices collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addInvoices()
	 */
	public function clearInvoices()
	{
		$this->collInvoices = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collInvoices collection (array).
	 *
	 * By default this just sets the collInvoices collection to an empty array (like clearcollInvoices());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initInvoices()
	{
		$this->collInvoices = array();
	}

	/**
	 * Gets an array of Invoice objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Company has previously been saved, it will retrieve
	 * related Invoices from storage. If this Company is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array Invoice[]
	 * @throws     PropelException
	 */
	public function getInvoices($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collInvoices === null) {
			if ($this->isNew()) {
			   $this->collInvoices = array();
			} else {

				$criteria->add(InvoicePeer::COMPANY_ID, $this->id);

				InvoicePeer::addSelectColumns($criteria);
				$this->collInvoices = InvoicePeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(InvoicePeer::COMPANY_ID, $this->id);

				InvoicePeer::addSelectColumns($criteria);
				if (!isset($this->lastInvoiceCriteria) || !$this->lastInvoiceCriteria->equals($criteria)) {
					$this->collInvoices = InvoicePeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastInvoiceCriteria = $criteria;
		return $this->collInvoices;
	}

	/**
	 * Returns the number of related Invoice objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related Invoice objects.
	 * @throws     PropelException
	 */
	public function countInvoices(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collInvoices === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(InvoicePeer::COMPANY_ID, $this->id);

				$count = InvoicePeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(InvoicePeer::COMPANY_ID, $this->id);

				if (!isset($this->lastInvoiceCriteria) || !$this->lastInvoiceCriteria->equals($criteria)) {
					$count = InvoicePeer::doCount($criteria, $con);
				} else {
					$count = count($this->collInvoices);
				}
			} else {
				$count = count($this->collInvoices);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a Invoice object to this object
	 * through the Invoice foreign key attribute.
	 *
	 * @param      Invoice $l Invoice
	 * @return     void
	 * @throws     PropelException
	 */
	public function addInvoice(Invoice $l)
	{
		if ($this->collInvoices === null) {
			$this->initInvoices();
		}
		if (!in_array($l, $this->collInvoices, true)) { // only add it if the **same** object is not already associated
			array_push($this->collInvoices, $l);
			$l->setCompany($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related Invoices from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getInvoicesJoinInvoiceStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collInvoices === null) {
			if ($this->isNew()) {
				$this->collInvoices = array();
			} else {

				$criteria->add(InvoicePeer::COMPANY_ID, $this->id);

				$this->collInvoices = InvoicePeer::doSelectJoinInvoiceStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(InvoicePeer::COMPANY_ID, $this->id);

			if (!isset($this->lastInvoiceCriteria) || !$this->lastInvoiceCriteria->equals($criteria)) {
				$this->collInvoices = InvoicePeer::doSelectJoinInvoiceStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastInvoiceCriteria = $criteria;

		return $this->collInvoices;
	}

	/**
	 * Clears out the collOtherCosts collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addOtherCosts()
	 */
	public function clearOtherCosts()
	{
		$this->collOtherCosts = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collOtherCosts collection (array).
	 *
	 * By default this just sets the collOtherCosts collection to an empty array (like clearcollOtherCosts());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initOtherCosts()
	{
		$this->collOtherCosts = array();
	}

	/**
	 * Gets an array of OtherCost objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Company has previously been saved, it will retrieve
	 * related OtherCosts from storage. If this Company is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array OtherCost[]
	 * @throws     PropelException
	 */
	public function getOtherCosts($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collOtherCosts === null) {
			if ($this->isNew()) {
			   $this->collOtherCosts = array();
			} else {

				$criteria->add(OtherCostPeer::COMPANY_ID, $this->id);

				OtherCostPeer::addSelectColumns($criteria);
				$this->collOtherCosts = OtherCostPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(OtherCostPeer::COMPANY_ID, $this->id);

				OtherCostPeer::addSelectColumns($criteria);
				if (!isset($this->lastOtherCostCriteria) || !$this->lastOtherCostCriteria->equals($criteria)) {
					$this->collOtherCosts = OtherCostPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastOtherCostCriteria = $criteria;
		return $this->collOtherCosts;
	}

	/**
	 * Returns the number of related OtherCost objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related OtherCost objects.
	 * @throws     PropelException
	 */
	public function countOtherCosts(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collOtherCosts === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(OtherCostPeer::COMPANY_ID, $this->id);

				$count = OtherCostPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(OtherCostPeer::COMPANY_ID, $this->id);

				if (!isset($this->lastOtherCostCriteria) || !$this->lastOtherCostCriteria->equals($criteria)) {
					$count = OtherCostPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collOtherCosts);
				}
			} else {
				$count = count($this->collOtherCosts);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a OtherCost object to this object
	 * through the OtherCost foreign key attribute.
	 *
	 * @param      OtherCost $l OtherCost
	 * @return     void
	 * @throws     PropelException
	 */
	public function addOtherCost(OtherCost $l)
	{
		if ($this->collOtherCosts === null) {
			$this->initOtherCosts();
		}
		if (!in_array($l, $this->collOtherCosts, true)) { // only add it if the **same** object is not already associated
			array_push($this->collOtherCosts, $l);
			$l->setCompany($this);
		}
	}

	/**
	 * Clears out the collSaleActivitys collection (array).
	 *
	 * This does not modify the database; however, it will remove any associated objects, causing
	 * them to be refetched by subsequent calls to accessor method.
	 *
	 * @return     void
	 * @see        addSaleActivitys()
	 */
	public function clearSaleActivitys()
	{
		$this->collSaleActivitys = null; // important to set this to NULL since that means it is uninitialized
	}

	/**
	 * Initializes the collSaleActivitys collection (array).
	 *
	 * By default this just sets the collSaleActivitys collection to an empty array (like clearcollSaleActivitys());
	 * however, you may wish to override this method in your stub class to provide setting appropriate
	 * to your application -- for example, setting the initial array to the values stored in database.
	 *
	 * @return     void
	 */
	public function initSaleActivitys()
	{
		$this->collSaleActivitys = array();
	}

	/**
	 * Gets an array of SaleActivity objects which contain a foreign key that references this object.
	 *
	 * If this collection has already been initialized with an identical Criteria, it returns the collection.
	 * Otherwise if this Company has previously been saved, it will retrieve
	 * related SaleActivitys from storage. If this Company is new, it will return
	 * an empty collection or the current collection, the criteria is ignored on a new object.
	 *
	 * @param      PropelPDO $con
	 * @param      Criteria $criteria
	 * @return     array SaleActivity[]
	 * @throws     PropelException
	 */
	public function getSaleActivitys($criteria = null, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSaleActivitys === null) {
			if ($this->isNew()) {
			   $this->collSaleActivitys = array();
			} else {

				$criteria->add(SaleActivityPeer::COMPANY_ID, $this->id);

				SaleActivityPeer::addSelectColumns($criteria);
				$this->collSaleActivitys = SaleActivityPeer::doSelect($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return the collection.


				$criteria->add(SaleActivityPeer::COMPANY_ID, $this->id);

				SaleActivityPeer::addSelectColumns($criteria);
				if (!isset($this->lastSaleActivityCriteria) || !$this->lastSaleActivityCriteria->equals($criteria)) {
					$this->collSaleActivitys = SaleActivityPeer::doSelect($criteria, $con);
				}
			}
		}
		$this->lastSaleActivityCriteria = $criteria;
		return $this->collSaleActivitys;
	}

	/**
	 * Returns the number of related SaleActivity objects.
	 *
	 * @param      Criteria $criteria
	 * @param      boolean $distinct
	 * @param      PropelPDO $con
	 * @return     int Count of related SaleActivity objects.
	 * @throws     PropelException
	 */
	public function countSaleActivitys(Criteria $criteria = null, $distinct = false, PropelPDO $con = null)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		} else {
			$criteria = clone $criteria;
		}

		if ($distinct) {
			$criteria->setDistinct();
		}

		$count = null;

		if ($this->collSaleActivitys === null) {
			if ($this->isNew()) {
				$count = 0;
			} else {

				$criteria->add(SaleActivityPeer::COMPANY_ID, $this->id);

				$count = SaleActivityPeer::doCount($criteria, $con);
			}
		} else {
			// criteria has no effect for a new object
			if (!$this->isNew()) {
				// the following code is to determine if a new query is
				// called for.  If the criteria is the same as the last
				// one, just return count of the collection.


				$criteria->add(SaleActivityPeer::COMPANY_ID, $this->id);

				if (!isset($this->lastSaleActivityCriteria) || !$this->lastSaleActivityCriteria->equals($criteria)) {
					$count = SaleActivityPeer::doCount($criteria, $con);
				} else {
					$count = count($this->collSaleActivitys);
				}
			} else {
				$count = count($this->collSaleActivitys);
			}
		}
		return $count;
	}

	/**
	 * Method called to associate a SaleActivity object to this object
	 * through the SaleActivity foreign key attribute.
	 *
	 * @param      SaleActivity $l SaleActivity
	 * @return     void
	 * @throws     PropelException
	 */
	public function addSaleActivity(SaleActivity $l)
	{
		if ($this->collSaleActivitys === null) {
			$this->initSaleActivitys();
		}
		if (!in_array($l, $this->collSaleActivitys, true)) { // only add it if the **same** object is not already associated
			array_push($this->collSaleActivitys, $l);
			$l->setCompany($this);
		}
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related SaleActivitys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getSaleActivitysJoinSaleAction($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSaleActivitys === null) {
			if ($this->isNew()) {
				$this->collSaleActivitys = array();
			} else {

				$criteria->add(SaleActivityPeer::COMPANY_ID, $this->id);

				$this->collSaleActivitys = SaleActivityPeer::doSelectJoinSaleAction($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SaleActivityPeer::COMPANY_ID, $this->id);

			if (!isset($this->lastSaleActivityCriteria) || !$this->lastSaleActivityCriteria->equals($criteria)) {
				$this->collSaleActivitys = SaleActivityPeer::doSelectJoinSaleAction($criteria, $con, $join_behavior);
			}
		}
		$this->lastSaleActivityCriteria = $criteria;

		return $this->collSaleActivitys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related SaleActivitys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getSaleActivitysJoinUser($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSaleActivitys === null) {
			if ($this->isNew()) {
				$this->collSaleActivitys = array();
			} else {

				$criteria->add(SaleActivityPeer::COMPANY_ID, $this->id);

				$this->collSaleActivitys = SaleActivityPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SaleActivityPeer::COMPANY_ID, $this->id);

			if (!isset($this->lastSaleActivityCriteria) || !$this->lastSaleActivityCriteria->equals($criteria)) {
				$this->collSaleActivitys = SaleActivityPeer::doSelectJoinUser($criteria, $con, $join_behavior);
			}
		}
		$this->lastSaleActivityCriteria = $criteria;

		return $this->collSaleActivitys;
	}


	/**
	 * If this collection has already been initialized with
	 * an identical criteria, it returns the collection.
	 * Otherwise if this Company is new, it will return
	 * an empty collection; or if this Company has previously
	 * been saved, it will retrieve related SaleActivitys from storage.
	 *
	 * This method is protected by default in order to keep the public
	 * api reasonable.  You can provide public methods for those you
	 * actually need in Company.
	 */
	public function getSaleActivitysJoinSaleActivityStatus($criteria = null, $con = null, $join_behavior = Criteria::LEFT_JOIN)
	{
		if ($criteria === null) {
			$criteria = new Criteria(CompanyPeer::DATABASE_NAME);
		}
		elseif ($criteria instanceof Criteria)
		{
			$criteria = clone $criteria;
		}

		if ($this->collSaleActivitys === null) {
			if ($this->isNew()) {
				$this->collSaleActivitys = array();
			} else {

				$criteria->add(SaleActivityPeer::COMPANY_ID, $this->id);

				$this->collSaleActivitys = SaleActivityPeer::doSelectJoinSaleActivityStatus($criteria, $con, $join_behavior);
			}
		} else {
			// the following code is to determine if a new query is
			// called for.  If the criteria is the same as the last
			// one, just return the collection.

			$criteria->add(SaleActivityPeer::COMPANY_ID, $this->id);

			if (!isset($this->lastSaleActivityCriteria) || !$this->lastSaleActivityCriteria->equals($criteria)) {
				$this->collSaleActivitys = SaleActivityPeer::doSelectJoinSaleActivityStatus($criteria, $con, $join_behavior);
			}
		}
		$this->lastSaleActivityCriteria = $criteria;

		return $this->collSaleActivitys;
	}

	/**
	 * Resets all collections of referencing foreign keys.
	 *
	 * This method is a user-space workaround for PHP's inability to garbage collect objects
	 * with circular references.  This is currently necessary when using Propel in certain
	 * daemon or large-volumne/high-memory operations.
	 *
	 * @param      boolean $deep Whether to also clear the references on all associated objects.
	 */
	public function clearAllReferences($deep = false)
	{
		if ($deep) {
			if ($this->collActivationCodes) {
				foreach ((array) $this->collActivationCodes as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collCompanyBanks) {
				foreach ((array) $this->collCompanyBanks as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collEmployees) {
				foreach ((array) $this->collEmployees as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collInvoices) {
				foreach ((array) $this->collInvoices as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collOtherCosts) {
				foreach ((array) $this->collOtherCosts as $o) {
					$o->clearAllReferences($deep);
				}
			}
			if ($this->collSaleActivitys) {
				foreach ((array) $this->collSaleActivitys as $o) {
					$o->clearAllReferences($deep);
				}
			}
		} // if ($deep)

		$this->collActivationCodes = null;
		$this->collCompanyBanks = null;
		$this->collEmployees = null;
		$this->collInvoices = null;
		$this->collOtherCosts = null;
		$this->collSaleActivitys = null;
			$this->aCountry = null;
			$this->aCity = null;
			$this->aStatus = null;
			$this->aCompanySize = null;
			$this->aCompanyType = null;
			$this->aCustomerType = null;
			$this->aApartmentForm = null;
			$this->aInvoiceMethod = null;
			$this->aUser = null;
			$this->aAgentCompany = null;
	}


  public function __call($method, $arguments)
  {
    if (!$callable = sfMixer::getCallable('BaseCompany:'.$method))
    {
      throw new sfException(sprintf('Call to undefined method BaseCompany::%s', $method));
    }

    array_unshift($arguments, $this);

    return call_user_func_array($callable, $arguments);
  }


} // BaseCompany
